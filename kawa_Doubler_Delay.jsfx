//====================================================================
desc:_kawa_Doubler_Delay
//====================================================================

// imports
//====================================================================
import kawa_ALL.jsfx-inc
//====================================================================

// sliders  //( this app lib need Continuous number)
//--------------------------------------------------------------------
slider1:0.1 <0.0,1.0>DELAY L
slider2:0.25<0.0,0.9>DELAY R
slider3:0.25<0.0,1.0>FEEDBACK
slider4:1.0 <0,1>DRY / WET
//====================================================================
in_pin: left input
in_pin: right input
out_pin:left output
out_pin:right output
//====================================================================

@init
//====================================================================

    // create APP ID
    //================================================================
    APP_ID = APP_create();
    //================================================================

    //create Layer ID
    //================================================================
    LAYER_001 = LAYER_create("LAYER01");
    //================================================================

    //create Component and add to layer 1 .
    //================================================================
    TEST_comp  = COMPONENT_create("TEST");
    KONB_ID_L  = KNOB_create( "Delay L") ;
    KONB_ID_R  = KNOB_create( "Delay R") ;
    COMPONENT_setSliderIndex(KONB_ID_L,1);
    COMPONENT_setSliderIndex(KONB_ID_R,2);
    //----------------------------------------------------------------
    LAYER_addChildComponent(LAYER_001 , TEST_comp);
    LAYER_addChildComponent(LAYER_001 , SLIDER_2_comp);
    LAYER_addChildComponent(LAYER_001 , KONB_ID_L);
    LAYER_addChildComponent(LAYER_001 , KONB_ID_R);
    //================================================================

    // layer 2
    //================================================================
    BUTTON_comp   = BUTTON_create("DBG");
    SLIDER_1_comp = SLIDER_create("TEST4");
    //----------------------------------------------------------------
    LAYER_addChildComponent(LAYER_002 , BUTTON_comp);
    LAYER_addChildComponent(LAYER_002 , SLIDER_1_comp);
    //================================================================

    // layer add to app
    //================================================================
    APP_addChildComponent(APP_ID,LAYER_001);
    LAYER_setActive(LAYER_001,true);
    //================================================================

    // canvase test
    //================================================================
    CANVS_WAVE_L = CANVAS_create(gfx_w,gfx_h);
    CANVS_WAVE_R = CANVAS_create(gfx_w,gfx_h);
    //================================================================
    
    delaySize = srate;
    DELAY_ARRAY_L = CURSOLBUFFER_create(delaySize);
    DELAY_ARRAY_R = CURSOLBUFFER_create(delaySize);
    //================================================================
    DBG_toggle(DBG); // visible off
    //================================================================
    
    // for particle 
    PARTICLE_controller = PARTICLE_CONTROLLER_create();
    //================================================================
    
@slider
//====================================================================
    COMPONENT_setValue(KONB_ID_L,slider1,false);
    COMPONENT_setValue(KONB_ID_R,slider2,false);
    //================================================================
    APP_SliderChanged(APP_ID); // notify for update lastValue
    //================================================================
@block
//====================================================================
    max_L = 0;min_L = 0;
    max_R = 0;min_R = 0;
    //================================================================
    
@sample
//====================================================================
    max_L = max(max_L,spl0);
    min_L = min(min_L,spl0);
    max_R = max(max_R,spl1);
    min_R = min(min_R,spl1);
    //================================================================
 
    //================================================================
    CURSOLBUFFER_push( DELAY_ARRAY_L
                     ,(spl0+spl1)/2+delay_L*0.9*slider3 );    
    CURSOLBUFFER_push( DELAY_ARRAY_R
                     ,(spl0+spl1)/2+delay_R*0.9*slider3 );  
    //================================================================
    delay_L = CURSOLBUFFER_getOffsettedValue( DELAY_ARRAY_L
                                            , -delaySize * 0.5
                                            * COMPONENT_getValue(KONB_ID_L)
                                            );
    delay_R = CURSOLBUFFER_getOffsettedValue( DELAY_ARRAY_R
                                            , -delaySize * 0.5
                                            * COMPONENT_getValue(KONB_ID_R)
                                            );
    //================================================================

    //================================================================
    delay_L = spl0+ delay_L;
    delay_R = spl1+ delay_R;
    //================================================================
    spl0 = spl0 *(1-slider4   ) + (spl0 + delay_L ) * (slider4   ) ;
    spl1 = spl1 *(1-slider4   ) + (spl1 + delay_R ) * (slider4   ) ;
    //================================================================

@gfx 200 400
//====================================================================
    // direct draw background to
    //================================================================
    drawBackGrond_color( 10, 120 , 12*4);
    drawSinWaveCircle(100,0.8,1,0.0043);
    drawSinWaveCircle(100,0.8,1,0.0043);
    //================================================================

    // canvase test
    //================================================================
    drawWaveBufferToCanvas( CANVS_WAVE_L
                          , max_L
                          , min_L
                          , 40 *  COMPONENT_getValue(KONB_ID_L)
                          , 0.5
                          , 1
                          , 80);

    drawWaveBufferToCanvas( CANVS_WAVE_R
                          , max_R
                          , min_R
                          , 40 *  COMPONENT_getValue(KONB_ID_R)
                          , 0.6
                          , 1
                          , 0);
    //================================================================
    gfx_a =0.6;
    CANVAS_blitImage4(CANVS_WAVE_R,1,0);
    CANVAS_blitImage4(CANVS_WAVE_L,1,0);
    gfx_a =1;
    //================================================================
    // final background
    //================================================================
    drawDotGrid(10,10,0.06);
    //================================================================
   
    // for debug
    //================================================================
    DBGMESSAGE_drawAllMessage(DBG);
    //================================================================

    // for particle 
    PARTICLE_CONTROLLER_update ( PARTICLE_controller );
    //================================================================
    ( APP_isMouseButtonHoldingPress(APP_ID)  ==true) ?      
    (
        PARTICLE_CONTROLLER_addParticleType1(PARTICLE_controller);
        0;
    );
    //================================================================
    (time_precise() -lastPTime_  > 0.25)?
    (
        PARTICLE_CONTROLLER_addParticleType2_XY ( PARTICLE_controller
                                                , gfx_w/2
                                                , gfx_h/2
                                                , false
                                               );
       lastPTime_ = time_precise();
    );
    //================================================================
    
    //================================================================
    // App update. check and compare with last event state.(resize or mouse)
    //================================================================
    APP_update(APP_ID);
    //================================================================
    
    //================================================================
    ( mouse_cap & 2 ==2 && lastCAP != mouse_cap )?
    (
        0;
        //============================================================
    );
    //================================================================
    lastCAP = mouse_cap;
    //================================================================
    
    //================================================================
    ( APP_isMouseButtonPressed(APP_ID)  ==true) ?
    ( 0;);
    
    ( APP_isMouseButtonReleased(APP_ID) ==true) ?
    ( 0;);
    //================================================================
    
    // alignment position when resized.
    //================================================================
    ( APP_isWindowResized(APP_ID) ==true) ?
    (
        RECTANGLE_copyTo      ( CANVS_WAVE_L,APP_ID);
        RECTANGLE_copyTo      ( CANVS_WAVE_R,APP_ID);
        CANVAS_recreateCanvas ( CANVS_WAVE_L ); 
        CANVAS_recreateCanvas ( CANVS_WAVE_R );
        //============================================================
        RECTANGLE_copyTo      ( LAYER_001,APP_ID);  // layer resize 
        RECTANGLE_copyTo      ( LAYER_002,APP_ID);  // layer resize 
        //============================================================
    );
    //================================================================
  
    //================================================================
    ( LAYER_isAreaResized(LAYER_001) ==true)   ?
    (
        RECTANGLE_copyTo          (TEST_comp,LAYER_001);
        RECTANGLE_cropFromTopP    (TEST_comp,0.025);
        //============================================================
        RECTANGLE_copyTo          (KONB_ID_L,LAYER_001);
        RECTANGLE_removeFromRightP(KONB_ID_L,0.5);
        RECTANGLE_reduce          (KONB_ID_L,5,5);
        //============================================================
        RECTANGLE_copyTo          (KONB_ID_R,LAYER_001);
        RECTANGLE_removeFromLeftP (KONB_ID_R,0.5);
        RECTANGLE_reduce          (KONB_ID_R,5,5);
        //============================================================
    );
    //================================================================

    // if animation
    //================================================================
    COMPONENT_setComponentAlpha(TEST_comp,abs(sin($pi*2*mod*2)));
    mod += 0.01;(mod > 1 )?(mod=0;);
    //================================================================
    
    // plugin Title Str
    //================================================================
    RECTANGLE_drawBottomRightText( APP_ID,"kawa Test Delay");
    //================================================================

//====================================================================
// 続

