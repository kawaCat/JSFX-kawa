//====================================================================
desc:_kawa_Doubler_Delay
//====================================================================

// imports
//====================================================================
import kawa_ALL.jsfx-inc
//====================================================================

// sliders  //( this app lib need Continuous number)
//--------------------------------------------------------------------
slider1:0.25<0.0,1.0>DELAY L
slider2:0.8 <0.0,1.0>DELAY R
slider3:0.25<0.0,0.95>FEEDBACK
slider4:0.60<0.0,1.0>DRY / WET
slider5:0   <0,1, {Normal,Invert}>Delay L Phase
slider6:0   <0,1, {Normal,Invert}>Delay R Phase
slider7:0.0 <0,1, {XY Slider,Knob}> Edit Mode
//====================================================================
//in_pin: left input
//in_pin: right input
//out_pin:left output
//out_pin:right output
//====================================================================

@init
//====================================================================

    // create APP ID
    //================================================================
    app_ID = APP_create();
    //================================================================

    //create Layer ID
    //================================================================
    layer_001  = LAYER_create("LAYER01");
    layer_002  = LAYER_create("LAYER01");
    //================================================================

    //create Component and add to layer 1 .
    //================================================================
    comp_Border  = COMPONENT_create("TEST");
    comp_KONB_ID_L  = KNOB_create( "Delay L") ;
    comp_KONB_ID_R  = KNOB_create( "Delay R") ;
    COMPONENT_setSliderIndex(comp_KONB_ID_L,1);
    COMPONENT_setSliderIndex(comp_KONB_ID_R,2);
    //================================================================
    
    //----------------------------------------------------------------
    LAYER_addChildComponent(layer_001  , comp_Border);
    LAYER_addChildComponent(layer_001  , comp_KONB_ID_L);
    LAYER_addChildComponent(layer_001  , comp_KONB_ID_R);
    LAYER_addChildComponent(layer_001  , comp_XYSlider_1);
    LAYER_addChildComponent(layer_001  , comp_XYSlider_1);
    //================================================================

    // layer 2
    //================================================================
    comp_XYSlider_1 = XYSLIDER_create("comp_XYSlider_1");
    XYSLIDER_setSliderIndexX(comp_XYSlider_1,2);
    XYSLIDER_setSliderIndexY(comp_XYSlider_1,1);
    //----------------------------------------------------------------
    LAYER_addChildComponent(layer_002 , comp_Border);// shared with layer1
    LAYER_addChildComponent(layer_002 , comp_XYSlider_1);


    // layer add to app
    //================================================================
    APP_addChildComponent(app_ID,layer_001 );
    APP_addChildComponent(app_ID,layer_002 );
    LAYER_setActive(layer_001 ,false);
    LAYER_setActive(layer_002 ,true);
    //================================================================

    // canvase test
    //================================================================
    canvas_WAVE_L = CANVAS_create(gfx_w,gfx_h);
    canvas_WAVE_R = CANVAS_create(gfx_w,gfx_h);
    //================================================================
    
    delaySize = srate;
    DELAY_ARRAY_L = CURSOLBUFFER_create(delaySize);
    DELAY_ARRAY_R = CURSOLBUFFER_create(delaySize);
    //================================================================
    DBG_toggle(DBG); // visible off
    //================================================================
    
    // for particle 
    PARTICLE_controller = PARTICLE_CONTROLLER_create();
    //================================================================
    
@slider
//====================================================================
    COMPONENT_setValue(comp_KONB_ID_L,slider1,false);
    COMPONENT_setValue(comp_KONB_ID_R,slider2,false);
    XYSLIDER_setXValue(comp_XYSlider_1,slider2,false);
    XYSLIDER_setYValue(comp_XYSlider_1,slider1,false);
    //================================================================
    APP_SliderChanged(app_ID); // notify for update lastValue
    //================================================================
@block
//====================================================================
    f_max_L = 0;f_min_L = 0;
    f_max_R = 0;f_min_R = 0;
    //================================================================
    
@sample
//====================================================================
    f_max_L = max(f_max_L,spl0);
    f_min_L = min(f_min_L,spl0);
    f_max_R = max(f_max_R,spl1);
    f_min_R = min(f_min_R,spl1);
    //================================================================
 
    //================================================================
    CURSOLBUFFER_push( DELAY_ARRAY_L
                     ,(spl0+spl1)/2+delay_L*0.9*slider3 );    
    CURSOLBUFFER_push( DELAY_ARRAY_R
                     ,(spl0+spl1)/2+delay_R*0.9*slider3 );  
    //================================================================
    delay_L = CURSOLBUFFER_getOffsettedValue( DELAY_ARRAY_L
                                            , -delaySize 
                                            * COMPONENT_getValue(comp_KONB_ID_L)
                                            );
    delay_R = CURSOLBUFFER_getOffsettedValue( DELAY_ARRAY_R
                                            , -delaySize
                                            * COMPONENT_getValue(comp_KONB_ID_R)
                                            );
    //================================================================

    //================================================================
    delay_L = spl0+ delay_L;
    delay_R = spl1+ delay_R;
    //================================================================
    (slider5 ==1) ? invertL =-1 : invertL = 1;
    (slider6 ==1) ? invertR =-1 : invertR = 1;
    spl0 = spl0 *(1-slider4   ) + ( delay_L ) * (slider4   )*invertL ;
    spl1 = spl1 *(1-slider4   ) + ( delay_R ) * (slider4   )*invertR ;
    //================================================================

@gfx 200 400
//====================================================================
    // direct draw background to
    //================================================================
    drawBackGrond_color( 10, 120 , 12*4);
    drawSinWaveCircle(100,0.8,1,0.0043);
    drawSinWaveCircle(100,0.8,1,0.0043);
    //================================================================

    // canvase test
    //================================================================
    drawWaveBufferToCanvas( canvas_WAVE_L
                          , f_max_L
                          , f_min_L
                          , 40 *  COMPONENT_getValue(comp_KONB_ID_L)
                          , 0.5
                          , 1
                          , 80);

    drawWaveBufferToCanvas( canvas_WAVE_R
                          , f_max_R
                          , f_min_R
                          , 40 *  COMPONENT_getValue(comp_KONB_ID_R)
                          , 0.6
                          , 1
                          , 0);
    //================================================================
    gfx_a =0.6;
    CANVAS_blitImage4(canvas_WAVE_R,1,0);
    CANVAS_blitImage4(canvas_WAVE_L,1,0);
    gfx_a =1;
    //================================================================
    // final background
    //================================================================
    drawDotGrid(10,10,0.06);
    //================================================================
   
    // for debug
    //================================================================
    DBGMESSAGE_drawAllMessage(DBG);
    //================================================================

    // for particle 
    PARTICLE_CONTROLLER_update ( PARTICLE_controller );
    //================================================================
    ( APP_isMouseButtonHoldingPress(app_ID)  ==true) ?      
    (
        PARTICLE_CONTROLLER_addParticleType1(PARTICLE_controller);
        0;
    );
    //================================================================
    (time_precise() -lastPTime_  > 0.25)?
    (
        PARTICLE_CONTROLLER_addParticleType2_XY ( PARTICLE_controller
                                                , gfx_w/2
                                                , gfx_h/2
                                                , false
                                               );
       lastPTime_ = time_precise();
    );
    //================================================================
    
    //================================================================
    // App update. check and compare with last event state.(resize or mouse)
    //================================================================
    APP_update(app_ID);
    //================================================================
    
    //================================================================
    ( mouse_cap & 2 ==2 && lastCAP != mouse_cap )?
    (
        0;
        //============================================================
    );
    //================================================================
    lastCAP = mouse_cap;
    //================================================================
    
  
    LAYER_setActive(layer_001 ,slider7 ~= 0);
    LAYER_setActive(layer_002 ,slider7 == 0);
          
    //================================================================
    ( APP_isMouseButtonPressed_Right(app_ID) ==true) ?
    ( 
        (LAYER_isActive( layer_001) ==true)?
        (
            LAYER_setActive(layer_001 ,false);
            LAYER_setActive(layer_002 ,true);
        ):(
            LAYER_setActive(layer_001 ,true);
            LAYER_setActive(layer_002 ,false);
        );
        
        slider7 = slider7 == 0;
    );
    //================================================================
    
    // alignment position when resized.
    //================================================================
    ( APP_isWindowResized(app_ID) ==true) ?
    (
        RECTANGLE_copyTo      ( canvas_WAVE_L,app_ID);
        RECTANGLE_copyTo      ( canvas_WAVE_R,app_ID);
        CANVAS_recreateCanvas ( canvas_WAVE_L ); 
        CANVAS_recreateCanvas ( canvas_WAVE_R );
        //============================================================
        RECTANGLE_copyTo      ( layer_001 ,app_ID);  // layer resize 
        RECTANGLE_copyTo      ( layer_002 ,app_ID);  // layer resize 
        //============================================================
    );
    //================================================================
  
    //================================================================
    ( LAYER_isAreaResized(layer_001 ) ==true)   ?
    (
        RECTANGLE_copyTo          (comp_Border,layer_001 );
        RECTANGLE_cropFromTopP    (comp_Border,0.025);
        //============================================================
        RECTANGLE_copyTo          (comp_KONB_ID_L,layer_001 );
        RECTANGLE_removeFromRightP(comp_KONB_ID_L,0.5);
        RECTANGLE_reduce          (comp_KONB_ID_L,5,5);
        //============================================================
        RECTANGLE_copyTo          (comp_KONB_ID_R,layer_001 );
        RECTANGLE_removeFromLeftP (comp_KONB_ID_R,0.5);
        RECTANGLE_reduce          (comp_KONB_ID_R,5,5);
        //============================================================
    );
    //================================================================
    
    //================================================================
    ( LAYER_isAreaResized(layer_002 ) ==true)   ?
    (
        RECTANGLE_copyTo          (comp_Border,layer_001 );
        RECTANGLE_cropFromTopP    (comp_Border,0.025);
        //============================================================
        RECTANGLE_copyTo          (comp_XYSlider_1,layer_001 );
        RECTANGLE_reduceP         (comp_XYSlider_1,0.1,0.1);   
    );
    //================================================================
    (    COMPONENT_isValueChanged( comp_KONB_ID_L) ==true
      || COMPONENT_isValueChanged( comp_KONB_ID_R) ==true
      || XYSLIDER_isXValueChanged( comp_XYSlider_1) ==true
      || XYSLIDER_isYValueChanged( comp_XYSlider_1) ==true
    )?
    (
        COMPONENT_setValue(comp_KONB_ID_L,slider1,false);
        COMPONENT_setValue(comp_KONB_ID_R,slider2,false);
        XYSLIDER_setXValue(comp_XYSlider_1,slider2,false);
        XYSLIDER_setYValue(comp_XYSlider_1,slider1,false);
    );
    //================================================================
    

    // if animation
    //================================================================
    COMPONENT_setComponentAlpha(comp_Border,abs(sin($pi*2*mod*2)));
    mod += 0.01;(mod > 1 )?(mod=0;);
    //================================================================
    
    // plugin Title Str
    //================================================================
    RECTANGLE_drawBottomRightText( app_ID,"Doubler Delay");
    //================================================================

//====================================================================
// 続

