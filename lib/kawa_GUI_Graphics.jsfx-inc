
//====================================================================
// function List
//====================================================================

//====================================================================
//      drawWaveBufferToCanvas  (CANVAS_ID,waveMax,waveMin,oneBar_Width,vAmp,alpha,hueOffset)
//      drawBackGrond_1         (gradiationNUM,hueStart_,hueWidth_)
//      drawBackGrond_2         (gradiationNUM,hueStart_,hueWidth_)
//      drawSinWaveCircle       (num,radius,rate,speed) 
//      drawDotGrid             (xwidth,ywidth,radius)
//====================================================================
//      COLOR_changeColor       (COLOR_ID)
//      COLOR_toGFX(COLOR_ID)   (COLOR_changeColor(COLOR_ID);); //aliase function of COLOR_changeColor
//      POINT_drawString        (POINT_ID,text)
//====================================================================
//      CANVAS_blitImage        (CANVAS_ID,dest_xpos,dest_ypos,scale,rotation)
//      CANVAS_blitImage2       (CANVAS_ID,dest_xpos,dest_ypos,scale,rotation,roffsetX,roffsetY)
//      CANVAS_blitImage3       (CANVAS_ID,dest_xpos,dest_ypos,scale,rotation)
//      POINT_drawCircle        (POINT_ID,radius,antialiase)
//      POINT_drawCircleFill    (POINT_ID,radius,antialiase)
//====================================================================

//====================================================================
//      CIRCLE_draw                     (CIRCLE_ID,antialiase)
//      CIRCLE_drawFill                 (CIRCLE_ID,antialiase)
//      RECTANGLE_drawLine              (RECT_ID,antialiase)
//      RECTANGLE_drawFill              (RECT_ID,antialiase)
//      RECTANGLE_drawStrInCenter       (RECT_ID,str)
//      RECTANGLE_drawStrInCenterFitFont(RECT_ID,str)
//      drawDecibelValue                ( x,y,Value,fontsize) 
//====================================================================
//      drawFillArc  ( cx,cy,radius,startAngleA,endAngleA,div)
//      drawFillArc2 ( cx,cy,outRadius,inRadius,startAngleA,endAngleA,div)
//====================================================================


//====================================================================
@init
//====================================================================
// GRAPHICS Process
//====================================================================

___tempHSB ; // !!
//====================================================================


//====================================================================
function drawCircleWaveSignale( _cx,_cy , _CursolBuffer_ID _radius, _signalGain)
    //================================================================
    local (  bufferNum 
            ,drawPointNum
            ,angleDelta
            ,count_BB
            ,last_YY
            ,last_XX
            ,xx_
            ,yy_
            ,value_
            ,roted_X
            ,roted_Y
            ,targetAngle
            )
(
    //================================================================
    bufferNum = CURSOLBUFFER_getMaxSize( _CursolBuffer_ID);
    drawPointNum = bufferNum;
    angleDelta = 1.0/ drawPointNum;
    xDelta = 1;
    count_BB = 0;
    last_YY = _cy -_radius;
    last_XX = _cx;
    //================================================================
    while(count_BB < drawPointNum )
    (
        //============================================================
        xx_ = _cx ;
        value_ = CURSOLBUFFER_getOffsettedValue( _CursolBuffer_ID
                                               ,  -count_BB );
        //============================================================
        yy_ = _cy-_radius- _signalGain*value_;
        //============================================================
        targetAngle = angleDelta *count_BB;
        roted_X = rotPoint_X(xx_,yy_,_cx,_cy,$pi*2*targetAngle);
        roted_Y = rotPoint_Y(xx_,yy_,_cx,_cy,$pi*2*targetAngle);
        //============================================================
        // gfx_r=1;gfx_g=1;gfx_b=1;gfx_a= 0.06;
        // gfx_triangle( _cx,_cy
        //              , last_XX,last_YY
        //              , roted_X,roted_Y
        //              );
        //============================================================
        gfx_r=1;gfx_g=1;gfx_b=0;gfx_a= 1;
        //============================================================
        gfx_line(last_XX,last_YY,roted_X,roted_Y,false);
        //============================================================
        
        //============================================================
        last_XX = roted_X;
        last_YY = roted_Y;
        //============================================================
        count_BB+=1;
    );
    //================================================================
);
//====================================================================



//====================================================================
function drawWaveBufferToCanvas(CANVAS_ID,waveMax,waveMin,oneBar_Width,vAmp,alpha,hueOffset)
    local ( lastDest,tempCanvasSlot,halfHeight
          , yy1,yy2,tempCanvas,vAmp_,CLEAR_CANVAS_SLOT
          , onebarWidth,val,cH,cW)
(
    //================================================================
    gfx_getimgdim(CANVAS_getCanvaseSlotID(CANVAS_ID),cW,cH);
    ( cW >0 && cH >0)?
    (
        //============================================================
        onebarWidth = ceil( oneBar_Width );
        onebarWidth = max (1,onebarWidth);
        lastDest = gfx_dest;
        vAmp_ = vAmp;
        //============================================================
        gfx_setimgdim( STATIC_CLEAR_CANVAS_SLOT,0,0);    //clear
        gfx_setimgdim( STATIC_CLEAR_CANVAS_SLOT,2048,2048);
        //============================================================
        gfx_dest=STATIC_CLEAR_CANVAS_SLOT;
        //============================================================
        gfx_x=0;gfx_y=0;
        gfx_r =1;gfx_g=1;gfx_b=1;gfx_a=1;
        //============================================================
        gfx_blit( CANVAS_getCanvaseSlotID(CANVAS_ID), 1,0 );//scale ,rot );
        //============================================================
        CANVAS_clearCanvas(CANVAS_ID);
        //============================================================
        gfx_dest=CANVAS_getCanvaseSlotID(CANVAS_ID);
        //============================================================
        
        //============================================================
        gfx_blit( STATIC_CLEAR_CANVAS_SLOT 
                , 1,0 //scale ,rot
                , onebarWidth
                , 0
                , RECTANGLE_getWidth(CANVAS_ID) -onebarWidth
                , RECTANGLE_getHeight(CANVAS_ID)
                //----------------------------------------------------
                , 0, 0
                , RECTANGLE_getWidth(CANVAS_ID) -onebarWidth
                , RECTANGLE_getHeight(CANVAS_ID)
                );
        //============================================================

        //============================================================
        halfHeight =  (RECTANGLE_getHeight(CANVAS_ID)/2);
        yy1 =  halfHeight - abs( halfHeight * waveMax) *vAmp_;
        yy2 =  halfHeight + abs( halfHeight * waveMin) *vAmp_;
        val = max(waveMax,abs(waveMin));
        ___tempHSB.HSBtoRGB(-180+30*val +hueOffset, 0   , 1*hueOffset);
        gfx_r =___tempHSB.r/255;gfx_g=___tempHSB.g/255;gfx_b=___tempHSB.b/255;gfx_a=1;
        //============================================================
        gfx_rect( RECTANGLE_getWidth(CANVAS_ID) -onebarWidth
                , yy1
                , onebarWidth
                , yy2-yy1
                ,true,true );
        //============================================================
        gfx_r =0;gfx_g=0;gfx_b=0;gfx_a=0.5;
        //============================================================
        gfx_line(RECTANGLE_getWidth(CANVAS_ID) -onebarWidth
                , halfHeight
                , RECTANGLE_getWidth(CANVAS_ID)
                ,halfHeight
                ,true
                );
        //============================================================
        gfx_dest= lastDest;
        //============================================================
        gfx_a=1;
    );
);
//====================================================================



//====================================================================
function drawBackGrond_black(gradiationNUM)
    local (count_,incWidth,_incHue,move_)
(
    //================================================================
    count_ = 0;
    incWidth = ceil (gfx_w/gradiationNUM);
    _incHue =  hueWidth_ /gradiationNUM;
    //================================================================
    while (count_ < gradiationNUM)
    (
        ___tempHSB.HSBtoRGB(0
                           ,0
                           ,0.6/gradiationNUM *count_);
        //============================================================
        gfx_r = ___tempHSB.r/255;
        gfx_g = ___tempHSB.g/255;
        gfx_b = ___tempHSB.b/255;
        gfx_a = 1;
        //============================================================
        gfx_rect( incWidth*count_,0,incWidth,gfx_h,true);
        //============================================================
        count_+=1;
    );
    //================================================================
    move_ += 1.5;
    (move_ >360) ?(move_ =0);
);
//====================================================================
function drawBackGrond_color(gradiationNUM,hueStart_,hueWidth_)
    local (count_,incWidth,_incHue,move_)
(
    //================================================================
    count_ = 0;
    incWidth = ceil (gfx_w/gradiationNUM);
    _incHue =  hueWidth_ /gradiationNUM;
    //================================================================
    while (count_ < gradiationNUM)
    (
        ___tempHSB.HSBtoRGB(hueStart_ + _incHue*count_ +move_ ,1,1);
        //============================================================
        gfx_r = ___tempHSB.r/255;
        gfx_g = ___tempHSB.g/255;
        gfx_b = ___tempHSB.b/255;
        gfx_a = 1;
        //============================================================
        gfx_rect( incWidth*count_,0,incWidth,gfx_h,true);
        //============================================================
        count_+=1;
    );
    //================================================================
    move_ += 1.5;
    (move_ >360) ?(move_ =0);
);
//====================================================================

//====================================================================
function drawSinWaveCircle(num,radius,rate,speed) 
    local (count_,incWidth,incDelta,x,y,time_)
(
    incWidth = gfx_w / num;
    incDelta = ($pi *2 *rate)/num;
    //================================================================
    gfx_r=1;
    gfx_g=1;
    gfx_b=1;
    gfx_a=1;
    //================================================================
    count_ = 0;
    while ( count_ < num )
    (
        x = incWidth * count_ -radius;
        y = sin( $pi *2 *  time_ + incDelta*count_  )   * gfx_h/2.3 + gfx_h/2;
        gfx_circle(x,y,radius,true);
        //============================================================
        x = incWidth * count_ -radius;
        y = sin( $pi *2 *  time_ + incDelta*count_ +$pi )* gfx_h/2.3 + gfx_h/2;
        gfx_circle(x,y,radius,true);
        //============================================================
        count_+=1;
    );
    //================================================================
    time_+= speed;
    (time_ > 1.0)?(time_ =0.0);
    (time_ < 0.0)?(time_ =1.0);
);
//====================================================================
function drawDotGrid(xwidth,ywidth,radius)
    local (_xDrawNum,_yDrawNum,count_x,count_y)
(
    //================================================================
    _xDrawNum = gfx_w / xwidth;
    _yDrawNum = gfx_h / ywidth;
    //================================================================
    
    count_y = 0;
    //================================================================
    while (count_y < _yDrawNum )
    (
        count_x = 0;
        while (count_x < _xDrawNum )
        (
            gfx_r=1; gfx_g=1;
            gfx_b=1; gfx_a=0.5;
            //========================================================
            gfx_circle( xwidth * count_x
                      , ywidth * count_y
                      , radius,true);
            //========================================================
            count_x +=1;
        );
        count_y +=1;
    );
    //================================================================
);
//====================================================================


//====================================================================
function COLOR_changeColor(COLOR_ID)
(
    gfx_r = COLOR_getR(COLOR_ID);
    gfx_g = COLOR_getG(COLOR_ID);
    gfx_b = COLOR_getB(COLOR_ID);
    gfx_a = COLOR_getA(COLOR_ID);
);
//====================================================================
function COLOR_toGFX(COLOR_ID)( COLOR_changeColor(COLOR_ID);); //aliase function of COLOR_changeColor
//====================================================================
function POINT_drawString( POINT_ID,text)local (x,y,lastX,lastY)
(
    lastX = gfx_x;lastY = gfx_y;
    //================================================================
    gfx_x = POINT_getX ( POINT_ID);
    gfx_y = POINT_getY ( POINT_ID);
    gfx_drawstr( text);
    //================================================================
    gfx_x = lastX;gfx_y = lastY;
);
//====================================================================

//====================================================================
function CANVAS_blitImage(CANVAS_ID,dest_xpos,dest_ypos,scale,rotation)
    local ( lastX,lastY)
(
    lastX = gfx_x;lastY = gfx_y;
    //================================================================
    gfx_x = dest_xpos ;
    gfx_y = dest_ypos ;
    gfx_blit( CANVAS_getCanvaseSlotID (CANVAS_ID),scale,rotation);
    //================================================================
    gfx_x = lastX;gfx_y = lastY;
);
function CANVAS_blitImage2(CANVAS_ID,dest_xpos,dest_ypos,scale,rotation,roffsetX,roffsetY)local (canvasSlot)
(
    canvasSlot = CANVAS_getCanvaseSlotID (CANVAS_ID);
    lastX = gfx_x;lastY = gfx_y;
    //================================================================
    gfx_x = dest_xpos;
    gfx_y = dest_ypos;
    gfx_blit( canvasSlot,scale,rotation
            , dest_xpos,dest_ypos
            , RECTANGLE_getWidth(CANVAS_ID )
            , RECTANGLE_getHeight(CANVAS_ID )
            //--------------------------------------------------------
            , dest_xpos,dest_ypos
            , RECTANGLE_getWidth(CANVAS_ID )
            , RECTANGLE_getHeight(CANVAS_ID )
            //--------------------------------------------------------
            , roffsetX,roffsetY
            );
    //================================================================
    gfx_x = lastX;gfx_y = lastY;
);
//====================================================================
function CANVAS_blitImage3(CANVAS_ID,dest_xpos,dest_ypos,scale,rotation)local (canvasSlot)
(
    canvasSlot = CANVAS_getCanvaseSlotID (CANVAS_ID);
    lastX = gfx_x;lastY = gfx_y;
    //================================================================
    gfx_x = dest_xpos;
    gfx_y = dest_ypos;
    gfx_blit( canvasSlot,scale,rotation
            , dest_xpos,dest_ypos
            , RECTANGLE_getWidth(CANVAS_ID )
            , RECTANGLE_getHeight(CANVAS_ID )
            //--------------------------------------------------------
            , dest_xpos,dest_ypos
            , RECTANGLE_getWidth(CANVAS_ID )
            , RECTANGLE_getHeight(CANVAS_ID )
            //--------------------------------------------------------
            , RECTANGLE_getWidth(CANVAS_ID )/8
            , RECTANGLE_getHeight(CANVAS_ID )/8
            );
    //================================================================
    gfx_x = lastX;gfx_y = lastY;
);
//====================================================================

//====================================================================
function CANVAS_blitImage4(CANVAS_ID,scale,rotation)
    local ( lastX,lastY)
(
    lastX = gfx_x;lastY = gfx_y;
    //================================================================
    gfx_x = RECTANGLE_getX( CANVAS_ID );
    gfx_y = RECTANGLE_getY( CANVAS_ID ) ;
    gfx_blit( CANVAS_getCanvaseSlotID (CANVAS_ID),scale,rotation);
    //================================================================
    gfx_x = lastX;gfx_y = lastY;
);
//====================================================================
function POINT_drawCircle(POINT_ID,radius,antialiase)local (x,y)
(
    x = POINT_getX(POINT_ID);
    y = POINT_getY(POINT_ID);
    gfx_circle(x,y,radius,false,antialiase);
);
//====================================================================
function POINT_drawCircleFill(POINT_ID,radius,antialiase)local (x,y)
(
    x = POINT_getX(POINT_ID);
    y = POINT_getY(POINT_ID);
    gfx_circle(x,y,radius,true,antialiase);
);
//====================================================================
function POINT_drawLine(POINT_A_ID,POINT_B_ID,thickNess)
    local ( angleRad
          , x1_L,y1_L
          , x1_R,y1_R
          , x2_L,y2_L
          , x2_R,y2_R
          , cx
          , cy
          )
(
    angleRad =  POINT_getAngle(POINT_A_ID,POINT_ID_B);
    cx = POINT_getX(POINT_A_ID );
    cy = POINT_getY(POINT_A_ID );
    //================================================================
    x1_L = rotPoint_X(POINT_getX(POINT_A_ID),POINT_getY(POINT_A_ID)-thickNess,cx,cy,angleRad);
    y1_L = rotPoint_Y(POINT_getX(POINT_A_ID),POINT_getY(POINT_A_ID)-thickNess,cx,cy,angleRad);
    x1_R = rotPoint_X(POINT_getX(POINT_A_ID),POINT_getY(POINT_A_ID)+thickNess,cx,cy,angleRad);
    y1_R = rotPoint_Y(POINT_getX(POINT_A_ID),POINT_getY(POINT_A_ID)+thickNess,cx,cy,angleRad);
    //================================================================
    
    //================================================================
    cx = POINT_getX(POINT_B_ID );
    cy = POINT_getY(POINT_B_ID );
    x2_L = rotPoint_X(POINT_getX(POINT_B_ID),POINT_getY(POINT_B_ID)-thickNess,cx,cy,angleRad);
    y2_L = rotPoint_Y(POINT_getX(POINT_B_ID),POINT_getY(POINT_B_ID)-thickNess,cx,cy,angleRad);
    x2_R = rotPoint_X(POINT_getX(POINT_B_ID),POINT_getY(POINT_B_ID)+thickNess,cx,cy,angleRad);
    y2_R = rotPoint_Y(POINT_getX(POINT_B_ID),POINT_getY(POINT_B_ID)+thickNess,cx,cy,angleRad);
    //================================================================
    gfx_triangle ( x1_L, y1_L
                  ,x1_R, y1_R
                  ,x2_L, y2_L
                  ,x2_R, y2_R
                  );
);
//====================================================================
function POINT_drawLineWithRect(POINT_A_ID,POINT_B_ID,thickNess,rectAngle_)
    local ( angleRad
          , x1_L,y1_L
          , x1_R,y1_R
          , x2_L,y2_L
          , x2_R,y2_R
          , cx
          , cy
          , x1,y1, x2, y2 
          )
(
    angleRad =  POINT_getAngle(POINT_A_ID,POINT_ID_B);
    cx = POINT_getX(POINT_A_ID );
    cy = POINT_getY(POINT_B_ID );
    //================================================================
    x1 = RECTANGLE_getX(rectAngle_ );
    y1 = RECTANGLE_getY(rectAngle_ );
    x2 = RECTANGLE_getX2(rectAngle_ )-1;
    y2 = RECTANGLE_getY2(rectAngle_ )-1;
    //================================================================
    x1_L = rotPoint_X(POINT_getX(POINT_A_ID),POINT_getY(POINT_A_ID)-thickNess,cx,cy,angleRad);
    y1_L = rotPoint_Y(POINT_getX(POINT_A_ID),POINT_getY(POINT_A_ID)-thickNess,cx,cy,angleRad);
    x1_R = rotPoint_X(POINT_getX(POINT_A_ID),POINT_getY(POINT_A_ID)+thickNess,cx,cy,angleRad);
    y1_R = rotPoint_Y(POINT_getX(POINT_A_ID),POINT_getY(POINT_A_ID)+thickNess,cx,cy,angleRad);
    //================================================================
    x1_L  = max(x1,min(x2,x1_L));
    y1_L  = max(y1,min(y2,y1_L));
    x1_R  = max(x1,min(x2,x1_R));
    y1_R  = max(y1,min(y2,y1_R));
    //================================================================
    cx = POINT_getX(POINT_B_ID );
    cy = POINT_getY(POINT_B_ID );
    x2_L = rotPoint_X(POINT_getX(POINT_B_ID),POINT_getY(POINT_B_ID)-thickNess,cx,cy,angleRad);
    y2_L = rotPoint_Y(POINT_getX(POINT_B_ID),POINT_getY(POINT_B_ID)-thickNess,cx,cy,angleRad);
    x2_R = rotPoint_X(POINT_getX(POINT_B_ID),POINT_getY(POINT_B_ID)+thickNess,cx,cy,angleRad);
    y2_R = rotPoint_Y(POINT_getX(POINT_B_ID),POINT_getY(POINT_B_ID)+    thickNess,cx,cy,angleRad);
    //================================================================
    x2_L  = max(x1,min(x2,x2_L));
    y2_L  = max(y1,min(y2,y2_L));
    x2_R  = max(x1,min(x2,x2_R));
    y2_R  = max(y1,min(y2,y2_R));
    //================================================================
    gfx_triangle ( x1_L, y1_L
                  ,x1_R, y1_R
                  ,x2_L, y2_L
                  ,x2_R, y2_R
                  );
);
//====================================================================
function POINT_drawLine_2(POINT_A_ID,POINT_B_ID)
(
    //================================================================
    gfx_line ( POINT_getX(POINT_A_ID)
              ,POINT_getY(POINT_A_ID)
              ,POINT_getX(POINT_B_ID)
              ,POINT_getY(POINT_B_ID)
             );
    //================================================================
);
//====================================================================
function POINT_drawLineWithRect_2(POINT_A_ID,POINT_B_ID,rectAngle_)
    local (  x1,y1, x2, y2 
          )
(
    //================================================================
    x1 = RECTANGLE_getX(rectAngle_ );
    y1 = RECTANGLE_getY(rectAngle_ );
    x2 = RECTANGLE_getX2(rectAngle_ )-1;
    y2 = RECTANGLE_getY2(rectAngle_ )-1;
    //================================================================
    gfx_line ( max(x1,min(x2,POINT_getX(POINT_A_ID)))
              ,max(y1,min(y2,POINT_getY(POINT_A_ID)))
              ,max(x1,min(x2,POINT_getX(POINT_B_ID)))
              ,max(y1,min(y2,POINT_getY(POINT_B_ID)))
             );
    //================================================================
);
//====================================================================
function DrawLine_WithThickNess(x1_,y1_,x2_,y2_,thickness)
    local ( angle
          , p1X ,p1Y
          , p2X ,p2Y
          , p3X ,p3Y
          , p4X ,p4Y
          )
(
    //================================================================
    angle = atan2( y2_ -y1_ 
                 , x2_ -x1_ );
    //================================================================
    p1X = rotPoint_X(x1_,y1_-thickness,x1_,y1_,   angle); 
    p1Y = rotPoint_Y(x1_,y1_-thickness,x1_,y1_,   angle); 
    p2X = rotPoint_X(x2_,y2_-thickness,x2_,y2_,   angle); 
    p2Y = rotPoint_Y(x2_,y2_-thickness,x2_,y2_,   angle); 
    p3X = rotPoint_X(x2_,y2_+thickness,x2_,y2_,   angle); ; 
    p3Y = rotPoint_Y(x2_,y2_+thickness,x2_,y2_,   angle);
    p4X = rotPoint_X(x1_,y1_+thickness,x1_,y1_,   angle); ; 
    p4Y = rotPoint_Y(x1_,y1_+thickness,x1_,y1_,   angle); ; 
    //================================================================
    gfx_triangle(   p1X,p1Y
                  , p2X,p2Y
                  , p3X,p3Y
                  , p4X,p4Y
                );
    //================================================================
);
//====================================================================




//====================================================================
function CIRCLE_draw(CIRCLE_ID,antialiase)local (x,y,r)
(
    x = CIRCLE_getCX(CIRCLE_ID);
    y = CIRCLE_getCY(CIRCLE_ID);
    r = CIRCLE_getRadius (CIRCLE_ID);
    //================================================================
    gfx_circle(x,y,r,false,antialiase);
);
//====================================================================
function CIRCLE_drawFill(CIRCLE_ID,antialiase)local (x,y,r)
(
    x = CIRCLE_getCX(CIRCLE_ID);
    y = CIRCLE_getCY(CIRCLE_ID);
    r = CIRCLE_getRadius (CIRCLE_ID);
    //================================================================
    gfx_circle(x,y,r,true,antialiase);
);
//====================================================================
function RECTANGLE_drawLine(RECT_ID,antialiase)local (x,y,w,h)
(
    x = RECTANGLE_getX(RECT_ID);
    y = RECTANGLE_getY(RECT_ID);
    w = RECTANGLE_getWidth(RECT_ID);
    h = RECTANGLE_getHeight(RECT_ID);
    gfx_rect(x,y,w,h,false,antialiase);
);
//====================================================================
function RECTANGLE_drawFill(RECT_ID,antialiase)local (x,y,w,h)
(
    x = RECTANGLE_getX(RECT_ID);
    y = RECTANGLE_getY(RECT_ID);
    w = RECTANGLE_getWidth(RECT_ID);
    h = RECTANGLE_getHeight(RECT_ID);
    gfx_rect(x,y,w,h,true,antialiase);
);
//====================================================================
function RECTANGLE_drawCenterLine(RECT_ID)local (x,y,x2,y2,h)
(
    x  = RECTANGLE_getX(RECT_ID);
    y  = RECTANGLE_getY(RECT_ID);
    x2 = RECTANGLE_getX2(RECT_ID);
    y2 = RECTANGLE_getY2(RECT_ID);
    h = RECTANGLE_getHeight(RECT_ID);
    gfx_line(x,y+h/2,x2-1,y+h/2,true);
);
//====================================================================


//====================================================================
function RECTANGLE_drawStrInCenter(RECT_ID,str)
    local (strW,strH,x,y,w,h,lastX,lasty)
(
    gfx_measurestr(str,strW,strH);
    lastX = gfx_x;
    lastY = gfx_y;
    //================================================================
    x = RECTANGLE_getX(RECT_ID);
    y = RECTANGLE_getY(RECT_ID);
    w = RECTANGLE_getWidth(RECT_ID);
    h = RECTANGLE_getHeight(RECT_ID);
    //================================================================
    gfx_x =  (x +w/2) - strW/2;
    gfx_y =  (y +h/2) - strH/2;
    //================================================================
    gfx_drawstr( str);
    //================================================================
    gfx_x = lastX;
    gfx_y = lastY;
);
//====================================================================

//drawString
//====================================================================
function RECTANGLE_getFittedFontSize(RECT_ID,str)local (strLen,x,y,w,h,targetFontSize)
(
    strLen =  strlen(str);
    w = RECTANGLE_getWidth(RECT_ID);
    h = RECTANGLE_getHeight(RECT_ID);
    //================================================================
    targetFontSize = w/(strLen/1.5);
    //================================================================
    targetFontSize = min(max(targetFontSize,1),h) ;
    //================================================================
    min(max(8,targetFontSize),100); // avairable size between 8 to 100;
);
//====================================================================
function RECTANGLE_drawStrInCenterFitFont(RECT_ID,str)local (strLen,x,y,w,h,lastFontIdx,temp,targetFontSize)
(
    lastFontIdx = gfx_getfont();
    //================================================================
    strLen =  strlen(str);
    w = RECTANGLE_getWidth(RECT_ID);
    h = RECTANGLE_getHeight(RECT_ID);
    //================================================================
    targetFontSize = w/(strLen/1.5);
    //================================================================
    targetFontSize = min(max(targetFontSize,1),h) ;
    targetFontSize = min(max(8,targetFontSize),256);
    gfx_setfont(1,"Courier New Bold",targetFontSize);
    //================================================================
    RECTANGLE_drawStrInCenter(RECT_ID,str);
    //================================================================
    gfx_setfont(lastFontIdx);
);
//====================================================================
function drawDecibelValue( x,y,Value,fontsize) 
    local(tempStr,lastFontIdx ,lastX,lastY)
(   
    lastFontIdx = gfx_getfont();
    //================================================================
    tempStr = #;
    sprintf ( tempStr,"%2.2fdB",valueToDecivel( value ) );
    gfx_setfont(1,"arial black",fontsize);
    //================================================================
    lastX = gfx_x;
    lastY = gfx_y;
    //================================================================
    gfx_x = x;
    gfx_y = y;
    //================================================================
    gfx_drawstr(tempStr);
    //================================================================
    gfx_x = lastX;
    gfx_y = lastY;
    //================================================================
    gfx_setfont(lastFontIdx);
);
//====================================================================
function drawStrWithBlackBackGround(x,y,str)
    local (strW,strH,lastR,lastG.lastB,lastA,lastX,lastY)
(
    gfx_measurestr(str,strW,strH);
    //================================================================
    lastR =gfx_r;lastG =gfx_g;lastB =gfx_b;lastA =gfx_a;
    lastX =gfx_x;lastY =gfx_y;
    //================================================================
    gfx_r =0;gfx_g =0;gfx_b =0;
    gfx_a =1; // !
    //================================================================
    
    gfx_rect(x-3,y-3,strW+6,strH+6,true);
    gfx_r =1;gfx_g =1;gfx_b =1;
    gfx_a =1; // !
    gfx_x = x;gfx_y=y;
    gfx_drawstr( str);
    //================================================================
    gfx_r = lastR;gfx_g = lastG;gfx_b = lastB;gfx_a = lastA;
    gfx_x = lastX;gfx_y = lastY;
    //================================================================
);
//====================================================================

//====================================================================
function drawTriangle(cx,cy,radius,rotationRad,isFill)
local (  p1x,p1y
        ,p2x,p2y
        ,p3x,p3y )
(
    p1x = rotPoint_X(cx ,cy-radius,cx,cy,rad(120*0)+rotationRad);
    p1y = rotPoint_Y(cx ,cy-radius,cx,cy,rad(120*0)+rotationRad);
    //================================================================
    p2x = rotPoint_X(cx ,cy-radius,cx,cy,rad(120*1)+rotationRad);
    p2y = rotPoint_Y(cx ,cy-radius,cx,cy,rad(120*1)+rotationRad);
    //================================================================
    p3x = rotPoint_X(cx ,cy-radius,cx,cy,rad(120*2)+rotationRad);
    p3y = rotPoint_Y(cx ,cy-radius,cx,cy,rad(120*2)+rotationRad);
    //================================================================
    (isFill ==true)?
    (
        //============================================================
        gfx_triangle( p1x,p1y,p2x,p2y 
                    , p2x,p2y,p3x,p3y 
                    , p3x,p3y,p1x,p1y );
    ):(
        //============================================================
        gfx_line(p1x,p1y,p2x,p2y );
        gfx_line(p2x,p2y,p3x,p3y );
        gfx_line(p3x,p3y,p1x,p1y );
    );
    //================================================================
);
//====================================================================
function drawRectAngle(cx,cy,radius,rotationRad,isFill)
local (  p1x,p1y
        ,p2x,p2y
        ,p3x,p3y 
        ,p4x,p4y )
(
    p1x = rotPoint_X(cx ,cy-radius,cx,cy,rad(90*0)+rotationRad);
    p1y = rotPoint_Y(cx ,cy-radius,cx,cy,rad(90*0)+rotationRad);
    //================================================================
    p2x = rotPoint_X(cx ,cy-radius,cx,cy,rad(90*1)+rotationRad);
    p2y = rotPoint_Y(cx ,cy-radius,cx,cy,rad(90*1)+rotationRad);
    //================================================================
    p3x = rotPoint_X(cx ,cy-radius,cx,cy,rad(90*2)+rotationRad);
    p3y = rotPoint_Y(cx ,cy-radius,cx,cy,rad(90*2)+rotationRad);
    //================================================================
    p4x = rotPoint_X(cx ,cy-radius,cx,cy,rad(90*3)+rotationRad);
    p4y = rotPoint_Y(cx ,cy-radius,cx,cy,rad(90*3)+rotationRad);
    //================================================================
    (isFill ==true)?
    (
        //============================================================
        gfx_triangle( p1x,p1y,p2x,p2y 
                     ,p2x,p2y,p3x,p3y 
                     ,p3x,p3y,p4x,p4y 
                     ,p4x,p4y,p1x,p1y );
    ):(
        //============================================================
        gfx_line(p1x,p1y,p2x,p2y );
        gfx_line(p2x,p2y,p3x,p3y );
        gfx_line(p3x,p3y,p4x,p4y );
        gfx_line(p4x,p4y,p1x,p1y );
    );
    //================================================================
);
//====================================================================
function drawHex(cx,cy,radius,rotationRad,isFill)
    local (  p1x,p1y
            ,p2x,p2y
            ,p3x,p3y
            ,p4x,p4y
            ,p5x,p5y 
            ,p6x,p6y )
(
    p1x = rotPoint_X(cx ,cy-radius,cx,cy,rad(60*0)+rotationRad);
    p1y = rotPoint_Y(cx ,cy-radius,cx,cy,rad(60*0)+rotationRad);
    //================================================================
    p2x = rotPoint_X(cx ,cy-radius,cx,cy,rad(60*1)+rotationRad);
    p2y = rotPoint_Y(cx ,cy-radius,cx,cy,rad(60*1)+rotationRad);
    //================================================================
    p3x = rotPoint_X(cx ,cy-radius,cx,cy,rad(60*2)+rotationRad);
    p3y = rotPoint_Y(cx ,cy-radius,cx,cy,rad(60*2)+rotationRad);
    //================================================================
    p4x = rotPoint_X(cx ,cy-radius,cx,cy,rad(60*3)+rotationRad);
    p4y = rotPoint_Y(cx ,cy-radius,cx,cy,rad(60*3)+rotationRad);
    //================================================================
    p5x = rotPoint_X(cx ,cy-radius,cx,cy,rad(60*4)+rotationRad);
    p5y = rotPoint_Y(cx ,cy-radius,cx,cy,rad(60*4)+rotationRad);
    //================================================================
    p6x = rotPoint_X(cx ,cy-radius,cx,cy,rad(60*5)+rotationRad);
    p6y = rotPoint_Y(cx ,cy-radius,cx,cy,rad(60*5)+rotationRad);
    //================================================================
    (isFill ==true)?
    (
        //============================================================
        gfx_triangle(  p1x,p1y,p2x,p2y 
                     , p2x,p2y,p3x,p3y 
                     , p3x,p3y,p4x,p4y 
                     , p4x,p4y,p5x,p5y 
                     , p5x,p5y,p6x,p6y 
                     , p6x,p6y,p1x,p1y );
    ):(
        //============================================================
        gfx_line(p1x,p1y,p2x,p2y );
        gfx_line(p2x,p2y,p3x,p3y );
        gfx_line(p3x,p3y,p4x,p4y );
        gfx_line(p4x,p4y,p5x,p5y );
        gfx_line(p5x,p5y,p6x,p6y );
        gfx_line(p6x,p6y,p1x,p1y );
    );
    //================================================================
);
//====================================================================
function drawStar(cx,cy,radius,rotationRad,isFill)
    local (  p1x,p1y
            ,p2x,p2y
            ,p3x,p3y
            ,p4x,p4y
            ,p5x,p5y 
            ,pB1x,pB1y 
            ,pB2x,pB2y 
            ,pB3x,pB3y 
            ,pB4x,pB4y 
            ,pB5x,pB5y 
        )
(
    p1x = rotPoint_X(cx ,cy-radius,cx,cy,rad(72*0)+rotationRad); // rad(360/5)*0
    p1y = rotPoint_Y(cx ,cy-radius,cx,cy,rad(72*0)+rotationRad);
    //================================================================
    p2x = rotPoint_X(cx ,cy-radius,cx,cy,rad(72*1)+rotationRad);
    p2y = rotPoint_Y(cx ,cy-radius,cx,cy,rad(72*1)+rotationRad);
    //================================================================
    p3x = rotPoint_X(cx ,cy-radius,cx,cy,rad(72*2)+rotationRad); 
    p3y = rotPoint_Y(cx ,cy-radius,cx,cy,rad(72*2)+rotationRad);
    //================================================================
    p4x = rotPoint_X(cx ,cy-radius,cx,cy,rad(72*3)+rotationRad); 
    p4y = rotPoint_Y(cx ,cy-radius,cx,cy,rad(72*3)+rotationRad);
    //================================================================
    p5x = rotPoint_X(cx ,cy-radius,cx,cy,rad(72*4)+rotationRad); 
    p5y = rotPoint_Y(cx ,cy-radius,cx,cy,rad(72*4)+rotationRad);
    //================================================================
    pB1x = rotPoint_X(cx ,cy-radius*0.5,cx,cy,rad(36*1)+rotationRad); // rad(360/5/2)*0
    pB1y = rotPoint_Y(cx ,cy-radius*0.5,cx,cy,rad(36*1)+rotationRad);
    //================================================================
    pB2x = rotPoint_X(cx ,cy-radius*0.5,cx,cy,rad(36*3)+rotationRad); // rad(360/5/2)*0
    pB2y = rotPoint_Y(cx ,cy-radius*0.5,cx,cy,rad(36*3)+rotationRad);
    //================================================================
    pB3x = rotPoint_X(cx ,cy-radius*0.5,cx,cy,rad(36*5)+rotationRad); // rad(360/5/2)*0
    pB3y = rotPoint_Y(cx ,cy-radius*0.5,cx,cy,rad(36*5)+rotationRad);
    //================================================================
    pB4x = rotPoint_X(cx ,cy-radius*0.5,cx,cy,rad(36*7)+rotationRad); // rad(360/5/2)*0
    pB4y = rotPoint_Y(cx ,cy-radius*0.5,cx,cy,rad(36*7)+rotationRad);
    //================================================================
    pB5x = rotPoint_X(cx ,cy-radius*0.5,cx,cy,rad(36*9)+rotationRad); // rad(360/5/2)*0
    pB5y = rotPoint_Y(cx ,cy-radius*0.5,cx,cy,rad(36*9)+rotationRad);
    //================================================================
    (isFill ==true)?
    (
        gfx_triangle( cx,cy, p1x,p1y,   pB1x,pB1y);
        gfx_triangle( cx,cy, pB1x,pB1y, p2x ,p2y );
        gfx_triangle( cx,cy, p2x,p2y,   pB2x,pB2y );
        gfx_triangle( cx,cy, pB2x,pB2y, p3x,p3y );
        gfx_triangle( cx,cy, p3x,p3y,   pB3x,pB3y );
        gfx_triangle( cx,cy, pB3x,pB3y, p4x,p4y );
        gfx_triangle( cx,cy, p4x,p4y,   pB4x,pB4y );
        gfx_triangle( cx,cy, pB4x,pB4y, p5x,p5y );
        gfx_triangle( cx,cy, p5x,p5y,   pB5x,pB5y );
        gfx_triangle( cx,cy, pB5x,pB5y, p1x,p1y );
    ):
    (
        gfx_line(p1x,p1y,pB1x,pB1y );gfx_line(pB1x,pB1y,p2x,p2y );
        gfx_line(p2x,p2y,pB2x,pB2y );gfx_line(pB2x,pB2y,p3x,p3y );
        gfx_line(p3x,p3y,pB3x,pB3y );gfx_line(pB3x,pB3y,p4x,p4y );
        gfx_line(p4x,p4y,pB4x,pB4y );gfx_line(pB4x,pB4y,p5x,p5y );
        gfx_line(p5x,p5y,pB5x,pB5y );gfx_line(pB5x,pB5y,p1x,p1y );
        //============================================================
    );
);
//====================================================================
function drawFillArc(_cx,_cy,_r,_sA,_eA,_div)//startAngle,endAngle
    local(divNum,oneAngleArea,polygons,count_1
         , lastPoint
         , centerPoint_X
         , centerPoint_Y
         , tempPoiont2_X
         , tempPoiont2_Y
         , lastPoint_X
         , lastPoint_Y
         )
(
    oneAngleArea = (_eA - _sA)/_div;
    //================================================================
    polygons = STATIC_TEMP_BUFFER;
    //================================================================
    lastPoint_X   = _cx;
    lastPoint_Y   = _cy;
    tempPoiont2_X = _cx;
    tempPoiont2_Y = _cy -_r;
    //================================================================
    tempPoiont2_X =rotPoint_X(_cx,_cy -_r,_cx,_cy,_sA);
    tempPoiont2_Y =rotPoint_Y(_cx,_cy -_r,_cx,_cy,_sA);
    //================================================================
    count_1 =0;
    //================================================================
    while ( count_1  <=_div)
    (
        //reset
        //============================================================
        tempPoiont2_X =rotPoint_X(_cx,_cy -_r,_cx,_cy,_sA+(oneAngleArea*count_1));
        tempPoiont2_Y =rotPoint_Y(_cx,_cy -_r,_cx,_cy,_sA+(oneAngleArea*count_1));
        //===========================================================
        gfx_triangle( _cx , _cy // _centerP
                    , lastPoint_X , lastPoint_Y    // _lastPoint
                    , tempPoiont2_X , tempPoiont2_Y    //  newPoint
                    );
        //============================================================
        lastPoint_X = tempPoiont2_X ;
        lastPoint_Y = tempPoiont2_Y ;
        //============================================================
        count_1+=1;
    );
    //================================================================
);
//====================================================================
function drawFillArc2(_cx,_cy,_r,_r2,_sA,_eA,_div)
    local( divNum,oneAngleArea,polygons,count_1,centerPoint,lastPoint
         , outerPointLast_X
         , outerPointLast_Y
         , outerPointNew_X
         , outerPointNew_Y
         , innerPointlast_X
         , innerPointlast_Y
         , innerPointNew_X
         , innerPointNew_Y
         ) 
(
    oneAngleArea = (_eA - _sA)/_div;
    //================================================================
    polygons = STATIC_TEMP_BUFFER;
    //================================================================
    _r2 = _r2 ;
    //================================================================
    outerPointLast_X =rotPoint_X(_cx,_cy -_r, _cx,_cy,_sA);
    outerPointLast_Y =rotPoint_Y(_cx,_cy -_r, _cx,_cy,_sA);
    innerPointlast_X =rotPoint_X(_cx,_cy -_r2,_cx,_cy,_sA);
    innerPointlast_Y =rotPoint_Y(_cx,_cy -_r2,_cx,_cy,_sA);
    //================================================================
    count_1 =0;
    //================================================================
    while ( count_1  <=_div)
    (
        //===========================================================
        outerPointNew_X =rotPoint_X(_cx,_cy -_r, _cx,_cy,_sA+(oneAngleArea*count_1));
        outerPointNew_Y =rotPoint_Y(_cx,_cy -_r, _cx,_cy,_sA+(oneAngleArea*count_1));
        innerPointNew_X =rotPoint_X(_cx,_cy -_r2,_cx,_cy,_sA+(oneAngleArea*count_1));
        innerPointNew_Y =rotPoint_Y(_cx,_cy -_r2,_cx,_cy,_sA+(oneAngleArea*count_1));
        //============================================================
        
        //===========================================================
        // gfx_triangle( innerPointlast_X  , innerPointlast_Y  // innerlast
        //             , outerPointLast_X  , outerPointLast_Y  // outerLast
        //             , outerPointNew_X   , outerPointNew_Y   //  outerNew
        //             );
        // //============================================================
        // gfx_triangle( innerPointNew_X  , innerPointNew_Y  // innerNew
        //             , outerPointNew_X  , outerPointNew_Y  // outerLast
        //             , innerPointlast_X , innerPointlast_Y //  outerNew
        //             );
        //============================================================
        gfx_triangle( innerPointlast_X  , innerPointlast_Y  // innerlast
                    , outerPointLast_X  , outerPointLast_Y  // outerLast
                    , outerPointNew_X   , outerPointNew_Y   //  outerNew
                    , innerPointNew_X  , innerPointNew_Y  // innerNew
                    , outerPointNew_X  , outerPointNew_Y  // outerLast
                    , innerPointlast_X , innerPointlast_Y //  outerNew
                    );
        //============================================================
        outerPointLast_X =outerPointNew_X;
        outerPointLast_Y =outerPointNew_Y;
        innerPointlast_X =innerPointNew_X;
        innerPointlast_Y =innerPointNew_Y;
        //============================================================
        count_1+=1;
    );
    //================================================================
);
//====================================================================
function RECTANGLE_drawBottomRightText( RECTANGLE_ID,str)
    local (pluginTitleStrMarginX
          ,pluginTitleStrMarginY
          ,pluginTitleStr
          ,pluginTitleStr_w
          ,pluginTitleStr_h
          )
(
    //================================================================
    // plugin Title Str
    //================================================================
    pluginTitleStrMarginX = 10;
    pluginTitleStrMarginY = 4;
    pluginTitleStr = #;
    sprintf ( pluginTitleStr,str);
    strcat (pluginTitleStr,"  : " );
    strcat (pluginTitleStr,STATICE_BUILD_DATE );
    //================================================================
    gfx_measurestr(pluginTitleStr,pluginTitleStr_w,pluginTitleStr_h);
    //================================================================
    gfx_x = RECTANGLE_getX2(RECTANGLE_ID) - pluginTitleStr_w -pluginTitleStrMarginX;
    gfx_y = RECTANGLE_getY2(RECTANGLE_ID) - pluginTitleStr_h -pluginTitleStrMarginY;
    //================================================================
    gfx_r =0;gfx_g=0;gfx_b=0;gfx_a=1;
    gfx_rect( gfx_x -pluginTitleStrMarginX
            , gfx_y -pluginTitleStrMarginY
            , pluginTitleStr_w+pluginTitleStrMarginX*2
            , pluginTitleStr_h+pluginTitleStrMarginY*2
            );
    //================================================================
    gfx_r =1;gfx_g=1;gfx_b=1;gfx_a=1;
    gfx_drawstr( pluginTitleStr);
    //================================================================
);
//====================================================================
//====================================================================
function RECTANGLE_drawBottomRightText2( RECTANGLE_ID,str)
    local (pluginTitleStrMarginX
          ,pluginTitleStrMarginY
          ,pluginTitleStr
          ,pluginTitleStr_w
          ,pluginTitleStr_h
          )
(
    //================================================================
    // plugin Title Str
    //================================================================
    pluginTitleStrMarginX = 10;
    pluginTitleStrMarginY = 4;
    pluginTitleStr = #;
    sprintf ( pluginTitleStr,str);
    //================================================================
    gfx_measurestr(pluginTitleStr,pluginTitleStr_w,pluginTitleStr_h);
    //================================================================
    gfx_x = RECTANGLE_getX2(RECTANGLE_ID) - pluginTitleStr_w -pluginTitleStrMarginX;
    gfx_y = RECTANGLE_getY2(RECTANGLE_ID) - pluginTitleStr_h -pluginTitleStrMarginY;
    //================================================================
    gfx_r =0;gfx_g=0;gfx_b=0;gfx_a=1;
    gfx_rect( gfx_x -pluginTitleStrMarginX
            , gfx_y -pluginTitleStrMarginY
            , pluginTitleStr_w+pluginTitleStrMarginX*2
            , pluginTitleStr_h+pluginTitleStrMarginY*2
            );
    //================================================================
    gfx_r =1;gfx_g=1;gfx_b=1;gfx_a=1;
    gfx_drawstr( pluginTitleStr);
    //================================================================
);
//====================================================================


