//====================================================================

//====================================================================
//funciton Llist
//====================================================================
// Inheritance List
// * Rectangle
//====================================================================
//  COMPONENT_create(name) 
//====================================================================
//      COMPONENT_getMinValue                     (COMPONENT_ID)      
//      COMPONENT_setMinValue                     (COMPONENT_ID,v)    
//      COMPONENT_getMaxValue                     (COMPONENT_ID)      
//      COMPONENT_setMaxValue                     (COMPONENT_ID,v)    
//====================================================================
//      COMPONENT_isActive                        (COMPONENT_ID)      
//      COMPONENT_getIsActive                     (COMPONENT_ID)      
//      COMPONENT_setIsActive                     (COMPONENT_ID,v)    
//====================================================================
//      COMPONENT_toggleIsActive                  (COMPONENT_ID)
//====================================================================
//      COMPONENT_getParrentLAYRE                 (COMPONENT_ID)     
//      COMPONENT_setParrentLAYRE                 (COMPONENT_ID,p)   
//      COMPONENT_isExistParrentLAYRE             (COMPONENT_ID) 
//====================================================================
//      COMPONENT_getValue                        (COMPONENT_ID)      
//      COMPONENT_setValue                        (COMPONENT_ID,value)
//====================================================================
//      COMPONENT_getValueString                  (COMPONENT_ID) 
//====================================================================
//      COMPONENT_getName                         (COMPONENT_ID)      
//      COMPONENT_setName                         (COMPONENT_ID,name) 
//      COMPONENT_isMousePressStartedInThisComp   (COMPONENT_ID)      
//      COMPONENT_setIsMousePressStartedInThisComp(COMPONENT_ID,bool) 
//====================================================================
//      COMPONENT_getComponentAlpha               (COMPONENT_ID)      
//      COMPONENT_setComponentAlpha               (COMPONENT_ID,a)    
//====================================================================
//      COMPONENT_getColorMap                     (COMPONENT_ID) 
//      COMPONENT_getColor                        (COMPONENT_ID,colorKeyName)
//      COMPONENT_setColor                        (COMPONENT_ID,colorKeyName,color_ID_)
//      COMPONENT_changeColorGfx                  (COMPONENT_ID,colorKeyName)
//====================================================================
//      COMPONENT_getDBGText                      (COMPONENT_ID,optMsG)
//====================================================================

//====================================================================
//      COMPONENT_resized                         (COMPONENT_ID,parrentLeyerRect)
//      COMPONENT_draw                            (COMPONENT_ID)
//      COMPONENT_mouseMoved                      (COMPONENT_ID,MOUSEINFO_ID)
//      COMPONENT_mouseButtonPressd               (COMPONENT_ID,MOUSEINFO_ID )
//      COMPONENT_mouseButtonReleased             (COMPONENT_ID,MOUSEINFO_ID )
//      COMPONENT_mouseWheeled                    (COMPONENT_ID,MOUSEINFO_ID )
//====================================================================


//====================================================================
import kawa_GUI_CORE_.jsfx-inc
//====================================================================
@init
//====================================================================

//====================================================================
function createDefaultColorMAP()local (out_c )
(
    out_c = MAP_create();
    //================================================================
    MAP_setValue( out_c,"bakcground",COLOR_create(1,0.4,0.4,1)); 
    MAP_setValue( out_c,"bakcground_mouseon",COLOR_create(1,1,0,1)); 
    MAP_setValue( out_c,"black"   ,COLOR_create(0,0,0,1)); 
    MAP_setValue( out_c,"white"   ,COLOR_create(1,1,1,1)); 
    MAP_setValue( out_c,"red"     ,COLOR_create(1,0,0,1)); 
    MAP_setValue( out_c,"yellow"  ,COLOR_create(1,1,0,1)); 
    MAP_setValue( out_c,"blue"    ,COLOR_create(0,0,1,1)); 
    MAP_setValue( out_c,"green"   ,COLOR_create(0,1,0,1)); 
    //================================================================
    out_c;
);
//====================================================================


//====================================================================
// Inheritance List
// * Rectangle
//====================================================================
function COMPONENT_create(name) 
    local (COMPONENT_ID,name_,color_Map_ID,componentInfoMap,baseClassElementNum)
(
    color_Map_ID =  createDefaultColorMAP();
    componentInfoMap =  MAP_create();
    //================================================================
    COMPONENT_ID = RECTANGLE_create(-1000,-1000,gfx_w,gfx_h);//element NUM 6
    //================================================================
    baseClassElementNum =_RECTANGLE_getElementNum(COMPONENT_ID);
    //================================================================
    STATIC_MASTER_BUFF[COMPONENT_ID ]     = "COMPONENT";             // classTYPE
    STATIC_MASTER_BUFF[COMPONENT_ID + 1]  = baseClassElementNum + 13;                     // elementNUM
    //================================================================
    STATIC_MASTER_BUFF[COMPONENT_ID + baseClassElementNum + 1] = 0 ;                      // not use
    STATIC_MASTER_BUFF[COMPONENT_ID + baseClassElementNum + 2] = name;                    // ComponentName
    STATIC_MASTER_BUFF[COMPONENT_ID + baseClassElementNum + 3] = false;                   // start Mousepressed in  this comp
    STATIC_MASTER_BUFF[COMPONENT_ID + baseClassElementNum + 4] = 0;                       // component value
    //================================================================
    STATIC_MASTER_BUFF[COMPONENT_ID + baseClassElementNum + 5] = 1;                       // component Alpha
    STATIC_MASTER_BUFF[COMPONENT_ID + baseClassElementNum + 6] = color_Map_ID;            // color_MAP_ID
    //================================================================
    STATIC_MASTER_BUFF[COMPONENT_ID + baseClassElementNum + 7] = -123456;                 // parrent LAYER;
    STATIC_MASTER_BUFF[COMPONENT_ID + baseClassElementNum + 8] = true;                    // is Active
    STATIC_MASTER_BUFF[COMPONENT_ID + baseClassElementNum + 9] = 0;                       // min Value
    STATIC_MASTER_BUFF[COMPONENT_ID + baseClassElementNum + 10] = 1.0;                    // max Value
    STATIC_MASTER_BUFF[COMPONENT_ID + baseClassElementNum + 11] = componentInfoMap;       // max Value
    STATIC_MASTER_BUFF[COMPONENT_ID + baseClassElementNum + 12] = 0;                      // slider Index
    STATIC_MASTER_BUFF[COMPONENT_ID + baseClassElementNum + 13] = STATIC_MASTER_BUFF[COMPONENT_ID + 1];// element Num in COMPONENT Class
    //================================================================
    STATIC_MASTER_BUFF_ID  +=STRUCT_getElementNum (COMPONENT_ID)+1; //increment next entry Point
    //================================================================
    
    //================================================================
    // init prepare.
    //================================================================
    
    //================================================================
    COMPONENT_ID; //retrun
);
//====================================================================
function _COMPONENT_getElementNum(COMPONENT_ID)            ( STATIC_MASTER_BUFF[COMPONENT_ID+_RECTANGLE_getElementNum(COMPONENT_ID)+13];);// protected
//====================================================================
function COMPONENT_getSliderindex( COMPONENT_ID)           ( STATIC_MASTER_BUFF[COMPONENT_ID+_RECTANGLE_getElementNum(COMPONENT_ID)+12];);
function COMPONENT_setSliderindex( COMPONENT_ID,idx)       ( STATIC_MASTER_BUFF[COMPONENT_ID+_RECTANGLE_getElementNum(COMPONENT_ID)+12]=idx;);
//====================================================================
function COMPONENT_getComponentInfoMap   ( COMPONENT_ID)   ( STATIC_MASTER_BUFF[COMPONENT_ID+_RECTANGLE_getElementNum(COMPONENT_ID)+11];);
//====================================================================
function COMPONENT_getComponentInfoValue( COMPONENT_ID,keyName) 
( 
    MAP_getValue   (  COMPONENT_getComponentInfoMap( COMPONENT_ID)
                    , keyName);
);
//====================================================================
function COMPONENT_setComponentInfoValue( COMPONENT_ID,keyName,value) 
( 
    MAP_setValue   (  COMPONENT_getComponentInfoMap( COMPONENT_ID)
                    , keyName
                    , value);
);
//====================================================================
function COMPONENT_isParrentLayerResized( COMPONENT_ID)
(
    COMPONENT_getComponentInfoValue( COMPONENT_ID,"parrentLayer_Resized");
);
//====================================================================

//====================================================================
function COMPONENT_getMinValue(COMPONENT_ID)           ( STATIC_MASTER_BUFF[COMPONENT_ID+_RECTANGLE_getElementNum(COMPONENT_ID)+9];);
function COMPONENT_setMinValue(COMPONENT_ID,v)         ( STATIC_MASTER_BUFF[COMPONENT_ID+_RECTANGLE_getElementNum(COMPONENT_ID)+9]=v;);
function COMPONENT_getMaxValue(COMPONENT_ID)           ( STATIC_MASTER_BUFF[COMPONENT_ID+_RECTANGLE_getElementNum(COMPONENT_ID)+10];);
function COMPONENT_setMaxValue(COMPONENT_ID,v)         ( STATIC_MASTER_BUFF[COMPONENT_ID+_RECTANGLE_getElementNum(COMPONENT_ID)+10]=v;);
//====================================================================
function COMPONENT_isActive(COMPONENT_ID)              ( STATIC_MASTER_BUFF[COMPONENT_ID+_RECTANGLE_getElementNum(COMPONENT_ID)+8];);
function COMPONENT_getIsActive(COMPONENT_ID)           ( STATIC_MASTER_BUFF[COMPONENT_ID+_RECTANGLE_getElementNum(COMPONENT_ID)+8];);
function COMPONENT_setIsActive(COMPONENT_ID,v)         ( STATIC_MASTER_BUFF[COMPONENT_ID+_RECTANGLE_getElementNum(COMPONENT_ID)+8]=v;);
//====================================================================
function COMPONENT_toggleIsActive( COMPONENT_ID)
(
    COMPONENT_setIsActive( COMPONENT_ID
                          ,(COMPONENT_getIsActive(COMPONENT_ID) == false)
                          );
);
//====================================================================
function COMPONENT_getParrentLAYRE(COMPONENT_ID)       (    STATIC_MASTER_BUFF[COMPONENT_ID +_RECTANGLE_getElementNum(COMPONENT_ID)+7];);
function COMPONENT_setParrentLAYRE(COMPONENT_ID,p)     (    STATIC_MASTER_BUFF[COMPONENT_ID +_RECTANGLE_getElementNum(COMPONENT_ID)+7]  = p;);
function COMPONENT_isExistParrentLAYRE(COMPONENT_ID)   (  ( STATIC_MASTER_BUFF[COMPONENT_ID +_RECTANGLE_getElementNum(COMPONENT_ID)+7] != -123456); ); // !!
//====================================================================
function COMPONENT_getValue(COMPONENT_ID)       
(    
    STATIC_MASTER_BUFF[COMPONENT_ID +_RECTANGLE_getElementNum(COMPONENT_ID)+4];
    //================================================================
);
//====================================================================
function COMPONENT_getParameteredValue(COMPONENT_ID) local (minV,maxV,value,out)          
(    

    minV = COMPONENT_getMinValue(COMPONENT_ID);
    maxV = COMPONENT_getMaxValue(COMPONENT_ID);
    //================================================================
    value = STATIC_MASTER_BUFF[COMPONENT_ID +_RECTANGLE_getElementNum(COMPONENT_ID)+4];
    //================================================================
    out = minV+  ( maxV-minV) * value;
    //================================================================
    out;
);
//====================================================================
function COMPONENT_setValue(COMPONENT_ID,value,isSendReaper) 
( 
    STATIC_MASTER_BUFF[  COMPONENT_ID 
                       + _RECTANGLE_getElementNum(COMPONENT_ID)
                       + 4
                       ] = min( max( value,0),1);
    //================================================================
    (isSendReaper ==true)?
    (
        slider( COMPONENT_getSliderIndex(COMPONENT_ID) ) = COMPONENT_getValue(COMPONENT_ID);;
        slider_automate(2 ^ COMPONENT_getSliderIndex(COMPONENT_ID) -1 );
        DBG("value Changed");
        DBG_float(  COMPONENT_getValue(COMPONENT_ID));
    );
    //================================================================
);
//====================================================================
function COMPONENT_getValueString( COMPONENT_ID) local ( out )
(
    out =#;
    sprintf ("%f",COMPONENT_getValue(COMPONENT_ID ) );
    out;
);
//====================================================================
function COMPONENT_getName(COMPONENT_ID)                              ( STATIC_MASTER_BUFF[COMPONENT_ID +_RECTANGLE_getElementNum(COMPONENT_ID)+ 2];);
function COMPONENT_setName(COMPONENT_ID,name)                         ( STATIC_MASTER_BUFF[COMPONENT_ID +_RECTANGLE_getElementNum(COMPONENT_ID)+ 2]=name;);
function COMPONENT_isMousePressStartedInThisComp(COMPONENT_ID)        ( STATIC_MASTER_BUFF[COMPONENT_ID +_RECTANGLE_getElementNum(COMPONENT_ID)+ 3];);
function COMPONENT_setIsMousePressStartedInThisComp(COMPONENT_ID,bool)( STATIC_MASTER_BUFF[COMPONENT_ID +_RECTANGLE_getElementNum(COMPONENT_ID)+ 3] = bool;);
//====================================================================
function COMPONENT_getComponentAlpha(COMPONENT_ID)                    ( STATIC_MASTER_BUFF[COMPONENT_ID +_RECTANGLE_getElementNum(COMPONENT_ID)+ 5];);
function COMPONENT_setComponentAlpha(COMPONENT_ID,a)                  ( STATIC_MASTER_BUFF[COMPONENT_ID +_RECTANGLE_getElementNum(COMPONENT_ID)+ 5] = a;);
//====================================================================
function COMPONENT_getColorMap(COMPONENT_ID)                          ( STATIC_MASTER_BUFF[COMPONENT_ID +_RECTANGLE_getElementNum(COMPONENT_ID)+ 6];);
//====================================================================
function COMPONENT_getColor(COMPONENT_ID,colorKeyName) local (outColor_ID)
(
    //================================================================
    outColor_ID = MAP_getValue( COMPONENT_getColorMap(COMPONENT_ID)
                              , colorKeyName);
    //================================================================
    //COLOR_setA( outColor_ID
    //          , COLOR_getA(outColor_ID) * COMPONENT_getComponentAlpha(COMPONENT_ID));
    //================================================================
    outColor_ID;
);
//====================================================================
function COMPONENT_addColor(COMPONENT_ID,colorKeyName,color_ID_)
(
    //================================================================
    MAP_setValue( COMPONENT_getColorMap(COMPONENT_ID)
                , colorKeyName
                , color_ID_ );
    //================================================================
);
//====================================================================
function COMPONENT_changeColor(COMPONENT_ID,colorKeyName,r,g,b,a)   local (colorID)
(
    colorID = MAP_getValue( COMPONENT_getColorMap(COMPONENT_ID)
                          , colorKeyName);
    //================================================================
    COLOR_setR(colorID,r) ;
    COLOR_setG(colorID,g) ;
    COLOR_setB(colorID,b) ;
    COLOR_setA(colorID,a) ;
    //================================================================
);
//====================================================================
function COMPONENT_changeColorGfx( COMPONENT_ID,colorKeyName)local (COLOR_ID_2)
(
    COLOR_ID_2 =  COMPONENT_getColor(COMPONENT_ID,colorKeyName);
    //================================================================
    gfx_r = COLOR_getR(COLOR_ID_2);
    gfx_g = COLOR_getG(COLOR_ID_2);
    gfx_b = COLOR_getB(COLOR_ID_2);
    gfx_a = COLOR_getA(COLOR_ID_2)*COMPONENT_getComponentAlpha(COMPONENT_ID);
    //================================================================
);
//====================================================================


//====================================================================
function COMPONENT_getDBGText(COMPONENT_ID,optMsG) local (out)
(
    out =#;
    out = stringCat(STRUCT_getStructType(COMPONENT_ID),COMPONENT_getName(COMPONENT_ID));
    stringCat(out,optMsG);
    out;
);
//====================================================================

//====================================================================
// meterWidth
//====================================================================

//====================================================================
function COMPONENT_resized(COMPONENT_ID,parrentLeyerRect)
(
    0;
    DBG("COMPO_Resized");
);
//====================================================================
function COMPONENT_draw(COMPONENT_ID)local (radius,lineH,x,y,w,h,circle_Area_ID)
(
    //================================================================
    x = RECTANGLE_getX(COMPONENT_ID);
    y = RECTANGLE_getY(COMPONENT_ID);
    w = RECTANGLE_getWidth(COMPONENT_ID);
    h = RECTANGLE_getHeight(COMPONENT_ID);
    //================================================================
    ( RECTANGLE_isContainMouse(COMPONENT_ID) ==true) ?
    (
        COMPONENT_changeColorGfx( COMPONENT_ID,"bakcground_mouseon");
    ):(
        COMPONENT_changeColorGfx( COMPONENT_ID,"bakcground");
    );
    //================================================================
    RECTANGLE_drawFill(COMPONENT_ID,true); //test
    //================================================================
    gfx_rect( x , y , w, h,true);
    //================================================================
);
//====================================================================
function COMPONENT_mouseMoved(COMPONENT_ID,MOUSEINFO_ID)
(
    ( RECTANGLE_isContainMouse(COMPONENT_ID) ==true) ?
    (
        DBG("COMPO_MOUSE_MOVE");
    );
    //================================================================
);
//====================================================================
function COMPONENT_mouseButtonPressd(COMPONENT_ID,MOUSEINFO_ID )local(circle_Area_ID)
(
    //================================================================
    ( RECTANGLE_isContainMouse(COMPONENT_ID) ==true) ?
    (
        DBG("COMPO_MOUSE_BUTTON_PRESS_IN");
        COMPONENT_setIsMousePressStartedInThisComp(COMPONENT_ID,true);
    ):(
        COMPONENT_setIsMousePressStartedInThisComp(COMPONENT_ID,false);
    );
    //================================================================
);
//====================================================================
function COMPONENT_mouseButtonReleased( COMPONENT_ID,MOUSEINFO_ID )
(
    //================================================================
    ( RECTANGLE_isContainMouse(COMPONENT_ID) ==true) ?
    (
        DBG("COMPO_MOUSE_BUTTON_RELEASE");
    );
    //================================================================
);
//====================================================================
function COMPONENT_mouseWheeled(COMPONENT_ID,MOUSEINFO_ID )
(
    //================================================================
    ( RECTANGLE_isContainMouse(COMPONENT_ID) ==true) ?
    (
        DBG("COMPO_MOUSE_WHEELD");
    );
    //================================================================
);
//====================================================================


