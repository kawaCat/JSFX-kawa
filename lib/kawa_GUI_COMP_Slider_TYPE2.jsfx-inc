
//====================================================================
@init
//====================================================================


//====================================================================
SLIDERTYPE2_TEXT_TYPE_RAW  = "RAW";    // raw type.     ( 0.0 ~ 1.0 or min max value )
SLIDERTYPE2_TEXT_TYPE_PER  = "PERCENT";// percent Type. ( 0.0% ~100% )
SLIDERTYPE2_TEXT_TYPE_DB   = "DB";     // db Type       ( decibel value )
SLIDERTYPE2_TEXT_TYPE_PAN  = "PAN";    // pan Type      ( 0.0 = L , 0.5 = center, 1.0 = R )
//====================================================================

//====================================================================
// Inheritance List
// * Rectangle
// * Component
//====================================================================
function SLIDERTYPE2_create(name)
    local (SLIDERTYPE2_ID,circle_Area_ID,baseClassElementNum)
(
    //================================================================
    SLIDERTYPE2_ID = COMPONENT_create(name);
    baseClassElementNum =_COMPONENT_getElementNum(SLIDERTYPE2_ID);
    //================================================================
    STATIC_MASTER_BUFF[SLIDERTYPE2_ID ]     = "SLIDERTYPE2";           // classTYPE
    STATIC_MASTER_BUFF[SLIDERTYPE2_ID + 1]  = baseClassElementNum + 5; // elementNUM
    //================================================================
    STATIC_MASTER_BUFF[SLIDERTYPE2_ID + baseClassElementNum + 1] = 0;  // non use
    STATIC_MASTER_BUFF[SLIDERTYPE2_ID + baseClassElementNum + 2] = 0;  // non use
    STATIC_MASTER_BUFF[SLIDERTYPE2_ID + baseClassElementNum + 3] = 0;  // non use
    STATIC_MASTER_BUFF[SLIDERTYPE2_ID + baseClassElementNum + 4] = STATIC_MASTER_BUFF[SLIDERTYPE2_ID + 1] ;// element Num in this class.
    STATIC_MASTER_BUFF[SLIDERTYPE2_ID + baseClassElementNum + 5] = SLIDERTYPE2_TEXT_TYPE_RAW;//text Parameter Draw Type
    //================================================================
    STATIC_MASTER_BUFF_ID += STRUCT_getElementNum (SLIDERTYPE2_ID)+1; // next entry Bufff Point
    //================================================================
    // init prepare.
    //================================================================
    MAP_setValue( COMPONENT_getColorMap(SLIDERTYPE2_ID)
                ,"bakcground_mouseon"
                , COLOR_create(0,1,1,1));
    MAP_setValue( COMPONENT_getColorMap(SLIDERTYPE2_ID)
                ,"bakcground"
                , COLOR_create(1,1,1,1));
    //================================================================
    SLIDERTYPE2_ID; //retrun
);
//====================================================================
function _SLIDERTYPE2_getElementNum(SLIDERTYPE2_ID)         ( STATIC_MASTER_BUFF[SLIDERTYPE2_ID + _COMPONENT_getElementNum(SLIDERTYPE2_ID)+ 4];); //protected
//====================================================================
function SLIDERTYPE2_getParameterDrawType(SLIDERTYPE2_ID)   ( STATIC_MASTER_BUFF[SLIDERTYPE2_ID + _COMPONENT_getElementNum(SLIDERTYPE2_ID)+ 5];);
function SLIDERTYPE2_setParameterDrawType(SLIDERTYPE2_ID,v) ( STATIC_MASTER_BUFF[SLIDERTYPE2_ID + _COMPONENT_getElementNum(SLIDERTYPE2_ID)+ 5] = v;);
//====================================================================
function SLIDERTYPE2_getValueViaParameterDrawType(SLIDERTYPE2_ID)
    local (parameterType,outText,tempvalue,tempvalue2,countB)
(
    outText = #;
    //================================================================
    parameterType = SLIDERTYPE2_getParameterDrawType(SLIDERTYPE2_ID);
    //================================================================
    (   parameterType == SLIDERTYPE2_TEXT_TYPE_RAW)?
    (
        sprintf( outText ,"%f",COMPONENT_getValue( SLIDERTYPE2_ID));
        //============================================================
    ):( parameterType == SLIDERTYPE2_TEXT_TYPE_PER)?
    (
        sprintf( outText ,"%.2f%%",COMPONENT_getValue( SLIDERTYPE2_ID)*100);
        countB = strlen (outText);
        while( countB <= 7)?
        (
            strcat (outText," ");
            //========================================================
            countB  = strlen (outText);
        );
        //============================================================
    ):( parameterType == SLIDERTYPE2_TEXT_TYPE_DB)?
    (
        sprintf( outText ,"%+.2fdB",valueToDecivel( COMPONENT_getValue( SLIDERTYPE2_ID)) );
        //============================================================
    ):( parameterType == SLIDERTYPE2_TEXT_TYPE_PAN)?
    (
        tempvalue = COMPONENT_getValue( SLIDERTYPE2_ID);
        //============================================================
        (tempvalue == 0.0)? 
        ( 
            sprintf( outText ," L 100.00%%");
            //========================================================
        ):(tempvalue == 0.5)? 
        (
            sprintf( outText ,"   Centor ");
            //========================================================
        ):(tempvalue == 1.0)? 
        (
            sprintf( outText ," R 100.00%%");
            //========================================================
        ):(tempvalue < 0.5)?
        (
            tempvalue2 = abs( (tempvalue-0.5)/0.5 );
            sprintf( outText ,"  L %2.2f%%",tempvalue2*100);
            //========================================================
        ):(tempvalue > 0.5)?
        (
            tempvalue2 = abs( (tempvalue-0.5)/0.5 );
            sprintf( outText ,"  R %2.2f%%",tempvalue2*100);
        );
        //============================================================
    );
    //================================================================
    outText;
);
//====================================================================

//====================================================================
function _SLIDERTYPE2_getInnerMargin(SLIDERTYPE2_ID) local (out)
(
    out = min ( RECTANGLE_getWidth(SLIDERTYPE2_ID),RECTANGLE_getHeight(SLIDERTYPE2_ID)) *0.1;
    //================================================================
    out =floor(  min(max(out,2),5) );
    
    ( out % 2 == 0 )? ( out +=1 ;);
    out;
);
//====================================================================
// meterWidth
//====================================================================
function _SLIDERTYPE2_getMeterWidth(SLIDERTYPE2_ID)local (out,margin)
(
    //================================================================
    margin = _SLIDERTYPE2_getInnerMargin(SLIDERTYPE2_ID);
    //================================================================
    out = RECTANGLE_getWidth(SLIDERTYPE2_ID) -margin*2;
);
//====================================================================
function _SLIDERTYPE2_positionToValue(SLIDERTYPE2_ID,x_,y_) local (out,meterWidth,x)
(
    //================================================================
    meterWidth = _SLIDER_getMeterWidth(SLIDERTYPE2_ID);
    x = RECTANGLE_getX(SLIDERTYPE2_ID);
    //================================================================
    out = max( 0,min( (x_-x)/(meterWidth) ,1));
);
//====================================================================


//====================================================================
function SLIDERTYPE2_update(SLIDERTYPE2_ID) 
(   
    // store last value
    COMPONENT_setLastValue( SLIDERTYPE2_ID
                          , COMPONENT_getValue( SLIDERTYPE2_ID));
    //================================================================
);
//====================================================================
function SLIDERTYPE2_resized(SLIDERTYPE2_ID,parrentRECT )
(
    0;
);
//====================================================================
function SLIDERTYPE2_draw(SLIDERTYPE2_ID)local (x,y,w,h,margin,tempText)
(
    margin = _SLIDERTYPE2_getInnerMargin(SLIDERTYPE2_ID);
    //================================================================
    x = RECTANGLE_getX(SLIDERTYPE2_ID);
    y = RECTANGLE_getY(SLIDERTYPE2_ID);
    w = RECTANGLE_getWidth(SLIDERTYPE2_ID);
    h = RECTANGLE_getHeight(SLIDERTYPE2_ID);
    //================================================================
    ( RECTANGLE_isContainMouse(SLIDERTYPE2_ID) ==true) ?
    (
        COMPONENT_changeColorGfx( SLIDERTYPE2_ID,"bakcground_mouseon");
    ):(
        COMPONENT_changeColorGfx( SLIDERTYPE2_ID,"bakcground");
    );
    gfx_rect( x, y, w, h,true);
    //================================================================
    COMPONENT_changeColorGfx( SLIDERTYPE2_ID,"red");
    gfx_rect( x+margin
            , y+margin
            , ( w-margin*2 ) * COMPONENT_getValue(SLIDERTYPE2_ID) 
            , h-margin*2
            , true);
    //================================================================
    tempText = SLIDERTYPE2_getValueViaParameterDrawType(SLIDERTYPE2_ID);
    //sprintf( tempText ,"%f",COMPONENT_getValue( SLIDERTYPE2_ID));
    //================================================================
    COMPONENT_changeColorGfx( SLIDERTYPE2_ID,"black");
    //================================================================
    RECTANGLE_drawStrInCenterFitFont(SLIDERTYPE2_ID,tempText);
    //================================================================
    RECTANGLE_drawBottomRightText2 (SLIDERTYPE2_ID ,COMPONENT_getName(SLIDERTYPE2_ID));
);
//====================================================================
function SLIDERTYPE2_mouseMoved(SLIDERTYPE2_ID,MOUSEINFO_ID)local(XXX)
(
    ( RECTANGLE_isContainMouse(SLIDERTYPE2_ID) ==true) ?
    (
        DBG(" SLIDER  Mouse Moved");
    );
    //================================================================
    (   COMPONENT_isMousePressStartedInThisComp(SLIDERTYPE2_ID) ==true )?
    (
        XXX = _SLIDERTYPE2_positionToValue( SLIDERTYPE2_ID
                                     , MOUSEINFO_getMouseX(MOUSEINFO_ID)
                                     , MOUSEINFO_getMouseY(MOUSEINFO_ID));
        //============================================================
        COMPONENT_setValue(SLIDERTYPE2_ID, XXX,true);
        //============================================================
    );
    //================================================================
);
//====================================================================
function SLIDERTYPE2_mouseButtonPressd(SLIDERTYPE2_ID,MOUSEINFO_ID )local(circle_Area_ID)
(
    //================================================================
    ( RECTANGLE_isContainMouse(SLIDERTYPE2_ID) ==true) ?
    (
        DBG(" SLIDER Mouse Button Press IN");
        SetLastMousePressdComponent(SLIDERTYPE2_ID);
        COMPONENT_setIsMousePressStartedInThisComp(SLIDERTYPE2_ID,true);
    ):(
        COMPONENT_setIsMousePressStartedInThisComp(SLIDERTYPE2_ID,false);
    );
    //================================================================
);
//====================================================================
function SLIDERTYPE2_mouseButtonReleased( SLIDERTYPE2_ID,MOUSEINFO_ID )local (tempstr)
(
    //================================================================
    ( RECTANGLE_isContainMouse(SLIDERTYPE2_ID) ==true) ?
    (
        DBG(" SLIDER Mouse Button Released");
        SetLastMouseReleasedComponent(SLIDERTYPE2_ID);
    );
    //================================================================
);
//====================================================================
function SLIDERTYPE2_mouseWheeled(SLIDERTYPE2_ID,MOUSEINFO_ID )
(
    //================================================================
    ( RECTANGLE_isContainMouse(SLIDERTYPE2_ID) ==true) ?
    (
        DBG(" SLIDER Mouse Wheeld");
        //============================================================
        COMPONENT_setValue( SLIDERTYPE2_ID
                          ,   COMPONENT_getValue(SLIDERTYPE2_ID) 
                            + MOUSEINFO_getMouseWheelDiffV_ABS(MOUSEINFO_ID)/30
                          ,true
                          );
        //============================================================
        SetLastMouseWheeledComponent(SLIDERTYPE2_ID);
    );
    //================================================================
);
//====================================================================


