
//====================================================================
@init
//====================================================================

//====================================================================
DEFINE_XYSLIDER_DISTANCE_DRAWMODE_NONE         = 0;
DEFINE_XYSLIDER_DISTANCE_DRAWMODE_CENTER       = 1;
DEFINE_XYSLIDER_DISTANCE_DRAWMODE_CENTER_ANGLE = 2;
//====================================================================
// Inheritance List
// * Rectangle
// * Component
//====================================================================
function XYSLIDER_create(name)
    local (XYSLIDER_ID,circle_Area_ID,baseClassElementNum)
(
    circle_Area_ID = CIRCLE_create(0,0,10);
    //================================================================
    XYSLIDER_ID = COMPONENT_create(name);
    baseClassElementNum =_COMPONENT_getElementNum(XYSLIDER_ID);
    //================================================================
    
    //================================================================
    STATIC_MASTER_BUFF[XYSLIDER_ID ]     = "XYSLIDER";                    // classTYPE
    STATIC_MASTER_BUFF[XYSLIDER_ID + 1]  = baseClassElementNum + 20;      // total elementNUM
    //================================================================
    STATIC_MASTER_BUFF[XYSLIDER_ID + baseClassElementNum + 1]  = circle_Area_ID;
    STATIC_MASTER_BUFF[XYSLIDER_ID + baseClassElementNum + 2]  = false;   // is Pressd incircleArea
    STATIC_MASTER_BUFF[XYSLIDER_ID + baseClassElementNum + 3]  = -1;      // sliderXIndex
    STATIC_MASTER_BUFF[XYSLIDER_ID + baseClassElementNum + 4]  = -1;      // sliderYIndex
    STATIC_MASTER_BUFF[XYSLIDER_ID + baseClassElementNum + 5]  = 0.5;     // X value
    STATIC_MASTER_BUFF[XYSLIDER_ID + baseClassElementNum + 6]  = 0.5;     // Y value
    STATIC_MASTER_BUFF[XYSLIDER_ID + baseClassElementNum + 7]  = STATIC_MASTER_BUFF[XYSLIDER_ID + 1] ;// element Num in this class.
    STATIC_MASTER_BUFF[XYSLIDER_ID + baseClassElementNum + 8]  = 0 ;      // last X value
    STATIC_MASTER_BUFF[XYSLIDER_ID + baseClassElementNum + 9]  = 0 ;      // last Y value.
    STATIC_MASTER_BUFF[XYSLIDER_ID + baseClassElementNum + 10] = 0 ;      // xyDistance from center;
    STATIC_MASTER_BUFF[XYSLIDER_ID + baseClassElementNum + 11] = DEFINE_XYSLIDER_DISTANCE_DRAWMODE_NONE ;// isDistanceDrawMode
    STATIC_MASTER_BUFF[XYSLIDER_ID + baseClassElementNum + 12] = 0 ;      // xyValue angle from center;
    STATIC_MASTER_BUFF[XYSLIDER_ID + baseClassElementNum + 13] = false ;  // is draw Cross Line.
    STATIC_MASTER_BUFF[XYSLIDER_ID + baseClassElementNum + 14] = false ;  // is drawGrid.
    STATIC_MASTER_BUFF[XYSLIDER_ID + baseClassElementNum + 15] = 0.1 ;    // is X Grid param
    STATIC_MASTER_BUFF[XYSLIDER_ID + baseClassElementNum + 16] = 0.1 ;    // is y Grid param.
    STATIC_MASTER_BUFF[XYSLIDER_ID + baseClassElementNum + 17] = "x:" ;   // x Grid paramer Name
    STATIC_MASTER_BUFF[XYSLIDER_ID + baseClassElementNum + 18] = "y:" ;   // y Grid paramer Name
    STATIC_MASTER_BUFF[XYSLIDER_ID + baseClassElementNum + 19] = false ;  // is Use Grid parameter when On Mouse point.
    //================================================================
    STATIC_MASTER_BUFF_ID += STRUCT_getElementNum (XYSLIDER_ID)+1;        // next entry Bufff Point (increment)
    //================================================================
    // init prepare.
    //================================================================
    MAP_setValue( COMPONENT_getColorMap(XYSLIDER_ID)
                ,"background_mouseon"
                , COLOR_create(0,1,1,1));
    //================================================================
    XYSLIDER_ID; //retrun
);
//====================================================================
function _XYSLIDER_getElementNum(XYSLIDER_ID)     ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 7];); //protected
//====================================================================
function XYSLIDER_getXValue(XYSLIDER_ID)          ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 5];);
function XYSLIDER_getYValue(XYSLIDER_ID)          ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 6];);
function _XYSLIDER_setXValue(XYSLIDER_ID,v)       ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 5]=v;);
function _XYSLIDER_setYValue(XYSLIDER_ID,v)       ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 6]=v;);
//====================================================================
function XYSLIDER_getSliderIndexX(XYSLIDER_ID)    ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 3];);
function XYSLIDER_getSliderIndexY(XYSLIDER_ID)    ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 4];);
function XYSLIDER_setSliderIndexX(XYSLIDER_ID,idx)( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 3]=idx;);
function XYSLIDER_setSliderIndexY(XYSLIDER_ID,idx)( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 4]=idx;);
//====================================================================
function XYSLIDER_getLastValueX(XYSLIDER_ID)      ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 8];);
function XYSLIDER_getLastValueY(XYSLIDER_ID)      ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 9];);
function XYSLIDER_setLastValueX(XYSLIDER_ID,v)    ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 8]=v;);
function XYSLIDER_setLastValueY(XYSLIDER_ID,v)    ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 9]=v;);
//====================================================================
function XYSLIDER_getXYDistanceFromCenter         ( XYSLIDER_ID)      ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 10];);
function XYSLIDER_setXYDistanceFromCenter         ( XYSLIDER_ID,v)    ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 10]=v;);
function XYSLIDER_getXYDistanceDrawMode           ( XYSLIDER_ID)      ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 11];);
function XYSLIDER_setXYDistanceDrawMode           ( XYSLIDER_ID,v)    ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 11]=v;);
function XYSLIDER_getXYAngleFromCenter            ( XYSLIDER_ID)      ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 12];);
function XYSLIDER_setXYAngleFromCenter            ( XYSLIDER_ID,v)    ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 12]=v;);
//====================================================================
function XYSLIDER_getIsNeedCrossCursolLine        ( XYSLIDER_ID)      ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 13];);
function XYSLIDER_setIsNeedCrossCursolLine        ( XYSLIDER_ID,v)    ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 13]=v;);
//====================================================================

//====================================================================
function XYSLIDER_getIsDrawGrid                   ( XYSLIDER_ID)      ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 14];);
function XYSLIDER_setIsDrawGrid                   ( XYSLIDER_ID,v)    ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 14]=v;);
function XYSLIDER_getXGridParam                   ( XYSLIDER_ID)      ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 15];);
function XYSLIDER_setXGridParam                   ( XYSLIDER_ID,v)    ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 15]=v;);
function XYSLIDER_getYGridParam                   ( XYSLIDER_ID)      ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 16];);
function XYSLIDER_setYGridParam                   ( XYSLIDER_ID,v)    ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 16]=v;);
//====================================================================
function XYSLIDER_getXGridParamName               ( XYSLIDER_ID)      ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 17];);
function XYSLIDER_setXGridParamName               ( XYSLIDER_ID,v)    ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 17]=v;);
function XYSLIDER_getYGridParamName               ( XYSLIDER_ID)      ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 18];);
function XYSLIDER_setYGridParamName               ( XYSLIDER_ID,v)    ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 18]=v;);
//====================================================================
function XYSLIDER_getIsUseGridParamerOnMousePt    ( XYSLIDER_ID)      ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 19];);
function XYSLIDER_setIsUseGridParamerOnMousePt    ( XYSLIDER_ID,v)    ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 19] = v;);
//====================================================================

//====================================================================
function _XYSLIDER_updateXyValueAngleFromCentero(XYSLIDER_ID)
    local (xx_,yy_ ,angle)
(
    //================================================================
    xx_ = XYSLIDER_getXValue(XYSLIDER_ID) ;
    yy_ = XYSLIDER_getYValue(XYSLIDER_ID) ;
    //================================================================
    angle = atan2(  0.5 -yy_
                  , 0.5 -xx_ );
    //================================================================
    XYSLIDER_setXYAngleFromCenter ( XYSLIDER_ID,angle);
    //================================================================
);
//====================================================================

//====================================================================
function _XYSLIDER_updateXyValueDistanceFromCentero(XYSLIDER_ID)
    local ( distanceFromCenter,distanceTarget)
(
    //================================================================
    distanceFromCenter = getManhattanDist(  0.5
                                          , 0.5
                                          , XYSLIDER_getXValue  (XYSLIDER_ID) 
                                          , XYSLIDER_getYValue  (XYSLIDER_ID) 
                                         );
    //================================================================
    distanceTarget = getManhattanDist( 0.5,0.5,0.0,0.0);
    //================================================================
    XYSLIDER_setXYDistanceFromCenter(XYSLIDER_ID,distanceFromCenter);
    //================================================================
);
//====================================================================
function XYSLIDER_setXValue(XYSLIDER_ID,v,isSendReaper)  
( 
    _XYSLIDER_setXValue(XYSLIDER_ID,v);
    //================================================================
    (isSendReaper == true)?
    (
        slider( XYSLIDER_getSliderIndexX(XYSLIDER_ID) ) = v;
        slider_automate(2 ^ XYSLIDER_getSliderIndexX(XYSLIDER_ID)-1);
    );
    //================================================================
    _XYSLIDER_updateXyValueDistanceFromCentero(XYSLIDER_ID);
    _XYSLIDER_updateXyValueAngleFromCentero(XYSLIDER_ID);
    //================================================================
);
//====================================================================
function XYSLIDER_setYValue(XYSLIDER_ID,v,isSendReaper)
( 
    //================================================================
    _XYSLIDER_setYValue(XYSLIDER_ID,v);
    //================================================================
    (isSendReaper == true)?
    (
        slider( XYSLIDER_getSliderIndexY(XYSLIDER_ID) ) = v;
        slider_automate(2 ^ XYSLIDER_getSliderIndexY(XYSLIDER_ID)-1);
    );
    //================================================================
    _XYSLIDER_updateXyValueDistanceFromCentero(XYSLIDER_ID);
    _XYSLIDER_updateXyValueAngleFromCentero(XYSLIDER_ID);
    //================================================================
);
//====================================================================

//====================================================================
function XYSLIDER_getCircleArea(XYSLIDER_ID)            ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+1];);
function XYSLIDER_isCircleAreaPressed(XYSLIDER_ID)      ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+2];);
function _XYSLIDER_setIsCircleAreaPressed(XYSLIDER_ID,v)( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+2]=v;);
//====================================================================
function XYSLIDER_getCircleAreaCX(XYSLIDER_ID)
(
    CIRCLE_getCX ( XYSLIDER_getCircleArea(XYSLIDER_ID));
);
//====================================================================
function XYSLIDER_getCircleAreaCY(XYSLIDER_ID)
(
    CIRCLE_getCY ( XYSLIDER_getCircleArea(XYSLIDER_ID));
);
//====================================================================


//====================================================================
// meterWidth
//====================================================================
function _XYSLIDER_getMeterWidth(XYSLIDER_ID)
    local (circle_Pointer_ID,x,w,radius,out)
(
    //================================================================
    x = RECTANGLE_getX(XYSLIDER_ID);
    w = RECTANGLE_getWidth(XYSLIDER_ID);
    //================================================================
    circle_Pointer_ID = XYSLIDER_getCircleArea(XYSLIDER_ID);
    //================================================================
    radius = CIRCLE_getRadius(circle_Pointer_ID);
    //================================================================
    out = w -radius*2;
);
//====================================================================
function _XYSLIDER_getMeterHeight(XYSLIDER_ID)
    local (circle_Pointer_ID,y,h,radius,out)
(
    //================================================================
    y = RECTANGLE_getY(XYSLIDER_ID);
    h = RECTANGLE_getHeight(XYSLIDER_ID);
    //================================================================
    circle_Pointer_ID = XYSLIDER_getCircleArea(XYSLIDER_ID);
    radius = CIRCLE_getRadius(circle_Pointer_ID);
    //================================================================
    out = h -radius*2;
);
//====================================================================
function _XYSLIDER_positionToXValue(XYSLIDER_ID,x_) 
local (out,meterWidth,tempX,radius)
(
    //================================================================
    meterWidth = _XYSLIDER_getMeterWidth(XYSLIDER_ID);
    tempX = RECTANGLE_getX(XYSLIDER_ID);
    radius = CIRCLE_getRadius(XYSLIDER_getCircleArea(XYSLIDER_ID));
    //================================================================
    out = max( 0,min( (x_- tempX -radius)/(meterWidth) ,1));
);
//====================================================================
function _XYSLIDER_positionToYValue(XYSLIDER_ID,y_) local (out,meterHeight,tempY,radius)
(
    //================================================================
    meterHeight = _XYSLIDER_getMeterHeight(XYSLIDER_ID);
    tempY = RECTANGLE_getY(XYSLIDER_ID);
    radius = CIRCLE_getRadius(XYSLIDER_getCircleArea(XYSLIDER_ID));
    //================================================================
    out = max( 0,min( (y_- tempY-radius )/(meterHeight) ,1));
);
//====================================================================

//====================================================================
function XYSLIDER_isXValueChanged( XYSLIDER_ID)local  ( out )
(
    out = false;
    //================================================================
    ( XYSLIDER_getLastValueX( XYSLIDER_ID) !=  XYSLIDER_getXValue(XYSLIDER_ID) )?
    (
        out =true;
    );
    //================================================================
    out;
);
//====================================================================
function XYSLIDER_isYValueChanged( XYSLIDER_ID)local  ( out )
(
    out = false;
    //================================================================
    (  XYSLIDER_getLastValueY( XYSLIDER_ID) !=  XYSLIDER_getYValue(XYSLIDER_ID))?
    (
        out =true;
    );
    //================================================================
    out;
);
//====================================================================
function XYSLIDER_getGridValueParameter_X(XYSLIDER_ID)
    local (x_GridDelta,xValue,out)
(
    //================================================================
    x_GridDelta  =XYSLIDER_getXGridParam(XYSLIDER_ID);
    xValue =  XYSLIDER_getXValue(XYSLIDER_ID);
    //================================================================
    out = xValue / x_GridDelta;
    //================================================================
    out;
    //================================================================
);
//====================================================================
function XYSLIDER_getGridValueParameter_Y(XYSLIDER_ID)
    local (y_GridDelta,yValue,out)
(
    //================================================================
    y_GridDelta  =XYSLIDER_getYGridParam(XYSLIDER_ID);
    yValue =  XYSLIDER_getYValue(XYSLIDER_ID);
    //================================================================
    out = yValue / y_GridDelta;
    //================================================================
    out;
);
//====================================================================


//====================================================================
function XYSLIDER_update(XYSLIDER_ID) 
(   
    COMPONENT_update( XYSLIDER_ID);// store last value
    //================================================================
    XYSLIDER_setLastValueX( XYSLIDER_ID
                          , XYSLIDER_getXValue( XYSLIDER_ID));
    //================================================================
    XYSLIDER_setLastValueY( XYSLIDER_ID
                          , XYSLIDER_getYValue( XYSLIDER_ID));
    //================================================================
);
//====================================================================
function XYSLIDER_resized(XYSLIDER_ID,parrentRECT )
(
    0;
);
//====================================================================
function _XYSLIDER_drawXYDistance(XYSLIDER_ID,XXXX,YYYY)
    local (  radius
           , lineH
           , cx
           , cy
           , x,y,w,h,xx_,yy_ 
           , angle
           , thicknes
           , drawStr_dist
           , str_W
           , str_H
           , marginX
           , marginY
           )
(
    cx = RECTANGLE_getCenterX(XYSLIDER_ID);
    cy = RECTANGLE_getCenterY(XYSLIDER_ID);
    x = RECTANGLE_getX(XYSLIDER_ID);
    y = RECTANGLE_getY(XYSLIDER_ID);
    w = RECTANGLE_getWidth(XYSLIDER_ID);
    h = RECTANGLE_getHeight(XYSLIDER_ID);
    //================================================================
    xx_ = XYSLIDER_getXValue(XYSLIDER_ID) ;
    yy_ = XYSLIDER_getYValue(XYSLIDER_ID) ;
    //================================================================
    COMPONENT_changeColorGfx( XYSLIDER_ID,"blue");
    //================================================================
    angle = atan2(  cy -YYYY
                  , cx -XXXX );
    //================================================================
    radius = (min(w,h)-15)/2 * XYSLIDER_getXYDistanceFromCenter(XYSLIDER_ID);
    gfx_circle( cx,cy,radius,true);
    //================================================================
    thicknes = 2;
    //================================================================
    DrawLine_WithThickNess(cx,cy,XXXX,YYYY,thicknes);
    //================================================================
    
    //================================================================
    gfx_a = 1.0;
    //================================================================
    drawStr_dist = #;
    sprintf ( drawStr_dist,"Distance: %.2f %% " ,XYSLIDER_getXYDistanceFromCenter(XYSLIDER_ID) *100);
    //================================================================
    gfx_measurestr(drawStr_dist,str_W,str_H);
    //================================================================
    marginX =5;
    marginY =5;
    COMPONENT_changeColorGfx( XYSLIDER_ID,"black");
    //================================================================
    gfx_rect(  cx - str_W/2 - marginX
              ,cy - str_H/2 - marginY
              ,str_W + marginX*2
              ,str_H + marginY*2
            );
    //================================================================
    gfx_x = cx - str_W/2;
    gfx_y = cy - str_H/2;
    //================================================================
    COMPONENT_changeColorGfx( XYSLIDER_ID,"white");
    gfx_drawstr(drawStr_dist);
    //================================================================
);
//====================================================================
function _XYSLIDER_drawXYAngleFromCenter(XYSLIDER_ID,XXXX,YYYY)
    local (  radius
           , lineH
           , cx
           , cy
           , x,y,w,h,xx_,yy_ 
           , angle
           , thicknes
           , drawStr_dist
           , str_W
           , str_H
           , marginX
           , marginY
           )
(
    cx = RECTANGLE_getCenterX(XYSLIDER_ID);
    cy = RECTANGLE_getCenterY(XYSLIDER_ID);
    x = RECTANGLE_getX(XYSLIDER_ID);
    y = RECTANGLE_getY(XYSLIDER_ID);
    w = RECTANGLE_getWidth(XYSLIDER_ID);
    h = RECTANGLE_getHeight(XYSLIDER_ID);
    //================================================================
    xx_ = XYSLIDER_getXValue(XYSLIDER_ID) ;
    yy_ = XYSLIDER_getYValue(XYSLIDER_ID) ;
    //================================================================
    COMPONENT_changeColorGfx( XYSLIDER_ID,"blue");
    //================================================================
    angle = atan2(  cy -YYYY
                  , cx -XXXX );
    //================================================================
    radius = (min(w,h))/4 ;
    //================================================================
    COMPONENT_changeColorGfx( XYSLIDER_ID,"green");
    //drawFillArc(cx,cy,radius/2,angle-$pi/2,-$pi -$pi/2,64);
    gfx_circle ( cx,cy,radius/2,true);
    //================================================================
    COMPONENT_changeColorGfx( XYSLIDER_ID,"blue");
    drawFillArc(cx,cy,radius,$pi/2,angle-$pi/2,32);
    //================================================================
    thicknes = 2;
    //================================================================
    DrawLine_WithThickNess(cx,cy,XXXX,YYYY,thicknes);
    //================================================================
    
    //================================================================
    drawStr_dist = #;
    sprintf ( drawStr_dist,"Angle: %.2f Deg " ,360 -deg(angle+$pi ));
    //================================================================
    gfx_measurestr(drawStr_dist,str_W,str_H);
    //================================================================
    marginX =5;
    marginY =5;
    COMPONENT_changeColorGfx( XYSLIDER_ID,"black");
    //================================================================
    gfx_rect(  cx - str_W/2 - marginX
              ,cy - str_H/2 - marginY
              ,str_W + marginX*2
              ,str_H + marginY*2
            );
    //================================================================
    gfx_x = cx - str_W/2;
    gfx_y = cy - str_H/2;
    //================================================================
    COMPONENT_changeColorGfx( XYSLIDER_ID,"white");
    gfx_drawstr(drawStr_dist);
    //================================================================
);
//====================================================================

//====================================================================
function _XYSLIDER_drawGrid(XYSLIDER_ID,pointerRadius)
    local( , x,y,w,h,xx_,yy_ 
           , x_GridDelta
           , y_GridDelta
           , _cc_X_fPos
           , _cc_Y_fPos
           , _Y_drawX1,_Y_drawY1, _Y_drawX2,_Y_drawY2
           , _X_drawX1,_X_drawY1, _X_drawX2,_X_drawY2
           , _saftyCountX
           , _saftyCountY
           , _saftyCount_Check
           , _cc_X_count
           , _cc_Y_count
           , _cc_X_Norm
           , _cc_Y_Norm
           , _radius
           , _X_TotalGrid_Num
           , _Y_TotalGrid_Num
           , _temp_Alpha
           , _targetAlpha
           , _radiusPoint
         )
(
    _radiusPoint = pointerRadius;
    //================================================================
    x = RECTANGLE_getX(XYSLIDER_ID)     + _radiusPoint;
    y = RECTANGLE_getY(XYSLIDER_ID)     + _radiusPoint;
    w = RECTANGLE_getWidth(XYSLIDER_ID) - _radiusPoint*2;
    h = RECTANGLE_getHeight(XYSLIDER_ID)- _radiusPoint*2;
    //================================================================
    x_GridDelta =XYSLIDER_getXGridParam(XYSLIDER_ID);
    y_GridDelta =XYSLIDER_getYGridParam(XYSLIDER_ID);
    //================================================================
    _saftyCountX = 0;
    _saftyCountY = 0;
    _saftyCount_Check = 30;
    //================================================================
    _cc_X_count  = 0;
    _cc_Y_count  = 0;
    _cc_X_Norm = 0;
    _cc_Y_Norm = 0;
    //================================================================
    _radius = 2.5;
    _X_TotalGrid_Num = 1.0 /x_GridDelta ;
    _Y_TotalGrid_Num = 1.0 /y_GridDelta ;
    //================================================================
    
    _temp_Alpha =COMPONENT_getComponentAlpha (XYSLIDER_ID);
    _targetAlpha = _temp_Alpha *0.7;//???
    //================================================================

    //================================================================
    // XX 
    //================================================================
    _cc_X_count  = 0;
    _saftyCountX = 0;
    //================================================================
    while ( _cc_X_count < _X_TotalGrid_Num +1)
    (
        //============================================================
        ( _saftyCountX > _saftyCount_Check)?(_cc_X_count = 100; ); //safty break;
        //============================================================
        _cc_X_Norm =  x_GridDelta* _cc_X_count;
        //============================================================
        _X_drawX1 = floor( x + w *_cc_X_Norm);
        _X_drawY1 = floor( y )    - _radiusPoint;;
        _X_drawX2 = _X_drawX1;
        _X_drawY2 = floor( y + h )+ _radiusPoint;;
        //============================================================
        (_X_drawX1 <=x+ w )?
        (
            (    _cc_X_count % 2 == 1 
              && _X_TotalGrid_Num > 2 ) ? 
            ( 
                gfx_a = _targetAlpha*0.6; ;
            ):(
                gfx_a = _targetAlpha;
            );
            //========================================================
            ( _cc_X_Norm != 0.5) ?
                gfx_line (_X_drawX1,_X_drawY1, _X_drawX2,_X_drawY2,true);
            //========================================================
        ):(
            _cc_X_count = 100;//break;
        );
        //============================================================
        _cc_X_count +=1;
        _saftyCountX +=1;
        //============================================================
    );
    //================================================================
    
    //================================================================
    // YY
    //================================================================
    _cc_Y_count  = 0;
    _saftyCountY = 0;
    //================================================================
    while ( _cc_Y_count < _Y_TotalGrid_Num +1)
    (
        ( _saftyCountY > _saftyCount_Check)?(_cc_Y_count = 100; ); //safty,break;
        //============================================================
        _cc_Y_Norm =  y_GridDelta* _cc_Y_count;
        _cc_Y_Norm =  y_GridDelta* _cc_Y_count;
        //============================================================
        _Y_drawX1 = floor( x  )              - _radiusPoint;
        _Y_drawY1 = floor( y + h *_cc_Y_Norm);
        _Y_drawX2 = floor( x + w )           + _radiusPoint;
        _Y_drawY2 = _Y_drawY1                ;
        //============================================================
        
        //============================================================
        (    _Y_drawY1 <= y +h 
          ) ? //centor line check
        (
            (    _cc_Y_count % 2 == 1 
              && _Y_TotalGrid_Num > 2 )?
            ( 
                gfx_a =_targetAlpha*0.6; 
            ):(
                gfx_a = _targetAlpha;
            );
            //========================================================
            (_cc_Y_Norm != 0.5) ?
                gfx_line (_Y_drawX1,_Y_drawY1, _Y_drawX2,_Y_drawY2);
            //========================================================
        ):(
            _cc_Y_count = 100;//break;
        );
        //============================================================
        
        //============================================================
        gfx_a =_targetAlpha; 
        //============================================================
        
        //============================================================
        // cross 
        //============================================================
        _cc_X_count  = 0;
        _saftyCountX = 0;
        //============================================================
        while ( _cc_X_count < _X_TotalGrid_Num +1)
        (
            //========================================================
            ( _saftyCountX > _saftyCount_Check)?(_cc_X_count = 100; ); //safty break;
            //========================================================
            _cc_X_Norm =  x_GridDelta* _cc_X_count;
            //========================================================
            _X_drawX1 = floor( x + w *_cc_X_Norm);
            _X_drawY1 = floor( y )    - _radiusPoint;;
            _X_drawX2 = _X_drawX1;
            _X_drawY2 = floor( y + h )+ _radiusPoint;;
            //========================================================
            (_X_drawX1 <=x+ w )?
            (
                (     _cc_X_count % 2 == 0 
                  &&  _cc_Y_count % 2 == 0
                 )?
                (
                    gfx_a = _targetAlpha;
                    //====================================================
                    gfx_circle ( floor( x + w *x_GridDelta* ( _cc_X_count) )
                               , floor( y + h *y_GridDelta* ( _cc_Y_count) )
                               , _radius,true );
                );
            ):(
                _cc_X_count = 100;//break;
            );
            //========================================================
            
            //========================================================
            _cc_X_count +=1;
            _saftyCountX +=1;
            //========================================================
        );
        //============================================================
        _saftyCountY += 1;
        _cc_Y_count+=1;
    );
    //================================================================
    gfx_a = _temp_Alpha;
    //================================================================
);
//====================================================================
// testing
//====================================================================
function _XYSLIDER_draw_GridValue ( XYSLIDER_ID,xx_,yy_)
    local (x ,y,w ,h
          ,cx ,cy
          ,_x_tl
          ,_y_tl
          ,_marginX
          ,_marginY
          ,drawStr_dist
          ,str_W
          ,str_H
          ,str_H
          )
(
    x = RECTANGLE_getX(XYSLIDER_ID);
    y = RECTANGLE_getY(XYSLIDER_ID);
    w = RECTANGLE_getWidth(XYSLIDER_ID);
    h = RECTANGLE_getHeight(XYSLIDER_ID);
    cx = RECTANGLE_getCenterX(XYSLIDER_ID);
    cy = RECTANGLE_getCenterY(XYSLIDER_ID);
    //================================================================
    _gridXValue = XYSLIDER_getGridValueParameter_X (XYSLIDER_ID);
    _gridYValue = XYSLIDER_getGridValueParameter_Y (XYSLIDER_ID);
    //================================================================
    _x_tl =  xx_; 
    _y_tl =  cy-gfx_texth*2;
    _marginX =5;
    _marginY =5;
    //================================================================
    drawStr_dist = #;
    sprintf ( drawStr_dist,"32th x %.2f" ,_gridXValue);
    //================================================================
    gfx_measurestr(drawStr_dist,str_W,str_H);
    //================================================================
    COMPONENT_changeColorGfx( XYSLIDER_ID,"black");
    gfx_rect(   _x_tl
              , _y_tl
              ,str_W + _marginX*2
              ,str_H + _marginY*2
            );
    //================================================================
    gfx_x = _x_tl + _marginX;
    gfx_y = _y_tl + _marginY;
    //================================================================
    COMPONENT_changeColorGfx( XYSLIDER_ID,"white");
    gfx_drawstr(drawStr_dist);
    //================================================================
);
//====================================================================
function _XYSLIDER_drawCrossCursol(XYSLIDER_ID,XXXX,YYYY)
    local (x,y,w,h
          , cx,cy
          ,_triangle_WidthV
          ,_triangle_WidthT
          ,tempStr
          ,tempStrW
          ,tempStrH)
(
    //================================================================
    x = RECTANGLE_getX(XYSLIDER_ID);
    y = RECTANGLE_getY(XYSLIDER_ID);
    w = RECTANGLE_getWidth(XYSLIDER_ID);
    h = RECTANGLE_getHeight(XYSLIDER_ID);
    cx =RECTANGLE_getCenterX(XYSLIDER_ID);
    cy =RECTANGLE_getCenterY(XYSLIDER_ID);
    //================================================================
    // horizontal
    gfx_line ( x , YYYY,x+w,YYYY);
    // vertical
    gfx_line ( XXXX , y,XXXX,y+h);
    //================================================================
    _triangle_WidthV  = 5;
    _triangle_WidthT  = 5;
    //================================================================
    gfx_triangle( x,YYYY-_triangle_WidthV
                , x,YYYY+_triangle_WidthV
                , x+_triangle_WidthT,YYYY
                );
    //================================================================
    gfx_triangle( x+w,YYYY-_triangle_WidthV
                , x+w,YYYY+_triangle_WidthV
                , x+w-_triangle_WidthT,YYYY
                );
    //================================================================
    gfx_triangle( XXXX-_triangle_WidthV,y
                , XXXX+_triangle_WidthV,y
                , XXXX,y+_triangle_WidthT
                );
    //================================================================
    gfx_triangle( XXXX-_triangle_WidthV,y+h
                , XXXX+_triangle_WidthV,y+h
                , XXXX,y+h-_triangle_WidthT
                );
    //================================================================
    _triangle_WidthV  = 3;
    _triangle_WidthT  = 3;
    //================================================================
    gfx_triangle( XXXX-_triangle_WidthV,cy
                , XXXX,cy-_triangle_WidthT
                , XXXX+_triangle_WidthV,cy
                , XXXX,cy+_triangle_WidthT
                );
    //================================================================
    gfx_triangle( cx,YYYY-_triangle_WidthV
                , cx-_triangle_WidthT,YYYY
                , cx,YYYY+_triangle_WidthV
                , cx+_triangle_WidthT,YYYY
                );
    //================================================================
    
    tempStr = #;
    //================================================================
    (XYSLIDER_getIsUseGridParamerOnMousePt(XYSLIDER_ID) == true)?
    (
        sprintf( tempStr,"%.2f",XYSLIDER_getGridValueParameter_Y(XYSLIDER_ID) );
        //============================================================
    ):(
        sprintf( tempStr,"%.2f",XYSLIDER_getYValue(XYSLIDER_ID) );
    );
    //================================================================
    gfx_measurestr(tempStr,tempStrW,tempStrH);
    //================================================================
    gfx_x = x-tempStrW-1;
    gfx_y = YYYY-gfx_texth/2;
    //================================================================
    gfx_drawstr(tempStr);
    //================================================================
    (XYSLIDER_getIsUseGridParamerOnMousePt(XYSLIDER_ID) == true)?
    (
        sprintf( tempStr,"%.2f",XYSLIDER_getGridValueParameter_X(XYSLIDER_ID) );
        //============================================================
    ):(
        sprintf( tempStr,"%.2f",XYSLIDER_getXValue(XYSLIDER_ID) );
    );
    //================================================================
    
    gfx_measurestr(tempStr,tempStrW,tempStrH);
    //================================================================
    gfx_x = XXXX-tempStrW/2;
    gfx_y = y+h+gfx_texth/2;
    //================================================================
    gfx_drawstr(tempStr);
    //================================================================
);

//====================================================================
function XYSLIDER_draw(XYSLIDER_ID)
local ( radius,lineH,x,y,w,h,cx,cy,circle_Area_ID
      , tempStr,tempStrW,tempStrH,XXXX,YYYY,margin,temp_Alpha
      , _onMouseX_Offset
      , _onMouseY_Offset
      )
(
    //================================================================
    x = RECTANGLE_getX(XYSLIDER_ID);
    y = RECTANGLE_getY(XYSLIDER_ID);
    w = RECTANGLE_getWidth(XYSLIDER_ID);
    h = RECTANGLE_getHeight(XYSLIDER_ID);
    cx =RECTANGLE_getCenterX(XYSLIDER_ID);
    cy =RECTANGLE_getCenterY(XYSLIDER_ID);
    //================================================================
    radius = 12;
    lineH  = 1;
    //================================================================
    
    COMPONENT_changeColorGfx( XYSLIDER_ID,"white");
    gfx_a = 0.5  *COMPONENT_getComponentAlpha(XYSLIDER_ID);
    gfx_rect( x, y, w, h,true);
    //================================================================
    
    //================================================================
    // draw Center Line
    COMPONENT_changeColorGfx( XYSLIDER_ID,"black");
    //================================================================
    gfx_line(  x +w/2 ,y 
             , x +w/2 ,y+h);
    gfx_line(  x   ,y+h/2
              ,x+w ,y+h/2);
              
    //================================================================
    // Draw Grid
    //================================================================
    (XYSLIDER_getIsDrawGrid(XYSLIDER_ID) == true)?
    (
        COMPONENT_changeColorGfx( XYSLIDER_ID,"white");
        _XYSLIDER_drawGrid(XYSLIDER_ID,radius);
    );
    //================================================================
    
    //================================================================
    // draw Center line and Bounds
    //================================================================
    COMPONENT_changeColorGfx( XYSLIDER_ID,"black");
    //================================================================
    gfx_rect( x, y, w+1, h+1,false);         
    //================================================================
    circle_Area_ID =  XYSLIDER_getCircleArea(XYSLIDER_ID);
    //================================================================
    XXXX = (x+radius)+ (w-radius*2 ) * XYSLIDER_getXValue(XYSLIDER_ID) ;
    YYYY = (y+radius)+ (h-radius*2 ) * XYSLIDER_getYValue(XYSLIDER_ID) ; 
    //================================================================
    
    //================================================================
    CIRCLE_setCX(circle_Area_ID,XXXX );
    CIRCLE_setCY(circle_Area_ID,YYYY);
    CIRCLE_setRadius(circle_Area_ID,radius);
    //================================================================
    
    //================================================================
    tempStr = "X 0.0 : Y 0.0";
    gfx_measurestr(tempStr,tempStrW,tempStrH);
    //================================================================
    margin =3;
    //================================================================
    
    //================================================================
    ( XYSLIDER_getXYDistanceDrawMode( XYSLIDER_ID) == DEFINE_XYSLIDER_DISTANCE_DRAWMODE_NONE)?
    (
        COMPONENT_changeColorGfx( XYSLIDER_ID,"black");
        gfx_rect(x+w/2
                ,y+h/2
                ,tempStrW+margin*2
                ,tempStrH+margin*2,true);
        COMPONENT_changeColorGfx( XYSLIDER_ID,"white");
        gfx_x = x+w/2+margin;
        gfx_y = y+h/2+margin;
        gfx_drawstr( "X 0.5 : Y 0.5");
        //============================================================
    ):( XYSLIDER_getXYDistanceDrawMode( XYSLIDER_ID) == DEFINE_XYSLIDER_DISTANCE_DRAWMODE_CENTER)?
    (
        COMPONENT_changeColorGfx( XYSLIDER_ID,"white");
        gfx_x = x+w/2+margin;
        gfx_y = y+h/2+margin;
        //============================================================
        _XYSLIDER_drawXYDistance(XYSLIDER_ID,XXXX,YYYY);
        //============================================================
    ):( XYSLIDER_getXYDistanceDrawMode( XYSLIDER_ID) == DEFINE_XYSLIDER_DISTANCE_DRAWMODE_CENTER_ANGLE)?
    (
        COMPONENT_changeColorGfx( XYSLIDER_ID,"white");
        gfx_x = x+w/2+margin;
        gfx_y = y+h/2+margin;
        //============================================================
        _XYSLIDER_drawXYAngleFromCenter(XYSLIDER_ID,XXXX,YYYY);
    );
    //================================================================
    
    //================================================================
    COMPONENT_changeColorGfx( XYSLIDER_ID,"black");
    //================================================================
    // draw Cross  Lines;
    //================================================================
    ( XYSLIDER_getIsNeedCrossCursolLine(XYSLIDER_ID)==true)?
    (
        _XYSLIDER_drawCrossCursol(XYSLIDER_ID,XXXX,YYYY);
    );
    //================================================================
    
    //================================================================
    COMPONENT_changeColorGfx( XYSLIDER_ID,"black");
    gfx_rect(x
            ,y
            ,tempStrW+margin*2
            ,tempStrH+margin*2,true);
    COMPONENT_changeColorGfx( XYSLIDER_ID,"white");
    gfx_x = x+margin;
    gfx_y = y+margin;
    gfx_drawstr( "X 0.0 : Y 0.0");
    //================================================================
    COMPONENT_changeColorGfx( XYSLIDER_ID,"black");
    gfx_rect(x+w-margin*2 -tempStrW
            ,y
            ,tempStrW+margin*2
            ,tempStrH+margin*2,true);
    COMPONENT_changeColorGfx( XYSLIDER_ID,"white");
    gfx_x = x+w-margin-tempStrW;
    gfx_y = y+margin;
    gfx_drawstr( "X 1.0 : Y 0.0");
    //================================================================
    COMPONENT_changeColorGfx( XYSLIDER_ID,"black");
    gfx_rect(x+w-margin*2 -tempStrW
            ,y+h-margin*2 -tempStrH
            ,tempStrW+margin*2
            ,tempStrH+margin*2,true);
    COMPONENT_changeColorGfx( XYSLIDER_ID,"white");
    gfx_x = x+w-margin-tempStrW;
    gfx_y = y+h-margin-tempStrH;
    gfx_drawstr( "X 1.0 : Y 1.0");
    //================================================================
    COMPONENT_changeColorGfx( XYSLIDER_ID,"black");
    gfx_rect(x
            ,y+h-margin*2 -tempStrH
            ,tempStrW+margin*2
            ,tempStrH+margin*2,true);
    COMPONENT_changeColorGfx( XYSLIDER_ID,"white");
    gfx_x = x+margin;
    gfx_y = y+h-margin-tempStrH;
    gfx_drawstr( "X 0.0 : Y 1.0");
    //================================================================

    COMPONENT_changeColorGfx( XYSLIDER_ID,"black");
    //================================================================
    gfx_circle( floor(XXXX),floor(YYYY) , radius ,true);
    //================================================================
    (    XYSLIDER_isCircleAreaPressed(XYSLIDER_ID) ==true
      || CIRCLE_isContainMouse( circle_Area_ID ) == true
    ) ?
    (
        //============================================================
        COMPONENT_changeColorGfx( XYSLIDER_ID,"red");
        gfx_circle( floor(XXXX),floor(YYYY) , radius -4    ,true);
        
        //============================================================
        //value 
        //============================================================
        tempStr =#;
        //============================================================
        // (XYSLIDER_getIsDrawGrid(XYSLIDER_ID) == true)?
        (XYSLIDER_getIsUseGridParamerOnMousePt(XYSLIDER_ID) == true)?
        (
            //========================================================
            sprintf(  tempStr
                   ,"%s%1.2f\n%s%1.2f"
                   , XYSLIDER_getXGridParamName(XYSLIDER_ID)
                   , XYSLIDER_getGridValueParameter_X(XYSLIDER_ID)
                   , XYSLIDER_getYGridParamName(XYSLIDER_ID)
                   , XYSLIDER_getGridValueParameter_Y(XYSLIDER_ID)
                   );
            //========================================================
        ):(
            sprintf(  tempStr
                ,"x %1.2f :y %1.2f "
                , XYSLIDER_getXValue(XYSLIDER_ID)
                , XYSLIDER_getYValue(XYSLIDER_ID)
                );
        );
        //============================================================
        
        //============================================================
        gfx_measurestr(tempStr,tempStrW,tempStrH);
        //============================================================
        COMPONENT_changeColorGfx( XYSLIDER_ID,"black");
        
        _onMouseX_Offset = 1;
        _onMouseY_Offset = 1;
        //============================================================
        gfx_rect(max(x,min(XXXX,x+w-(tempStrW+margin*2)-radius -_onMouseX_Offset)) +radius +_onMouseX_Offset
                ,max(y,min(YYYY,y+h-(tempStrH+margin*2)-radius -_onMouseY_Offset)) +radius +_onMouseY_Offset
                ,tempStrW+margin*2
                ,tempStrH+margin*2,true);
        COMPONENT_changeColorGfx( XYSLIDER_ID,"white");
        gfx_x = max(x,min(XXXX,x+w-(tempStrW+margin*2)-radius -_onMouseX_Offset))+margin +radius +_onMouseX_Offset;
        gfx_y = max(y,min(YYYY,y+h-(tempStrH+margin*2)-radius -_onMouseY_Offset))+margin +radius +_onMouseY_Offset;
        gfx_drawstr( tempStr);
        //============================================================
    ):(
        COMPONENT_changeColorGfx( XYSLIDER_ID,"yellow");
        gfx_circle( floor(XXXX),floor(YYYY) , radius -4    ,true);
    );
    //================================================================
    
    //================================================================
    COMPONENT_changeColorGfx( XYSLIDER_ID,"black");
    //================================================================
);
//====================================================================
function XYSLIDER_mouseMoved(XYSLIDER_ID,MOUSEINFO_ID)local(XXX,YYY)
(
    ( RECTANGLE_isContainMouse(XYSLIDER_ID) ==true) ?
    (
        DBG(" SLIDER  Mouse Moved");
    );
    //================================================================

    //================================================================
    ( XYSLIDER_isCircleAreaPressed(XYSLIDER_ID) ==true )?
    (
        XXX = _XYSLIDER_positionToXValue( XYSLIDER_ID
                                        , MOUSEINFO_getMouseX(MOUSEINFO_ID));
        YYY = _XYSLIDER_positionToYValue( XYSLIDER_ID
                                        , MOUSEINFO_getMouseY(MOUSEINFO_ID));
        //============================================================
        XYSLIDER_setXValue(XYSLIDER_ID,XXX,true) ;
        XYSLIDER_setYValue(XYSLIDER_ID,YYY,true) ;
        //============================================================
        DBG(" XY SLIDER -- X Changed");
        DBG_FLOAT(XYSLIDER_getXValue(XYSLIDER_ID) );
        //============================================================
        DBG(" XY SLIDER --  Y Changed");
        DBG_FLOAT(XYSLIDER_getYValue(XYSLIDER_ID) );
        //============================================================
    );
    //================================================================
);
//====================================================================
function XYSLIDER_mouseButtonPressd(XYSLIDER_ID,MOUSEINFO_ID )local(circle_Area_ID)
(
    //================================================================
    ( RECTANGLE_isContainMouse(XYSLIDER_ID) ==true) ?
    (
        DBG(" SLIDER Mouse Button Press IN");
        SetLastMousePressdComponent(XYSLIDER_ID);
        COMPONENT_setIsMousePressStartedInThisComp(XYSLIDER_ID,true);
    ):(
        COMPONENT_setIsMousePressStartedInThisComp(XYSLIDER_ID,false);
    );
    //================================================================
    circle_Area_ID = XYSLIDER_getCircleArea(XYSLIDER_ID);
    //================================================================
    ( CIRCLE_isContainMouse(circle_Area_ID) == true)?
    (
        DBG(" SLIDER Mouse Button Press IN Circle");
        _XYSLIDER_setIsCircleAreaPressed(XYSLIDER_ID,true);
    );
    //================================================================
);
//====================================================================
function XYSLIDER_mouseButtonReleased( XYSLIDER_ID,MOUSEINFO_ID )local (tempstr)
(
    //================================================================
    ( RECTANGLE_isContainMouse(XYSLIDER_ID) ==true) ?
    (
        //============================================================
        DBG(" SLIDER Mouse Button Released");
        SetLastMouseReleasedComponent(XYSLIDER_ID);
    );
    //================================================================
    _XYSLIDER_setIsCircleAreaPressed(XYSLIDER_ID,false);
    //================================================================
);
//====================================================================
function XYSLIDER_mouseWheeled(XYSLIDER_ID,MOUSEINFO_ID )
(
    //================================================================
    ( RECTANGLE_isContainMouse(XYSLIDER_ID) ==true) ?
    (
        DBG(" SLIDER Mouse Wheeld");
        
        COMPONENT_setValue( XYSLIDER_ID
                          ,   COMPONENT_getValue(XYSLIDER_ID) 
                            + MOUSEINFO_getMouseWheelDiffV_ABS(MOUSEINFO_ID)/30
                          , true
                          );
       
        //============================================================
        DBG_FLOAT(COMPONENT_getValue(XYSLIDER_ID) );
        //============================================================
        SetLastMouseWheeledComponent(XYSLIDER_ID);
    );
    //================================================================
);
//====================================================================


