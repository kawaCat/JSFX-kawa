//====================================================================
desc:_kawa_XY_Chorus
//====================================================================

// imports
//====================================================================
import kawa_ALL.jsfx-inc
//====================================================================

// sliders //( this app lib need Continuous number)
//--------------------------------------------------------------------
slider1:0.25<0.0,1.0>RATE 
slider2:0.25<0.0,1.0>WIDTH
slider3:0.0 <0,1,{Normal,Deep}> Chorus Mode
slider4:0.0 <0,3,{Sin,Saw,Rect,Tri}> WAVE TYPE
slider5:0.0 <0,100> SMOOZING (ms)
slider6:0.0 <-30,10>DRY LEVEL(dB)
slider7:0.0 <-30,10>WET LEVEL(dB)
slider8:0.0 <0,3,{Wave,Modulation,Off}>VIEW
slider9:0.0 <0,5, {COLORFULL,SLATE GREY,ORANGE RED,SEA GREEN,DODGER BLUE,GRAPHICS OFF}>STYLE
//====================================================================
in_pin: left input
in_pin: right input
out_pin:left output
out_pin:right output
//====================================================================
@init
//====================================================================

    // create APP ID
    //================================================================
    app_ID = APP_create();
    //================================================================

    //create Layer ID
    //================================================================
    layer_001  = LAYER_create("LAYER01");
    //================================================================

    //create Component and add to layer 1 .
    //================================================================
    comp_Border  = COMPONENT_create("TEST");
    comp_XYSlider_1 = XYSLIDER_create("comp_XYSlider_1");
    XYSLIDER_setSliderIndexX(comp_XYSlider_1,1);
    XYSLIDER_setSliderIndexY(comp_XYSlider_1,2);
    //----------------------------------------------------------------
    XYSLIDER_setIsNeedCrossCursolLine(comp_XYSlider_1,true);
    XYSLIDER_setIsDrawGrid(comp_XYSlider_1,true);
    XYSLIDER_setXGridParam(comp_XYSlider_1,0.1);
    XYSLIDER_setYGridParam(comp_XYSlider_1,0.1);
    //----------------------------------------------------------------
    LAYER_addChildComponent(layer_001  , comp_Border);
    LAYER_addChildComponent(layer_001  , comp_XYSlider_1);
    //================================================================

    // layer add to app
    //================================================================
    APP_addChildComponent(app_ID,layer_001 );
    //================================================================
    LAYER_setActive(layer_001 ,true);
    //================================================================

    // canvase test
    //================================================================
    canvas_WAVE_L = CANVAS_create(gfx_w,gfx_h);
    canvas_WAVE_R = CANVAS_create(gfx_w,gfx_h);
    //================================================================
    
    delaySize = srate;
    DELAY_ARRAY_L = CURSOLBUFFER_create(delaySize);
    DELAY_ARRAY_R = CURSOLBUFFER_create(delaySize);
    DELAY_ARRAY_L_MIXED = CURSOLBUFFER_create(100);
    DELAY_ARRAY_R_MIXED = CURSOLBUFFER_create(100);
    //================================================================
    
    //================================================================
    DBG_toggle(DBG); // visible off
    //================================================================
    
    // for particle 
    PARTICLE_controller = PARTICLE_CONTROLLER_create();
    //================================================================
    waveSignale_ID = WAVESINE_create();
    WAVESINE_setPolarType (waveSignale_ID,DEFINE_WAVE_SIGNALE_UNIPOLAR);
    //================================================================
    
    smooth_coeff = exp(-1/(slider5/1000*srate)); // 4 ms smoothing
    //================================================================
    waveSignalForGraph_ID = WAVESINE_create();
    WAVESINE_setPolarType (waveSignalForGraph_ID,DEFINE_WAVE_SIGNALE_UNIPOLAR);
    bufferForGraph = CURSOLBUFFER_create (srate*3);
    //================================================================
    
    //================================================================
    DEFINE_MAX_CHORUS_RATE = 5;
    DEFINE_MAX_CHORUS_WIDTH = 1;
    //================================================================
    
    mixProcess_ID_L = MIXPROCESS_create();
    mixProcess_ID_R = MIXPROCESS_create();
    //================================================================
    backGround_colorSingleStr = "slategrey"
    
@slider
//====================================================================
    XYSLIDER_setXValue(comp_XYSlider_1,slider1,false);
    XYSLIDER_setYValue(comp_XYSlider_1,slider2,false);
    WAVESINE_setGenerateWaveType(waveSignale_ID,slider4);
    WAVESINE_setGenerateWaveType(waveSignalForGraph_ID,slider4);
    //================================================================
    smooth_coeff = exp(-1/(slider5/1000*srate)); 
    //================================================================
    APP_SliderChanged(app_ID); // notify for update lastValue
    //================================================================
    (slider3 ==0)?
    (
        //normal mode
        DEFINE_MAX_CHORUS_RATE  = 5;
        DEFINE_MAX_CHORUS_WIDTH = 1;
        //============================================================
        rateX= slider1 * DEFINE_MAX_CHORUS_RATE;//Max 5hz
    ):(
        // deep Mode
        DEFINE_MAX_CHORUS_RATE =1;
        DEFINE_MAX_CHORUS_WIDTH = 20;
        rateX= slider1 * DEFINE_MAX_CHORUS_RATE;//Max 1hz
    );
    //================================================================
    MIXPROCESS_setMixValue (mixProcess_ID_L,slider6);
    MIXPROCESS_setMixValue (mixProcess_ID_R,slider6);
    //================================================================
    dryGain = decivelToValue(slider6);
    wetGain = decivelToValue(slider7);
    //================================================================
    
    //================================================================
    ( slider9 == 0)?
    (
        COMPONENT_setActive(comp_Border,true);
        gfx_clear = -1;
        //============================================================
    ):( slider9 == 1)?
    (
        COMPONENT_setActive(comp_Border,false);
        backGround_colorSingleStr = "slategrey";
        gfx_clear = -1;
        //============================================================
    ):( slider9 == 2)?
    (
        COMPONENT_setActive(comp_Border,false);
        backGround_colorSingleStr = "orangered";
        gfx_clear = -1;
        //============================================================
    ):( slider9 == 3)?
    (
        COMPONENT_setActive(comp_Border,false);
        backGround_colorSingleStr = "seagreen";
        gfx_clear = -1;
        //============================================================
    ):( slider9 == 4)?
    (
        COMPONENT_setActive(comp_Border,false); 
        backGround_colorSingleStr = "dodgerblue";
        gfx_clear = -1;
        //============================================================
    ):( slider9 == 5)?
    (
        gfx_clear = 0; //brack
        //============================================================
    )
    ;
    //================================================================
    
@block
//====================================================================
    f_max_L = 0;f_min_L = 0;
    f_max_R = 0;f_min_R = 0;
    //================================================================
    
@sample
//====================================================================
    f_max_L = max(f_max_L,spl0);
    f_min_L = min(f_min_L,spl0);
    f_max_R = max(f_max_R,spl1);
    f_min_R = min(f_min_R,spl1);
    //================================================================
    
    //================================================================
    (slider3 ==0)?
    (
        //normal Mode
        rateX= slider1 * DEFINE_MAX_CHORUS_RATE;//Max 5hz
        //============================================================
        WAVESINE_setRate(waveSignale_ID,rateX);
        newValueX = ( WAVESINE_getAndTick (waveSignale_ID));
        valueX = singlepole(valueX,newValueX,smooth_coeff);
        //============================================================
        chorusWidth =   ( srate * 0.001 )* DEFINE_MAX_CHORUS_WIDTH
                        * XYSLIDER_getYValue(comp_XYSlider_1) ;
        //============================================================
        WAVESINE_setRate(waveSignalForGraph_ID,rateX);
        valueXForGraph_new = ( WAVESINE_getAndTick (waveSignalForGraph_ID));
        valueXForGraph = singlepole(valueXForGraph,valueXForGraph_new,smooth_coeff);
        //============================================================
        CURSOLBUFFER_push( bufferForGraph ,valueXForGraph );
        //============================================================
    ):(
        //deep Mode
        rateX= slider1 * DEFINE_MAX_CHORUS_RATE;//Max 1hz
        //============================================================
        WAVESINE_setRate(waveSignale_ID,rateX);
        newValueX = ( WAVESINE_getAndTick (waveSignale_ID));
        valueX = singlepole(valueX,newValueX,smooth_coeff);
        //============================================================
        chorusWidth = ( srate * 0.001  ) * DEFINE_MAX_CHORUS_WIDTH 
                     * XYSLIDER_getYValue(comp_XYSlider_1) ;
        //============================================================
        WAVESINE_setRate(waveSignalForGraph_ID,rateX);
        valueXForGraph_new = ( WAVESINE_getAndTick (waveSignalForGraph_ID));
        valueXForGraph = singlepole(valueXForGraph,valueXForGraph_new,smooth_coeff);
        //============================================================
        CURSOLBUFFER_push( bufferForGraph ,valueXForGraph );
    );
    //================================================================
    CURSOLBUFFER_push( DELAY_ARRAY_L ,spl0 );
    CURSOLBUFFER_push( DELAY_ARRAY_R ,spl1 );
    //================================================================
    // (this process getted with noise in the case of pure sine wave.)
    // delay_L = CURSOLBUFFER_getOffsettedValue( DELAY_ARRAY_L
    //                                         , - chorusWidth * valueX -1 );
    // delay_R = CURSOLBUFFER_getOffsettedValue( DELAY_ARRAY_R
    //                                         , - chorusWidth * valueX -1 );
    //================================================================
   
    //================================================================
    newOffsetSample =  chorusWidth * valueX+1;
    offsetSample = singlepole(offsetSample,newOffsetSample,smooth_coeff);
    //================================================================
    
    // with interpolation ??
    //================================================================
    delay_L = CURSOLBUFFER_getOffsettedValueWithInterp( DELAY_ARRAY_L
                                                      , offsetSample );
    //================================================================
    delay_R = CURSOLBUFFER_getOffsettedValueWithInterp( DELAY_ARRAY_R
                                                      , offsetSample );
    //================================================================

    //================================================================
    CURSOLBUFFER_push( DELAY_ARRAY_L_MIXED , ( delay_L ) );
    CURSOLBUFFER_push( DELAY_ARRAY_R_MIXED , ( delay_R ) );
    //================================================================
    wet_L = CURSOLBUFFER_getOffsettedValueWith3rdSplineInterp( DELAY_ARRAY_L_MIXED
                                                      , 0 );// predelay ?
    wet_R = CURSOLBUFFER_getOffsettedValueWith3rdSplineInterp( DELAY_ARRAY_R_MIXED
                                                      , 0 );// predelay ?
    //================================================================
    
    //================================================================
    // mix 
    spl0 = spl0*dryGain + wet_L * wetGain;
    spl1 = spl1*dryGain + wet_R * wetGain;
    //================================================================

@gfx 200 400
//====================================================================
( slider9 != 5 )?
(
    //================================================================
    //style mode
    //================================================================
    ( slider9 == 0)?
    (
        // direct draw background to
        //============================================================
        drawBackGrond_color(5,0,60);
        drawSinWaveCircle(100,0.8,1,0.0043);
        //============================================================

        // for particle 
        PARTICLE_CONTROLLER_update ( PARTICLE_controller );
        //============================================================
        
        //============================================================
        // final background
        //============================================================
        drawDotGrid(16,16,0.6);
        //============================================================
        ( APP_isMouseButtonHoldingPress(app_ID)  ==true) ? 
        (
            PARTICLE_CONTROLLER_addParticleType1(PARTICLE_controller);
            0;
        );
        //============================================================
        (time_precise() -lastPTime_  > 0.25)?
        (
            PARTICLE_CONTROLLER_addParticleType2_XY (PARTICLE_controller
                                                    ,gfx_w/2
                                                    ,gfx_h/2
                                                    ,false
                                                   );
            lastPTime_ = time_precise();
        );
        //============================================================
        COMPONENT_setComponentAlpha(comp_Border,abs(sin($pi*2*mod*2)));
        mod += 0.01;(mod > 1 )?(mod=0;);
        //============================================================
    ):(
        //============================================================
        changeGfxColorByPreset(backGround_colorSingleStr );  
        gfx_a=1;
        //============================================================
        gfx_rect(0,0,gfx_w,gfx_h,true);
        //============================================================
    );
    //================================================================
    // view mode
    //================================================================
    (slider8 ==0)?
    (
        // canvase test
        //============================================================
        drawWaveBufferToCanvas(canvas_WAVE_L
                              ,f_max_L
                              ,f_min_L
                              ,40 * XYSLIDER_getXValue(comp_XYSlider_1)
                              ,0.3
                              ,1
                              ,80);
        //============================================================
        drawWaveBufferToCanvas(canvas_WAVE_R
                              ,f_max_R
                              ,f_min_R
                              ,40 * XYSLIDER_getYValue(comp_XYSlider_1)
                              ,0.4
                              ,1
                              ,0);
        //============================================================
        gfx_a =0.6;
        CANVAS_blitImage4(canvas_WAVE_R,1,0);
        CANVAS_blitImage4(canvas_WAVE_L,1,0);
        gfx_a =1;
        //============================================================
    ):(slider8 ==1)?
    (
        drawPointNum = min(srate/rateX*2,srate/2);
        //============================================================
        Draw_WaveGraph( bufferForGraph,drawPointNum,0,0,gfx_w,gfx_h);
        //============================================================
        gfx_a = 1;
        gfx_rect( 0,gfx_h/2-1, gfx_w, 2,true);
    );
    //================================================================
   
    //================================================================
    // App update. check and compare with last event state.(resize or mouse)
    //================================================================
    APP_update(app_ID);
    //================================================================
    
    // alignment position when resized.
    //================================================================
    ( APP_isWindowResized(app_ID) ==true) ?
    (
        RECTANGLE_copyTo      ( canvas_WAVE_L,app_ID);
        RECTANGLE_copyTo      ( canvas_WAVE_R,app_ID);
        CANVAS_recreateCanvas ( canvas_WAVE_L ); 
        CANVAS_recreateCanvas ( canvas_WAVE_R );
        //============================================================
        RECTANGLE_copyTo      ( layer_001 ,app_ID);  // layer resize 
        //============================================================
    );
    //================================================================

    //================================================================
    ( LAYER_isAreaResized(layer_001 ) ==true)   ?
    (
        RECTANGLE_copyTo         (comp_Border,layer_001 );
        RECTANGLE_cropFromTopP   (comp_Border,0.025);
        //============================================================
        RECTANGLE_copyTo         (comp_XYSlider_1,layer_001 );
        RECTANGLE_reduceP        (comp_XYSlider_1,0.1,0.1);
    );
    //================================================================
    
    //================================================================
    // plugin Title Str
    //================================================================
    RECTANGLE_drawBottomRightText( app_ID,"XY Chorus");
    //================================================================
    
    //================================================================
    // draw Parameter Info
    //================================================================
    drawText = #;
    //================================================================
    sprintf (drawText,"Chorus Rate : %1.2f Hz ", rateX );
    //================================================================
    gfx_r = 0;gfx_g =0;gfx_b =0;gfx_a = 1;
    gfx_x = 5;
    gfx_y = gfx_h-(gfx_texth)*2-2;
    gfx_drawstr(drawText);
    //================================================================
    sprintf (drawText,"Chorus Width: %1.2f ms", DEFINE_MAX_CHORUS_WIDTH * XYSLIDER_getYValue(comp_XYSlider_1) );
    //================================================================
    gfx_x = 5;
    gfx_y = gfx_h-gfx_texth-1;
    gfx_drawstr(drawText);
    //================================================================
):(
    gfx_a=1;
    //================================================================
    gfx_rect(0,0,gfx_w,gfx_h,true);
);
//====================================================================
// 続

