//====================================================================
desc:_kawa_XY_Flanger
//====================================================================

// imports
//====================================================================
import kawa_ALL.jsfx-inc
//====================================================================

// sliders//( this app lib need Continuous number)
//--------------------------------------------------------------------
slider1: 0.1<0.0,1.0>RATE X
slider2: 0.6<0.0,1.0>RATE Y
slider3: 0.0<0,1,{FLANGER,PHASER}>MODE
slider4: 0<0,3,{Sin,Saw,Rect,Tri}> WAVE TYPE
slider5: 0<0,500> FADE SMOOZING(ms)
slider6: 0.0<0,0.95>FEEDBACK( x100 %)
slider7: 1.0<0,1>DRY / WET
slider8: 0<0,1,{Wave,Modulation}>VIEW
//====================================================================

//====================================================================
in_pin: left input
in_pin: right input
out_pin:left output
out_pin:right output
//====================================================================

//====================================================================
@init
//====================================================================
      
    // create APP ID
    //================================================================
    app_ID = APP_create();
    //================================================================

    //create Layer ID
    //================================================================
    layer_001  = LAYER_create("LAYER01");
    //================================================================

    //create Component and add to layer 1 .
    //================================================================
    comp_Border     = COMPONENT_create("TEST");
    comp_XYSlider_1 = XYSLIDER_create("comp_XYSlider_1");
    comp_PHASER_ModeButton   = BUTTON_create("FLANGER");
    BUTTON_setOnTextPostFix (comp_PHASER_ModeButton,"");
    BUTTON_setOffTextPostFix(comp_PHASER_ModeButton,"");
    COMPONENT_changeColor( comp_PHASER_ModeButton
                         , "butonOnBackGroundColor"
                         , 1,1,0,1);//r,g,b,a
    //================================================================
    COMPONENT_setSliderIndex(comp_PHASER_ModeButton,3);
    COMPONENT_changeColor(comp_PHASER_ModeButton,"textColor_mouseon",0,0,0,1);
    //----------------------------------------------------------------
    XYSLIDER_setIsNeedCrossCursolLine(comp_XYSlider_1,true);
    XYSLIDER_setIsDrawGrid(comp_XYSlider_1,true);
    //----------------------------------------------------------------
    LAYER_addChildComponent(layer_001  , comp_Border );
    LAYER_addChildComponent(layer_001  , comp_PHASER_ModeButton);
    LAYER_addChildComponent(layer_001  , comp_XYSlider_1);
    //================================================================

    // layer add to app
    //================================================================
    APP_addChildComponent(app_ID,layer_001 );
    //================================================================
    LAYER_setActive(layer_001 ,true);
    //================================================================

    // canvase test
    //================================================================
    canvas_WAVE_L = CANVAS_create(gfx_w,gfx_h);
    canvas_WAVE_R = CANVAS_create(gfx_w,gfx_h);
    //================================================================
    
    delaySize = srate;
    delay_ARRAY_L = CURSOLBUFFER_create(delaySize);
    delay_ARRAY_R = CURSOLBUFFER_create(delaySize);
    //================================================================
    
    //================================================================
    DBG_toggle(DBG); // visible off
    //================================================================
    
    // for particle 
    PARTICLE_controller = PARTICLE_CONTROLLER_create();
    //================================================================
    // parameter Smoozing
    smooth_coeff = exp(-1/(0.1/1000*srate)); // 0.1 ms smoothing
    smooth_coeff_MOD = exp(-1/(10/1000*srate)); // 0.1 ms smoothing
    //================================================================
    waveSignale_ID_X = WAVESINE_create();
    waveSignale_ID_Y = WAVESINE_create();
    //================================================================
    
    //================================================================
    DEFINE_MAX_WIDTH = 2;
    offsetTime_MS = 0;
    //================================================================
    bufferForGraph = CURSOLBUFFER_create (srate*3);
    //================================================================
    
    
@slider
//====================================================================
    COMPONENT_setValue(comp_PHASER_ModeButton,slider3,faluse);
    WAVESINE_setGenerateWaveType(waveSignale_ID_X,slider4);
    WAVESINE_setGenerateWaveType(waveSignale_ID_Y,slider4);
    //================================================================
    smooth_coeff_MOD = exp(-1/(slider5/1000*srate)); 
    //================================================================
    APP_SliderChanged(app_ID); // notify for update lastValue
    //================================================================
    
    //================================================================
    ( BUTTON_isON(comp_PHASER_ModeButton) ==true)? //phaser mode
    (
        DEFINE_MAX_WIDTH = 1; // 1ms
        //============================================================
        rateX = slider1 * 0.60 + 0.001;
        rateY = slider2 * 0.03 + 0.001;
    ):(
        DEFINE_MAX_WIDTH = 2; // 2ms
        rateX = slider1;
        rateY = slider2;
    );  
    //================================================================
    
    
@block
//====================================================================
    f_max_L = 0;f_min_L = 0;
    f_max_R = 0;f_min_R = 0;
    //================================================================
    
@sample
//====================================================================
    f_max_L = max(f_max_L,spl0);
    f_min_L = min(f_min_L,spl0);
    f_max_R = max(f_max_R,spl1);
    f_min_R = min(f_min_R,spl1);
    //================================================================
 
    //================================================================
    ( BUTTON_isON(comp_PHASER_ModeButton) ==true)? //phaser mode
    (
        DEFINE_MAX_WIDTH = 1;
        //============================================================
        rateX = slider1 * 0.60 + 0.001;
        WAVESINE_setRate(waveSignale_ID_X,rateX);
        newValueX = 0.5+( WAVESINE_getAndTick (waveSignale_ID_X))/2;
        valueX = singlepole(valueX,newValueX,smooth_coeff_MOD);
        //============================================================
        
        rateY = slider2 * 0.03 + 0.001;
        WAVESINE_setRate(waveSignale_ID_Y,rateY);
        newValueY = 0.5+( WAVESINE_getAndTick (waveSignale_ID_Y))/2;
        valueY = singlepole(valueY,newValueY,smooth_coeff_MOD);
        //============================================================
        
        //============================================================
        CURSOLBUFFER_push( delay_ARRAY_L,spl0 -delay_L*0.8*slider6 );    
        CURSOLBUFFER_push( delay_ARRAY_R,spl1 -delay_R*0.8*slider6 );  
        
        //============================================================
        XYSLIDER_setXValue(comp_XYSlider_1,valueX,false);
        XYSLIDER_setYValue(comp_XYSlider_1,valueY,false);
        
        chorusWidth = srate* ( 0.001 ) * DEFINE_MAX_WIDTH;
        //============================================================
        //smoozing
        //============================================================
        newOffsetSample =  chorusWidth * XYSLIDER_getXValue(comp_XYSlider_1);
        offsetSample = singlepole(offsetSample,newOffsetSample,smooth_coeff);
        //============================================================
        newOffsetSamplePhase_L = srate/rateX * 0.000001 * XYSLIDER_getYValue(comp_XYSlider_1);
        newOffsetSamplePhase_R = srate/rateX * 0.000050 * XYSLIDER_getXValue(comp_XYSlider_1);
        //============================================================
        offsetSamplePhase_L = singlepole(offsetSamplePhase_L,newOffsetSamplePhase_L,smooth_coeff);
        offsetSamplePhase_R = singlepole(offsetSamplePhase_R,newOffsetSamplePhase_R,smooth_coeff);
        //============================================================
        delay_L = CURSOLBUFFER_getOffsettedValueWith5thSplineInterp( delay_ARRAY_L
                                                                   , offsetSamplePhase_L + offsetSample );
        delay_R = CURSOLBUFFER_getOffsettedValueWith5thSplineInterp( delay_ARRAY_R
                                                                   , offsetSamplePhase_R + offsetSample );
        //============================================================
    ):( // FLANGER MODE
        //============================================================
        DEFINE_MAX_WIDTH = 2;
        rateX= slider1;
        WAVESINE_setRate(waveSignale_ID_X,rateX);
        newValueX = 0.5+( WAVESINE_getAndTick (waveSignale_ID_X))/2;
        valueX = singlepole(valueX,newValueX,smooth_coeff_MOD);
        //============================================================
        rateY = slider2;
        WAVESINE_setRate(waveSignale_ID_Y,rateY);
        newValueY = 0.55+( WAVESINE_getAndTick (waveSignale_ID_Y))/2*0.9;
        valueY = singlepole(valueY,newValueY,smooth_coeff_MOD);
        //============================================================
        
        //============================================================
        CURSOLBUFFER_push( delay_ARRAY_L,spl0 +delay_L*slider6*0.8 );    
        CURSOLBUFFER_push( delay_ARRAY_R,spl1 +delay_R*slider6*0.8 );  
        
        //============================================================
        XYSLIDER_setXValue(comp_XYSlider_1,valueX,false);
        XYSLIDER_setYValue(comp_XYSlider_1,valueY,false);
        //============================================================
        
        chorusWidth = ( srate * 0.001 ) * DEFINE_MAX_WIDTH * XYSLIDER_getYValue(comp_XYSlider_1) ;
        //============================================================
        //smoozing
        //============================================================
        newOffsetSample =  chorusWidth * XYSLIDER_getXValue(comp_XYSlider_1);
        offsetSample = singlepole(offsetSample,newOffsetSample,smooth_coeff);
        //============================================================
        
        //============================================================
        delay_L = CURSOLBUFFER_getOffsettedValueWith5thSplineInterp( delay_ARRAY_L
                                                                   , offsetSample );
        delay_R = CURSOLBUFFER_getOffsettedValueWith5thSplineInterp( delay_ARRAY_R
                                                                   , offsetSample );
        //============================================================
    );
    //================================================================
    offsetTime_MS = sample2MSec(offsetSample,srate);
    //================================================================
    CURSOLBUFFER_push( bufferForGraph ,  XYSLIDER_getYValue(comp_XYSlider_1) 
                                       * XYSLIDER_getXValue(comp_XYSlider_1));
    //================================================================
    spl0 = spl0 *(1-slider7) + (spl0 + delay_L ) * (slider7) ;
    spl1 = spl1 *(1-slider7) + (spl1 + delay_R ) * (slider7) ;
    //================================================================

@gfx 200 400
//====================================================================
    // direct draw background to
    //================================================================
    drawBackGrond_color(5,0,60);
    drawSinWaveCircle(100,0.8,1,0.0043);
    //================================================================

    // canvase test
    //================================================================
    (slider8 ==0)?
    (
        //============================================================
        drawWaveBufferToCanvas(canvas_WAVE_L
                              ,f_max_L
                              ,f_min_L
                              ,5
                              ,0.3
                              ,1
                              ,80);
        //============================================================
        drawWaveBufferToCanvas(canvas_WAVE_R
                              ,f_max_R
                              ,f_min_R
                              ,5
                              ,0.4
                              ,1
                              ,0);
        //============================================================
        gfx_a =0.6;
        CANVAS_blitImage4(canvas_WAVE_R,1,0);
        CANVAS_blitImage4(canvas_WAVE_L,1,0);
        gfx_a =1;
    );
    //================================================================
    // final background
    //================================================================
    drawDotGrid(16,16,0.6);
    //================================================================
   
    //================================================================
    (slider8 ==1)?
    (
        drawPointNum = min(srate/rateX*2,srate/2);
        //============================================================
        Draw_WaveGraph( bufferForGraph,drawPointNum,0,0,gfx_w,gfx_h);
        //============================================================
        gfx_a = 1;
        gfx_rect( 0,gfx_h/2-1, gfx_w, 2,true);
    );
    //================================================================
   
   
    // for debug
    //================================================================
    //DBGMESSAGE_drawAllMessage(DBG);
    //================================================================
    
    // for particle 
    PARTICLE_CONTROLLER_update ( PARTICLE_controller );
    //================================================================
    ( APP_isMouseButtonHoldingPress(app_ID)  ==true) ?      
    (
        PARTICLE_CONTROLLER_addParticleType1(PARTICLE_controller);
        0;
    );
    //================================================================
    PARTICLE_CONTROLLER_addParticleType3_XY (PARTICLE_controller
                                            ,XYSLIDER_getCircleAreaCX(comp_XYSlider_1)
                                            ,XYSLIDER_getCircleAreaCY(comp_XYSlider_1)
                                            ,false
                                            );
    //================================================================

    // App update. check and compare with last event state.(resize or mouse)
    //================================================================
    APP_update(app_ID);
    
    //================================================================
    ( mouse_cap & 64 ==64 && lastCAP != mouse_cap )?
    (
        DBG_toggle(DBG);
    );
    lastCAP = mouse_cap;
    //================================================================
    ( APP_isMouseButtonPressed(app_ID)  ==true) ?
    ( 0;);
    
    ( APP_isMouseButtonReleased(app_ID) ==true) ?
    ( 0;);
    //================================================================
    
    // alignment position when resized.
    //================================================================
    ( APP_isWindowResized(app_ID) ==true) ?
    (
        RECTANGLE_copyTo      ( canvas_WAVE_L,app_ID);
        RECTANGLE_copyTo      ( canvas_WAVE_R,app_ID);
        CANVAS_recreateCanvas ( canvas_WAVE_L ); 
        CANVAS_recreateCanvas ( canvas_WAVE_R );
        //============================================================
        RECTANGLE_copyTo      ( layer_001 ,app_ID);  // layer resize 
        //============================================================
    );
    //================================================================

    //================================================================
    ( LAYER_isAreaResized(layer_001 ) ==true)   ?
    (
        RECTANGLE_copyTo         (comp_Border ,layer_001 );
        RECTANGLE_cropFromTopP   (comp_Border ,0.025);
        //============================================================
        RECTANGLE_copyTo         (comp_XYSlider_1,layer_001 );
        RECTANGLE_reduceP        (comp_XYSlider_1,0.1,0.125);
        //============================================================
        RECTANGLE_copyTo         (comp_PHASER_ModeButton,layer_001 );
        RECTANGLE_cropFromTopP   (comp_PHASER_ModeButton,0.06);
        //RECTANGLE_cropFromRightP   (comp_PHASER_ModeButton,0.3);
    );
    //================================================================
    
    (BUTTON_isON(comp_PHASER_ModeButton)==true)?
    (
        COMPONENT_setName(comp_PHASER_ModeButton,"PHASER MODE ");
    ):
    (
        COMPONENT_setName(comp_PHASER_ModeButton,"FLANGER MODE");
    );
    //================================================================
    
    
    //================================================================
    // if animation
    //================================================================
    COMPONENT_setComponentAlpha(comp_Border ,abs(sin($pi*2*mod*2)));
    mod += 0.01;(mod > 1 )?(mod=0;);
    //================================================================
    //RECTANGLE_setX( layer_001 ,40*sin($pi*2*mod));
    
    //================================================================
    // plugin Title Str
    //================================================================
    RECTANGLE_drawBottomRightText( app_ID,"XY Flanger");
    //================================================================

    //================================================================
    // draw Parameter Info
    //================================================================
    drawText = #;
    //================================================================
    gfx_r = 0;gfx_g =0;gfx_b =0;gfx_a = 1;
    //================================================================
    sprintf (drawText,"Max Width: %1.2f ms ", DEFINE_MAX_WIDTH);
    gfx_measurestr(drawText,str_W,str_H);
    //================================================================
    gfx_y = RECTANGLE_getY2(comp_PHASER_ModeButton)+ 5;
    gfx_x = 5;
    gfx_drawstr(drawText);
    //================================================================
    
    //================================================================
    sprintf (drawText,"Mod Rate X : %1.2f Hz ", rateX );
    //================================================================
    gfx_x = 5;
    gfx_y = gfx_h-(gfx_texth)*1.05*3-1;
    gfx_drawstr(drawText);
    //================================================================
    sprintf (drawText,"Mod Rate Y : %1.2f Hz", rateY);
    //================================================================
    gfx_r = 0;gfx_g =0;gfx_b =0;gfx_a = 1;
    gfx_x = 5;
    gfx_y = gfx_h-(gfx_texth)*1.05*2-1;
    gfx_drawstr(drawText);
    //================================================================
    sprintf (drawText,"Width (ms) : %1.2f ms", offsetTime_MS);
    //================================================================
    gfx_x = 5;
    gfx_y = gfx_h-gfx_texth-2;
    gfx_drawstr(drawText);
    //================================================================


//====================================================================
// 続



