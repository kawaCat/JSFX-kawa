//====================================================================
desc:_kawa_XY_Flanger
//====================================================================

// imports
//====================================================================
import kawa_ALL.jsfx-inc
//====================================================================

// sliders//( this app lib need Continuous number)
//--------------------------------------------------------------------
slider1: 0.1<0.0,1.0>RATE 
slider2: 0.6<0.0,1.0>WIDTH
slider3: 0.0<0,1,{FLANGER,PHASER}>MODE
slider4: 0.0<0,1>FEEDBACK( x100 %)
slider5: 1.0<0,1>DRY / WET
//====================================================================
//in_pin: left input
//in_pin: right input
//out_pin:left output
//out_pin:right output
//====================================================================

//====================================================================
@init
//====================================================================

    // create APP ID
    //================================================================
    app_ID = APP_create();
    //================================================================

    //create Layer ID
    //================================================================
    layer_001  = LAYER_create("LAYER01");
    //================================================================

    //create Component and add to layer 1 .
    //================================================================
    comp_Border   = COMPONENT_create("TEST");
    comp_XYSlider_1 = XYSLIDER_create("comp_XYSlider_1");
    comp_PHASER_ModeButton   = BUTTON_create("FLANGER");
    BUTTON_setOnTextPostFix (comp_PHASER_ModeButton,"");
    BUTTON_setOffTextPostFix(comp_PHASER_ModeButton,"");
    COMPONENT_changeColor( comp_PHASER_ModeButton
                      ,"butonOnBackGroundColor"
                      ,1,1,0,1);
    //================================================================
    COMPONENT_setSliderIndex(comp_PHASER_ModeButton,3);
    COMPONENT_changeColor(comp_PHASER_ModeButton,"textColor_mouseon",0,0,0,1);
    //----------------------------------------------------------------
    LAYER_addChildComponent(layer_001  , comp_Border );
    LAYER_addChildComponent(layer_001  , comp_PHASER_ModeButton);
    LAYER_addChildComponent(layer_001  , comp_XYSlider_1);
    //================================================================

    // layer add to app
    //================================================================
    APP_addChildComponent(app_ID,layer_001 );
    //================================================================
    LAYER_setActive(layer_001 ,true);
    //================================================================

    // canvase test
    //================================================================
    canvas_WAVE_L = CANVAS_create(gfx_w,gfx_h);
    canvas_WAVE_R = CANVAS_create(gfx_w,gfx_h);
    //================================================================
    
    delaySize = srate;
    delay_ARRAY_L = CURSOLBUFFER_create(delaySize);
    delay_ARRAY_R = CURSOLBUFFER_create(delaySize);
    //================================================================
    
    //================================================================
    DBG_toggle(DBG); // visible off
    //================================================================
    
    // for particle 
    PARTICLE_controller = PARTICLE_CONTROLLER_create();
    //================================================================

@slider
//====================================================================
    //XYSLIDER_setYValue(comp_XYSlider_1,slider1,false);
    //XYSLIDER_setXValue(comp_XYSlider_1,slider2,false);
    COMPONENT_setValue(comp_PHASER_ModeButton,slider3,faluse);
    //================================================================
    APP_SliderChanged(app_ID); // notify for update lastValue
    //================================================================
@block
//====================================================================
    f_max_L = 0;f_min_L = 0;
    f_max_R = 0;f_min_R = 0;
    //================================================================
    
@sample
//====================================================================
    f_max_L = max(f_max_L,spl0);
    f_min_L = min(f_min_L,spl0);
    f_max_R = max(f_max_R,spl1);
    f_min_R = min(f_min_R,spl1);
    //================================================================
 
    //================================================================
    (BUTTON_isON(comp_PHASER_ModeButton) ==true)? //phaser mode
    (
        //============================================================
        rateX = slider1 * 0.60 + 0.001;
        valueX = 0.5 + sin( (2*$pi* rateX * timeX )/srate)/2;
        timeX +=1;(timeX>=srate/rateX)?( timeX=0;);
        //============================================================
        rateY = slider2 * 0.03 + 0.001;
        valueY = 0.5 + sin( (2*$pi* rateY * timeY)/srate)/2;
        timeY +=1;(timeY>=srate/rateY)?( timeY=0;);
        //============================================================
        
        //============================================================
        CURSOLBUFFER_push( delay_ARRAY_L,spl0 -delay_L*0.8*slider4 );    
        CURSOLBUFFER_push( delay_ARRAY_R,spl1 -delay_R*0.8*slider4 );  
        
        //============================================================
        XYSLIDER_setXValue(comp_XYSlider_1,valueX,false);
        XYSLIDER_setYValue(comp_XYSlider_1,valueY,false);
        
        chorusWidth = srate* ( 0.001  );
        //============================================================
        delay_L = CURSOLBUFFER_getOffsettedValue( delay_ARRAY_L
                                                , -srate/rateX * 0.000001 * XYSLIDER_getYValue(comp_XYSlider_1)
                                                  -chorusWidth * XYSLIDER_getXValue(comp_XYSlider_1) );
        delay_R = CURSOLBUFFER_getOffsettedValue( delay_ARRAY_R
                                                , -srate/rateY * 0.000050  * XYSLIDER_getXValue(comp_XYSlider_1)
                                                  -chorusWidth * XYSLIDER_getXValue(comp_XYSlider_1) );
        //============================================================
        
    ):( // FLANGER MODE
        //============================================================
        rateX= slider1;
        valueX = 0.5 + sin( (2*$pi* rateX * timeX)/srate)/2 ;
        timeX +=1;(timeX>=srate/rateX)?( timeX=0;);
        //============================================================
        rateY = slider2;
        valueY = 0.55 + sin( (2*$pi* rateY * timeY)/srate)/2*0.9;
        timeY +=1;(timeY>=srate/rateY)?( timeY=0;);
        //============================================================
        
        //============================================================
        CURSOLBUFFER_push( delay_ARRAY_L,spl0 +delay_L*slider4*0.8 );    
        CURSOLBUFFER_push( delay_ARRAY_R,spl1 +delay_R*slider4*0.8 );  
        
        //============================================================
        XYSLIDER_setXValue(comp_XYSlider_1,valueX,false);
        XYSLIDER_setYValue(comp_XYSlider_1,valueY,false);
        //============================================================
        
        chorusWidth = srate* ( 0.002 * XYSLIDER_getYValue(comp_XYSlider_1) );
        //============================================================
        delay_L = CURSOLBUFFER_getOffsettedValue( delay_ARRAY_L
                                                , -chorusWidth * XYSLIDER_getXValue(comp_XYSlider_1) );
        delay_R = CURSOLBUFFER_getOffsettedValue( delay_ARRAY_R
                                                , -chorusWidth * XYSLIDER_getXValue(comp_XYSlider_1) );
        //============================================================
    );
    //================================================================
    spl0 = spl0 *(1-slider5) + (spl0 + delay_L ) * (slider5) ;
    spl1 = spl1 *(1-slider5) + (spl1 + delay_R ) * (slider5) ;
    //================================================================

@gfx 200 400
//====================================================================
    // direct draw background to
    //================================================================
    drawBackGrond_color(5,0,60);
    drawSinWaveCircle(100,0.8,1,0.0043);
    //================================================================

    // canvase test
    //================================================================
    drawWaveBufferToCanvas(canvas_WAVE_L
                          ,f_max_L
                          ,f_min_L
                          ,5
                          ,0.3
                          ,1
                          ,80);

    drawWaveBufferToCanvas(canvas_WAVE_R
                          ,f_max_R
                          ,f_min_R
                          ,5
                          ,0.4
                          ,1
                          ,0);
    //================================================================
    gfx_a =0.6;
    CANVAS_blitImage4(canvas_WAVE_R,1,0);
    CANVAS_blitImage4(canvas_WAVE_L,1,0);
    gfx_a =1;
    //================================================================
    // final background
    //================================================================
    drawDotGrid(16,16,0.6);
    //================================================================
   
    // for debug
    //================================================================
    DBGMESSAGE_drawAllMessage(DBG);
    //================================================================
    
    // for particle 
    PARTICLE_CONTROLLER_update ( PARTICLE_controller );
    //================================================================
    ( APP_isMouseButtonHoldingPress(app_ID)  ==true) ?      
    (
        PARTICLE_CONTROLLER_addParticleType1(PARTICLE_controller);
        0;
    );
    //================================================================
    PARTICLE_CONTROLLER_addParticleType3_XY (PARTICLE_controller
                                            ,XYSLIDER_getCircleAreaCX(comp_XYSlider_1)
                                            ,XYSLIDER_getCircleAreaCY(comp_XYSlider_1)
                                            ,false
                                            );
    //================================================================

    // App update. check and compare with last event state.(resize or mouse)
    //================================================================
    APP_update(app_ID);
    
    //================================================================
    ( mouse_cap & 64 ==64 && lastCAP != mouse_cap )?
    (
        DBG_toggle(DBG);
    );
    lastCAP = mouse_cap;
    //================================================================
    ( APP_isMouseButtonPressed(app_ID)  ==true) ?
    ( 0;);
    
    ( APP_isMouseButtonReleased(app_ID) ==true) ?
    ( 0;);
    //================================================================
    
    
    // alignment position when resized.
    //================================================================
    ( APP_isWindowResized(app_ID) ==true) ?
    (
        RECTANGLE_copyTo      ( canvas_WAVE_L,app_ID);
        RECTANGLE_copyTo      ( canvas_WAVE_R,app_ID);
        CANVAS_recreateCanvas ( canvas_WAVE_L ); 
        CANVAS_recreateCanvas ( canvas_WAVE_R );
        //============================================================
        RECTANGLE_copyTo      ( layer_001 ,app_ID);  // layer resize 
        //============================================================
    );
    //================================================================

    //================================================================
    ( LAYER_isAreaResized(layer_001 ) ==true)   ?
    (
        RECTANGLE_copyTo         (comp_Border ,layer_001 );
        RECTANGLE_cropFromTopP   (comp_Border ,0.025);
        //============================================================
        RECTANGLE_copyTo         (comp_XYSlider_1,layer_001 );
        RECTANGLE_reduceP        (comp_XYSlider_1,0.1,0.125);
        //============================================================
        RECTANGLE_copyTo         (comp_PHASER_ModeButton,layer_001 );
        RECTANGLE_cropFromTopP   (comp_PHASER_ModeButton,0.06);
        //RECTANGLE_cropFromRightP   (comp_PHASER_ModeButton,0.3);
    );
    //================================================================
    
    (BUTTON_isON(comp_PHASER_ModeButton)==true)?
    (
        COMPONENT_setName(comp_PHASER_ModeButton,"PHASER MODE ");
    ):
    (
        COMPONENT_setName(comp_PHASER_ModeButton,"FLANGER MODE");
    );
    //================================================================
    
    //================================================================
    // if animation
    //================================================================
    COMPONENT_setComponentAlpha(comp_Border ,abs(sin($pi*2*mod*2)));
    mod += 0.01;(mod > 1 )?(mod=0;);
    //================================================================
    //RECTANGLE_setX( layer_001 ,40*sin($pi*2*mod));
    
    //================================================================
    // plugin Title Str
    //================================================================
    RECTANGLE_drawBottomRightText( app_ID,"XY Flanger");
    //================================================================

//====================================================================
// 続



