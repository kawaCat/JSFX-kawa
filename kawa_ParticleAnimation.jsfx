//====================================================================
desc:_kawa Particle Animation
//====================================================================

// imports
//====================================================================
import kawa_ALL.jsfx-inc
//====================================================================

//====================================================================
// sliders //( this app lib need Continuous number)
//--------------------------------------------------------------------
//slider1:0.25<0.0,1>parameter1
slider1:0 <0,1,>-RECT_ON
slider2:1 <0,1,>-CIRCLE_ON
slider3:0 <0,1,>-HEX_ON
slider4:0 <0,1,>-TRI_ON
slider5:0 <0,1,>-STAR_ON
//====================================================================

in_pin: left input
in_pin: right input
out_pin:left output
out_pin:right output
//====================================================================

@init
//====================================================================
    //create APP ID
    //================================================================
    app_ID = APP_create();
    //================================================================

    //create Layer ID
    //================================================================
    layer_001  = LAYER_create("LAYER01");
    //================================================================

    //create Component and add to layer 1 .
    //================================================================
    comp_Border1  = COMPONENT_create("TEST");
    comp_Border2 = COMPONENT_create("TEST2");
    //----------------------------------------------------------------
    comp_BUTTON_01 = BUTTON_create("REC");
    comp_BUTTON_02 = BUTTON_create("CIR");
    comp_BUTTON_03 = BUTTON_create("HEX");
    comp_BUTTON_04 = BUTTON_create("TRI");
    comp_BUTTON_05 = BUTTON_create("STA");
    COMPONENT_setSliderIndex(comp_BUTTON_01,1);
    COMPONENT_setSliderIndex(comp_BUTTON_02,2);
    COMPONENT_setSliderIndex(comp_BUTTON_03,3);
    COMPONENT_setSliderIndex(comp_BUTTON_04,4);
    COMPONENT_setSliderIndex(comp_BUTTON_05,5);
    //----------------------------------------------------------------
    BUTTON_setOnTextPostFix (comp_BUTTON_01,"");
    BUTTON_setOffTextPostFix(comp_BUTTON_01,""); 
    BUTTON_setOnTextPostFix (comp_BUTTON_02,"");
    BUTTON_setOffTextPostFix(comp_BUTTON_02,""); 
    BUTTON_setOnTextPostFix (comp_BUTTON_03,"");
    BUTTON_setOffTextPostFix(comp_BUTTON_03,""); 
    BUTTON_setOnTextPostFix (comp_BUTTON_04,"");
    BUTTON_setOffTextPostFix(comp_BUTTON_04,""); 
    BUTTON_setOnTextPostFix (comp_BUTTON_05,"");
    BUTTON_setOffTextPostFix(comp_BUTTON_05,""); 
    //----------------------------------------------------------------
    LAYER_addChildComponent(layer_001  , comp_BUTTON_01);
    LAYER_addChildComponent(layer_001  , comp_BUTTON_02);
    LAYER_addChildComponent(layer_001  , comp_BUTTON_03);
    LAYER_addChildComponent(layer_001  , comp_BUTTON_04);
    LAYER_addChildComponent(layer_001  , comp_BUTTON_05);
    //----------------------------------------------------------------
    LAYER_addChildComponent(layer_001  , comp_Border1);
    LAYER_addChildComponent(layer_001  , comp_Border2);
    //================================================================

    // layer add to app
    //================================================================
    APP_addChildComponent(app_ID,layer_001 );
    //================================================================
    LAYER_setActive(layer_001 ,true);
    //================================================================

    // canvase test
    //================================================================
    CANVS_WAVE_L = CANVAS_create(gfx_w,gfx_h);
    CANVS_WAVE_R = CANVAS_create(gfx_w,gfx_h);
    //================================================================
    
    PARTICLE_controller = PARTICLE_CONTROLLER_create();
    //================================================================
    particle_type = PARTICE_DRAW_TYPE_CIRCLE;
    
@slider
//====================================================================
    COMPONENT_setValue(comp_BUTTON_01,slider1,false);
    COMPONENT_setValue(comp_BUTTON_02,slider2,false);
    COMPONENT_setValue(comp_BUTTON_03,slider3,false);
    COMPONENT_setValue(comp_BUTTON_04,slider4,false);
    COMPONENT_setValue(comp_BUTTON_05,slider5,false);
    //================================================================
    APP_SliderChanged(app_ID); // notify for update lastValue
    //================================================================
@block
//====================================================================
    f_max_L = 0;f_min_L = 0;
    f_max_R = 0;f_min_R = 0;
    //================================================================
   

@sample
//====================================================================
    f_max_L = max(f_max_L,spl0);
    f_min_L = min(f_min_L,spl0);
    f_max_R = max(f_max_R,spl1);
    f_min_R = min(f_min_R,spl1);

@gfx 200 400
//====================================================================

    // direct draw background to
    //================================================================
    drawBackGrond_color( 10, 120 , 12*4);
    drawSinWaveCircle(100,0.8,1,0.0043);
    drawSinWaveCircle(100,0.8,1,0.0043);
    //================================================================
    
    // canvase test
    //================================================================
    drawWaveBufferToCanvas(CANVS_WAVE_L
                              ,f_max_L
                              ,f_min_L
                              ,1
                              ,0.5
                              ,1
                              ,80);
    //================================================================    
    drawWaveBufferToCanvas(CANVS_WAVE_R
                              ,f_max_R
                              ,f_min_R
                              ,1
                              ,0.6
                              ,1
                              ,0);
    //================================================================
    gfx_a =0.6;
    CANVAS_blitImage4(CANVS_WAVE_R,1,0);
    CANVAS_blitImage4(CANVS_WAVE_L,1,0);
    gfx_a =1;
    //================================================================
    // final background
    //================================================================
    drawDotGrid(20,20,0.04);
    //================================================================


    // for debug
    //================================================================
    DBGMESSAGE_drawAllMessage(DBG);
    //================================================================

    // for particle 
    PARTICLE_CONTROLLER_update ( PARTICLE_controller );
    //================================================================
    //( APP_isMouseButtonHoldingPress(app_ID)  ==true) ?      
    //( APP_isMouseButtonPressed(app_ID)  ==true) ?
    (true)?
    (
        (   BUTTON_isON(comp_BUTTON_01) == true 
         || BUTTON_isON(comp_BUTTON_02) == true 
         || BUTTON_isON(comp_BUTTON_03) == true 
         || BUTTON_isON(comp_BUTTON_04) == true 
         || BUTTON_isON(comp_BUTTON_05) == true 
        ) ?
        (
            //========================================================
            PARTICLE_CONTROLLER_addParticleType4(PARTICLE_controller,particle_type);
        );
        //============================================================
    );
    //================================================================
    ( COMPONENT_isValueChanged( comp_BUTTON_01 )==true)?
    (   
        particle_type = PARTICE_DRAW_TYPE_RECT;
        BUTTON_OFF( comp_BUTTON_02,true);
        BUTTON_OFF( comp_BUTTON_03,true);
        BUTTON_OFF( comp_BUTTON_04,true);
        BUTTON_OFF( comp_BUTTON_05,true);
        //============================================================
    ):( COMPONENT_isValueChanged( comp_BUTTON_02 )==true)?
    (
        particle_type = PARTICE_DRAW_TYPE_CIRCLE;
        BUTTON_OFF( comp_BUTTON_01,true);
        BUTTON_OFF( comp_BUTTON_03,true);
        BUTTON_OFF( comp_BUTTON_04,true);
        BUTTON_OFF( comp_BUTTON_05,true);
        //============================================================
    ):( COMPONENT_isValueChanged( comp_BUTTON_03 )==true)?
    (
        particle_type = PARTICE_DRAW_TYPE_HEX;
        BUTTON_OFF( comp_BUTTON_01,true);
        BUTTON_OFF( comp_BUTTON_02,true);
        BUTTON_OFF( comp_BUTTON_04,true);
        BUTTON_OFF( comp_BUTTON_05,true);
        //============================================================
    ):(COMPONENT_isValueChanged( comp_BUTTON_04 )==true)?
    (
        particle_type = PARTICE_DRAW_TYPE_TRI;
        BUTTON_OFF( comp_BUTTON_01,true);
        BUTTON_OFF( comp_BUTTON_02,true);
        BUTTON_OFF( comp_BUTTON_03,true);
        BUTTON_OFF( comp_BUTTON_05,true);
        //============================================================
    ):( COMPONENT_isValueChanged( comp_BUTTON_05 )==true)?
    (
        particle_type = PARTICE_DRAW_TYPE_STAR;
        BUTTON_OFF( comp_BUTTON_01,true);
        BUTTON_OFF( comp_BUTTON_02,true);
        BUTTON_OFF( comp_BUTTON_03,true);
        BUTTON_OFF( comp_BUTTON_04,true);
        //============================================================
    );
    //================================================================
    
    
    //================================================================
    (time_precise() -lastPTime_  > 0.25)?
    (
        PARTICLE_CONTROLLER_addParticleType2_XY (PARTICLE_controller
                                                ,gfx_w/2
                                                ,gfx_h/2
                                                ,true
                                               );
       lastPTime_ = time_precise();
    );
    //================================================================


    // App update. check and compare with last event state.(resize or mouse)
    //================================================================
    APP_update(app_ID);
  
    //================================================================
    ( mouse_cap & 64 ==64 && lastCAP != mouse_cap )?
    (
        DBG_toggle(DBG);
    );
    //================================================================
    lastCAP = mouse_cap;
    //================================================================
    
    // alignment position when resized.
    //================================================================
    (    APP_isWindowResized(app_ID) ==true
      && APP_isGFX_Enable(app_ID) ==true ) ?
    (
        //============================================================
        RECTANGLE_copyTo      ( CANVS_WAVE_L,app_ID);
        RECTANGLE_copyTo      ( CANVS_WAVE_R,app_ID);
        CANVAS_recreateCanvas ( CANVS_WAVE_L ); 
        CANVAS_recreateCanvas ( CANVS_WAVE_R );
        //============================================================
        RECTANGLE_copyTo      ( layer_001 ,app_ID);  // layer resize 
        RECTANGLE_copyTo      ( LAYER_002,app_ID);  // layer resize 
        //============================================================
    );
    //================================================================

    //================================================================
    ( LAYER_isAreaResized(layer_001 ) ==true)   ?
    (
        //============================================================
        RECTANGLE_copyTo         (comp_Border1,layer_001 );
        RECTANGLE_cropFromTopP   (comp_Border1,0.025);
        //============================================================
        RECTANGLE_copyTo         (comp_Border2,layer_001 );
        RECTANGLE_cropFromBottomP(comp_Border2,0.025);
        //============================================================
        RECTANGLE_copyTo         ( comp_BUTTON_01,layer_001 );
        RECTANGLE_removeFromTop  ( comp_BUTTON_01,RECTANGLE_getY2(comp_Border1));
        RECTANGLE_cropFromTopP   ( comp_BUTTON_01,0.1);
        RECTANGLE_cropFromLeftP  ( comp_BUTTON_01,1/5);
        //============================================================
        RECTANGLE_copyTo         ( comp_BUTTON_02,comp_BUTTON_01);
        RECTANGLE_move           ( comp_BUTTON_02,RECTANGLE_getWidth(comp_BUTTON_02),0);
        //============================================================
        RECTANGLE_copyTo         ( comp_BUTTON_03,comp_BUTTON_02);
        RECTANGLE_move           ( comp_BUTTON_03,RECTANGLE_getWidth(comp_BUTTON_03),0);
        //============================================================
        RECTANGLE_copyTo         ( comp_BUTTON_04,comp_BUTTON_03);
        RECTANGLE_move           ( comp_BUTTON_04,RECTANGLE_getWidth(comp_BUTTON_04),0);
        //============================================================
        RECTANGLE_copyTo         ( comp_BUTTON_05,comp_BUTTON_04);
        RECTANGLE_move           ( comp_BUTTON_05,RECTANGLE_getWidth(comp_BUTTON_05),0);
        //============================================================
        RECTANGLE_reduce( comp_BUTTON_01,3,3);
        RECTANGLE_reduce( comp_BUTTON_02,3,3);
        RECTANGLE_reduce( comp_BUTTON_03,3,3);
        RECTANGLE_reduce( comp_BUTTON_04,3,3);
        RECTANGLE_reduce( comp_BUTTON_05,3,3);
        //============================================================
    );
    //================================================================


    //================================================================

    // if animation
    //================================================================
    COMPONENT_setComponentAlpha(comp_Border1,abs(sin($pi*2*mod*2)));
    mod += 0.01;(mod > 1 )?(mod=0;);
    //================================================================

    // plugin Title Str
    //================================================================
    RECTANGLE_drawBottomRightText( app_ID,"kawa Particle TEST");
    //================================================================
    
    
//====================================================================
// 続
