desc:kawa Particle Animation 
slider1:0 <0,1,>-RECT_ON 
slider2:1 <0,1,>-CIRCLE_ON 
slider3:0 <0,1,>-HEX_ON 
slider4:0 <0,1,>-TRI_ON 
slider5:0 <0,1,>-STAR_ON 
in_pin: left input 
in_pin: right input 
out_pin:left output 
out_pin:right output 
@init 
STATICE_BUILD_DATE = "2016/12/26"; 
true = 1; 
false = 0; 
STATIC_MASTER_BUFF = 3000; 
STATIC_MASTER_BUFF_ID = 0; 
STATIC_MAP_BUFF_START = 200000 ; 
STATIC_ARRAY_BUFF_START = 1000000; 
STATIC_CIRCLE_BUFF_START = 4000000; 
STATIC_TEMP_BUFFER = 8380000 -10000 ; 
STATIC_TEMP_STRING_START_SLOT_NUM_START = 900; 
STATIC_TEMP_STRING_START_SLOT_NUM = STATIC_TEMP_STRING_START_SLOT_NUM_START; 
STATIC_CANVAS_SLOT_CURSOL = 1; 
STATIC_CLEAR_CANVAS_SLOT = 126; 
STATIC_MASTER_CANVAS_SLOT = 127; 
STATIC_ARRAY_BUFF = STATIC_ARRAY_BUFF_START; 
STATIC_ARRAY_BUFF_ID = 0; 
STATIC_CIRCLE_BUFF = STATIC_CIRCLE_BUFF_START; 
STATIC_CIRCLE_BUFF_ID = 0; 
STATIC_MAP_BUFF = STATIC_MAP_BUFF_START; 
STATIC_MAP_BUFF_ID = 0; 
function degreeToRadian (degree)local( out )(out=(degree*$pi)/180;out;); 
function radianToDegree (radian)((radian*180)/$pi;); 
function rad(degree) ( degreeToRadian ( degree);); 
function deg(radian) ( radianToDegree ( radian);); 
function inOutCubic(time_a) local (t,out) 
( 
 t = time_a * 2; 
 ( t < 1 )? 
 ( 
 out = 0.5 * t * t * t ; 
 ):( 
 t = t - 2; 
 out = 0.5 * (t * t * t + 2) 
 ); 
 out; 
); 
function get_float_from_string(str) 
( 
 matchi("*?-*?%{float_value}f*?", str) ? ( 
 -float_value; 
 ) : ( 
 matchi("*?%{float_value}f*?", str) ? 
 ( 
 float_value; 
 ); 
 ); 
); 
function _rotPoint_2(x_,y_,ox,oy,AngleRadian_)local(lx,ly,px,py) 
( 
 lx = x_ -ox; 
 ly = y_ -oy; 
 px = lx * cos(AngleRadian_) - ly *sin(AngleRadian_); 
 py = lx * sin(AngleRadian_) + ly *cos(AngleRadian_); 
 this.x = ox +px; 
 this.y = oy +py; 
); 
function rotPoint_X(x_,y_,ox,oy,AngleRadian_)local(lx,ly,px,py,out) 
( 
 lx = x_ -ox; 
 ly = y_ -oy; 
 px = lx * cos(AngleRadian_) - ly *sin(AngleRadian_); 
 out = ox +px; 
 out; 
); 
function rotPoint_Y(x_,y_,ox,oy,AngleRadian_)local(lx,ly,px,py,out) 
( 
 lx = x_ -ox; 
 ly = y_ -oy; 
 py = lx * sin(AngleRadian_) + ly *cos(AngleRadian_); 
 out = oy +py;; 
 out; 
); 
DEFINE_MIN_DB = -96.0; 
DEFINE_MIN_DB_VALUE = (10 ^ (DEFINE_MIN_DB *0.05 )); 
function valueToDecivel( value ) local ( out ) 
( 
 ( value < DEFINE_MIN_DB_VALUE)? 
 ( 
 out = DEFINE_MIN_DB; 
 ):( 
 out = log10(value) *20; 
 ); 
 out; 
); 
function decivelToValue( db ) local ( out ) 
( 
 out = (10.0 ^ (db *0.05 )); 
 ( out < DEFINE_MIN_DB_VALUE ) ? ( out = DEFINE_MIN_DB_VALUE; ); 
 out; 
); 
function getManhattanDist(x1,y1,x2,y2)local(distance) 
( 
 distance =abs(x1 -x2) + abs(y1 -y2); 
 distance; 
); 
function getEuclideanDist(x1,y1,x2,y2)local(horizDistance,vertDistance,distance) 
( 
 horizDistance =abs(x1 - x2); 
 vertDistance =abs(y1 - y2); 
 distance = sqrt( (horizDistance ^ 2) + (vertDistance ^ 2) ); 
 distance; 
); 
function getChebyshevDist(x1,y1,x2,y2)local (distHoriz,distVert,distanceOut) 
( 
 distHoriz = abs(x1 - x2); 
 distVert = abs(y1 - y2); 
 ( distHoriz > distVert) ? ( 
 distanceOut = distHoriz; 
 ):( 
 distanceOut= distVert; 
 ); 
 distanceOut; 
); 
function HSBtoRGB(hue, saturation , value) 
 local ( r,g,b,h,f,v,p,q,t) 
( 
 ( hue > 360) ? ( hue = hue % 360;) 
 :( hue < 0 ) ? ( hue = hue % 360 ;); 
 saturation = min ( max(saturation,0),1); 
 v = floor( 255 * value); 
 v = min ( max(v,0),255); 
 (saturation == 0)? 
 ( 
 r = v ; g = v; b = v; 
 ):( 
 h = floor( hue / 60); 
 f = hue / 60-h; 
 p = floor( v * (1-saturation)); 
 p = min ( max(p,0),255); 
 q = floor( v * (1-f * saturation)); 
 q = min ( max(q,0),255); 
 t = floor( v * (1-(1-f) * saturation)); 
 t = min ( max(t,0),255); 
 (h==0)?(r=v;g=t;b=p;) 
 :(h==1)?(r=q;g=v;b=p;) 
 :(h==2)?(r=p;g=v;b=t;) 
 :(h==3)?(r=p;g=q;b=v;) 
 :(h==4)?(r=t;g=p;b=v;) 
 :(h==5)?(r=v;g=p;b=q;) 
 :( r=v;g=t;b=p;); 
 ); 
 this.r = r; 
 this.g = g; 
 this.b = b; 
); 
function _stringCat(str1,str2) local (tempstr) 
( 
 tempstr =#; 
 sprintf(tempstr,""); 
 strcat(tempstr,str1); 
 strcat(tempstr,":"); 
 strcat(tempstr,str2); 
 tempstr; 
); 
function stringCat(str1,str2) local (tempstr) 
( 
 tempstr =#; 
 sprintf(tempstr,_stringCat(str1,str2)); 
 tempstr; 
); 
function stringCompareFromNum(strNum1,strNum2) local (out,strSlot1_,strSlot2_) 
( 
 strSlot1_ = #; 
 strSlot2_ = #; 
 sprintf(strSlot1_,"%s", strNum1); 
 sprintf(strSlot2_,"%s", strNum2); 
 out = strcmp(strSlot1_,strSlot2_) ; 
 out; 
); 
function STRUCT_getStructType( SRC_STRUCT_ID) ( STATIC_MASTER_BUFF[SRC_STRUCT_ID+0]; ); 
function STRUCT_getElementNum(SRC_STRUCT_ID) ( STATIC_MASTER_BUFF[SRC_STRUCT_ID+1]; ); 
function STRUCT_copyTo(destSTRUCT_ID,srcSTRUCT_ID) local (elementNum,count_1) 
( 
 elementNum = STRUCT_getElementNum(srcSTRUCT_ID); 
 count_1 =0; 
 while ( count_1 <= elementNum ) 
 ( 
 STATIC_MASTER_BUFF[destSTRUCT_ID+count_1] = STATIC_MASTER_BUFF[srcSTRUCT_ID+count_1]; 
 count_1 += 1; 
 ); 
); 
function STRUCT_duplicateInstance(SRC_STRUCT_ID) local ( DEST_ID ,count,elementNum,count_1) 
( 
 DEST_ID = STATIC_MASTER_BUFF_ID; 
 elementNum = STRUCT_getElementNum(SRC_STRUCT_ID); 
 count_1 =0; 
 while ( count_1 <= elementNum ) 
 ( 
 STATIC_MASTER_BUFF[DEST_ID+count_1] = STATIC_MASTER_BUFF[SRC_STRUCT_ID+count_1]; 
 count_1 += 1; 
 ); 
 STATIC_MASTER_BUFF_ID += elementNum +1; 
 DEST_ID; 
); 
function STRUCT_Clone(SRC_STRCUT_ID) local (out) 
( 
 out = STRUCT_duplicateInstance(SRC_STRCUT_ID); 
 out; 
); 
function getBezierPointQB_X(time_,x1,y1,bX,bY,x2,y2) local (tp,xout) 
( 
 tp = 1 - time_; 
 xout = time_*time_*x2 + 2*time_*tp*bX + tp*tp*x1; 
 xout; 
); 
function getBezierPointQB_Y(time_,x1,y1,bX,bY,x2,y2) local (tp,yout) 
( 
 tp = 1 - time_; 
 yout = time_*time_*y2 + 2*time_*tp*bY + tp*tp*y1; 
 yout; 
); 
function getBezierAngleQB(t,x1,y1,bX,bY,x2,y2) local (tp,dx,dy,angleRad) 
( 
 tp = 1 - t; 
 dx = 2*(t*(x2-bX)+tp*(bX-x1)); 
 dy = 2*(t*(y2-bY)+tp*(bY-y1)); 
 angleRad = atan2(dy,dx); 
 angleRad; 
); 
function getBezierPointCB_X(t,x1,y1,bX1,bY1,bX2,bY2,x2,y2) local (tp,xOut) 
( 
 tp = 1 - t; 
 xOut = t*t*t*x2 + 3*t*t*tp*bX2 + 3*t*tp*tp*bX1 + tp*tp*tp*x1; 
 xOut; 
); 
function getBezierPointCB_Y(t,x1,y1,bX1,bY1,bX2,bY2,x2,y2) local (tp,yOut) 
( 
 tp = 1 - t; 
 yOut = t*t*t*y2 + 3*t*t*tp*bY2 + 3*t*tp*tp*bY1 + tp*tp*tp*y1; 
 yOut; 
); 
function getBezierAngleCB(t,x1,y1,bX1,bY1,bX2,bY2,x2,y2) local (tp,dx,dy,angleRad) 
( 
 tp = 1 - t; 
 dx = 3*(t*t*(x2-bX2)+2*t*tp*(bX2-bX1)+tp*tp*(bX1-x1)); 
 dy = 3*(t*t*(y2-bY2)+2*t*tp*(bY2-bY1)+tp*tp*(bY1-y1)); 
 angleRad = atan2(dy,dx); 
 angleRad; 
); 
function singlepole(in,target,coeff) 
( 
 in*coeff + target*(1-coeff); 
); 
function DELTATIME_create()local(DELTATIME_ID) 
( 
 DELTATIME_ID = STATIC_MASTER_BUFF_ID; 
 STATIC_MASTER_BUFF[DELTATIME_ID] = "DELTATIME"; 
 STATIC_MASTER_BUFF[DELTATIME_ID+1] = 5; 
 STATIC_MASTER_BUFF[DELTATIME_ID+2] = 0.0; 
 STATIC_MASTER_BUFF[DELTATIME_ID+3] = 0.0; 
 STATIC_MASTER_BUFF[DELTATIME_ID+4] = time_precise()/1000; 
 STATIC_MASTER_BUFF[DELTATIME_ID+5] = STATIC_MASTER_BUFF[DELTATIME_ID+1]; 
 STATIC_MASTER_BUFF_ID +=STRUCT_getElementNum(DELTATIME_ID)+1; 
 DELTATIME_ID; 
); 
function _DELTATIME_getElementNum(DELTATIME_ID) ( STATIC_MASTER_BUFF[DELTATIME_ID + 5];); 
function DELTATIME_getDeltaTime(DELTATIME_ID) ( STATIC_MASTER_BUFF[DELTATIME_ID + 3]; ); 
function DELTATIME_getLastTime (DELTATIME_ID) ( STATIC_MASTER_BUFF[DELTATIME_ID + 4];); 
function DELTATIME_setLastTime (DELTATIME_ID,t) ( STATIC_MASTER_BUFF[DELTATIME_ID + 4]=t;); 
function _DELTATIME_round(newTime) local (out) 
( 
 out = newTime; 
 (out > 1.0 )?(out =0.0); 
 (out < 0.0 )?(out =1.0); 
 out; 
); 
function _DELTATIME_addDeltaTime(DELTATIME_ID,t) local (newDt) 
( 
 STATIC_MASTER_BUFF[ DELTATIME_ID + 3] +=t; 
 newDt =_DELTATIME_round(STATIC_MASTER_BUFF[ DELTATIME_ID + 3]); 
 STATIC_MASTER_BUFF[ DELTATIME_ID + 3] = newDt; 
); 
function DELTATIME_stepByTime(DELTATIME_ID,speedDiv_) local (lastTime,time_p,distance,dt) 
( 
 time_p =time_precise(); 
 lastTime = DELTATIME_getLastTime(DELTATIME_ID); 
 distance = (time_p-lastTime); 
 _DELTATIME_addDeltaTime(DELTATIME_ID,(distance/speedDiv_)); 
 DELTATIME_setLastTime(DELTATIME_ID,time_p); 
); 
function DELTATIME_stepByValue(DELTATIME_ID,addValue) local (lastTime,time_p,distance,dt) 
( 
 _DELTATIME_addDeltaTime(DELTATIME_ID,addValue); 
); 
function DELTATIME_getDeltaTimeWithStepTime(DELTATIME_ID,speedDiv) local (dt) 
( 
 DELTATIME_stepByTime(DELTATIME_ID,speedDiv); 
 dt = DELTATIME_getDeltaTime(DELTATIME_ID); 
 dt; 
); 
function DELTATIME_getDeltaTimeWithStepValue(DELTATIME_ID,addValue) local (dt) 
( 
 DELTATIME_stepByValue(DELTATIME_ID,addValue); 
 dt = DELTATIME_getDeltaTime(DELTATIME_ID); 
 dt; 
); 
function createSinglePole() local ( SINGLEPOLE_id ) 
( 
 SINGLEPOLE_id = STATIC_MASTER_BUFF_ID; 
 STATIC_MASTER_BUFF[SINGLEPOLE_id] = "SINGLEPOLE"; 
 STATIC_MASTER_BUFF[SINGLEPOLE_id+1] = 6; 
 STATIC_MASTER_BUFF[SINGLEPOLE_id+2] = 0; 
 STATIC_MASTER_BUFF[SINGLEPOLE_id+3] = 0.0; 
 STATIC_MASTER_BUFF[SINGLEPOLE_id+4] = 0.0; 
 STATIC_MASTER_BUFF[SINGLEPOLE_id+5] = srate; 
 STATIC_MASTER_BUFF[SINGLEPOLE_id+6] = STATIC_MASTER_BUFF[SINGLEPOLE_id+1]; 
 STATIC_MASTER_BUFF[SINGLEPOLE_id+7] = 0.0; 
 STATIC_MASTER_BUFF_ID +=STRUCT_getElementNum(SINGLEPOLE_id)+1; 
 SINGLEPOLE_id; 
); 
function _SINGLEPOLE_getElementNum (SINGLEPOLE_id) ( STATIC_MASTER_BUFF[SINGLEPOLE_id + 6];); 
function SINGLEPOLE_getLastValue (SINGLEPOLE_id) ( STATIC_MASTER_BUFF[SINGLEPOLE_id+3] ;); 
function SINGLEPOLE_setLastValue (SINGLEPOLE_id,v) ( STATIC_MASTER_BUFF[SINGLEPOLE_id+3] =v;); 
function SINGLEPOLE_getSampleRate (SINGLEPOLE_id) ( STATIC_MASTER_BUFF[SINGLEPOLE_id+5] ;); 
function SINGLEPOLE_setSampleRate (SINGLEPOLE_id,v) ( STATIC_MASTER_BUFF[SINGLEPOLE_id+5] =v;); 
function SINGLEPOLE_getSmoozingCoeff (SINGLEPOLE_id) ( STATIC_MASTER_BUFF[SINGLEPOLE_id+4] ;); 
function _SINGLEPOLE_setSmoozingCoeff (SINGLEPOLE_id,v) ( STATIC_MASTER_BUFF[SINGLEPOLE_id+4] =v;); 
function _SINGLEPOLE_getlastInputValue (SINGLEPOLE_id) ( STATIC_MASTER_BUFF[SINGLEPOLE_id+7] ;); 
function _SINGLEPOLE_setlastInputValue (SINGLEPOLE_id,v) ( STATIC_MASTER_BUFF[SINGLEPOLE_id+7] =v;); 
function SINGLEPOLE_getSmoozingTime (SINGLEPOLE_id) ( STATIC_MASTER_BUFF[SINGLEPOLE_id+2] ;); 
function _SINGLEPOLE_calcurateCoeff(SINGLEPOLE_id ) 
 local (smoozingTime,newCoeff,sampleRate_) 
( 
 smoozingTime = SINGLEPOLE_getSmoozingTime(SINGLEPOLE_id); 
 sampleRate_ = SINGLEPOLE_getSampleRate(SINGLEPOLE_id); 
 newCoeff = exp(-1/(smoozingTime/1000*sampleRate_)); 
 _SINGLEPOLE_setSmoozingCoeff(SINGLEPOLE_id,newCoeff); 
 newCoeff; 
); 
function SINGLEPOLE_setSmoozingTime (SINGLEPOLE_id,v) 
( 
 STATIC_MASTER_BUFF[SINGLEPOLE_id+2] =v; 
 _SINGLEPOLE_calcurateCoeff(SINGLEPOLE_id ); 
); 
function SINGLEPOLE_isFinished(SINGLEPOLE_id) 
 local (out ,lastInValue,lastValue) 
( 
 out = false; 
 lastInValue = _SINGLEPOLE_getlastInputValue(SINGLEPOLE_id); 
 lastValue = SINGLEPOLE_getLastValue(SINGLEPOLE_id); 
 ( lastInValue == lastValue ) ? 
 ( 
 out = true; 
 ); 
 out; 
); 
function SINGLEPOLE_isActive(SINGLEPOLE_id) 
 local (out ,lastInValue,lastValue) 
( 
 out = false; 
 (SINGLEPOLE_isFinished(SINGLEPOLE_id) == false ) ? 
 ( 
 out = true; 
 ); 
 out; 
); 
function _SINGLEPOLE_singlepole(lastValue,newValue,coeff) 
( 
 lastValue*coeff + newValue*(1-coeff); 
); 
function SINGLEPOLE_getSmoozedValue( SINGLEPOLE_id,inValue) 
 local ( smoozingTime 
 , lastValue 
 , smoozingCoeff 
 , outValue 
 ) 
( 
 smoozingTime = SINGLEPOLE_getSmoozingTime(SINGLEPOLE_id); 
 lastValue = SINGLEPOLE_getLastValue(SINGLEPOLE_id); 
 smoozingCoeff = SINGLEPOLE_getSmoozingCoeff(SINGLEPOLE_id); 
 _SINGLEPOLE_setlastInputValue (SINGLEPOLE_id,inValue); 
 outValue = _SINGLEPOLE_singlepole( lastValue 
 , inValue 
 , smoozingCoeff ); 
 SINGLEPOLE_setLastValue(SINGLEPOLE_id,outValue); 
 outValue; 
); 
function ARRAY_create(maxSizeInt)local (ARRAY_ID,instanceNUM) local (maxSize) 
( 
 maxSize = maxSizeInt; 
 ARRAY_ID = STATIC_ARRAY_BUFF_ID; 
 STATIC_ARRAY_BUFF[ARRAY_ID] = "ARRAY" ; 
 STATIC_ARRAY_BUFF[ARRAY_ID+1] = 4 + maxSize ; 
 STATIC_ARRAY_BUFF[ARRAY_ID+2] = 0; 
 STATIC_ARRAY_BUFF[ARRAY_ID+3] = maxSize; 
 STATIC_ARRAY_BUFF[ARRAY_ID+4] = 0; 
 STATIC_ARRAY_BUFF_ID += 4 + maxSize +1; 
 ARRAY_ID; 
); 
function ARRAY_getBufferSize(ARRAY_ID) ( STATIC_ARRAY_BUFF[ARRAY_ID+2];); 
function ARRAY_getMaxBufferSize(ARRAY_ID) ( STATIC_ARRAY_BUFF[ARRAY_ID+3];); 
function ARRAY_getStartBufferPointer(ARRAY_ID) ( ARRAY_ID+ 4;); 
function ARRAY_getStartBufferPointerAbsolute(ARRAY_ID)( ARRAY_ID+ 4 +STATIC_ARRAY_BUFF_START;); 
function ARRAY_setBufferSize(ARRAY_ID,v) 
( 
 ( ARRAY_getMaxBufferSize(ARRAY_ID) < v) ?( 
 STATIC_ARRAY_BUFF[ARRAY_ID+2] = ARRAY_getMaxBufferSize(ARRAY_ID); 
 ):( 0 > v) ? ( 
 STATIC_ARRAY_BUFF[ARRAY_ID+2] = 0; 
 ):( 
 STATIC_ARRAY_BUFF[ARRAY_ID+2] = v; 
 ); 
); 
function ARRAY_getAt(ARRAY_ID,pos) local (out,bufferSize) 
( 
 bufferSize = ARRAY_getBufferSize (ARRAY_ID ); 
 ( bufferSize < pos 
 || pos < 0) ? 
 ( 
 out = 0; 
 ):( 
 out = STATIC_ARRAY_BUFF[ARRAY_getStartBufferPointer(ARRAY_ID)+pos]; 
 ); 
 out; 
); 
function ARRAY_clear(ARRAY_ID) 
( 
 ARRAY_setBufferSize(ARRAY_ID,0); 
); 
function ARRAY_changeValueAt(ARRAY_ID,pos,value) local (bufferSize) 
( 
 bufferSize = ARRAY_getBufferSize (ARRAY_ID ); 
 ( bufferSize < pos 
 || pos < 0) ? 
 ( 
 0; 
 ):( 
 STATIC_ARRAY_BUFF[ARRAY_getStartBufferPointer(ARRAY_ID)+pos] =value ; 
 ); 
); 
function ARRAY_setValueAt(ARRAY_ID,pos,value)( ARRAY_changeValueAt(ARRAY_ID,pos,value);); 
function ARRAY_getValueAt(ARRAY_ID,pos) ( ARRAY_getAt(ARRAY_ID,pos);); 
function ARRAY_insertAt(ARRAY_ID,pos,value)local(bufferSize) 
( 
 bufferSize = ARRAY_getBufferSize(ARRAY_ID); 
 ( bufferSize+1 < ARRAY_getMaxBufferSize(ARRAY_ID) 
 || pos >=0 )? 
 ( 
 ARRAY_setBufferSize(ARRAY_ID,ARRAY_getBufferSize(ARRAY_ID)+1); 
 memcpy( ARRAY_getStartBufferPointer(ARRAY_ID) + STATIC_ARRAY_BUFF_START +pos+1 
 , ARRAY_getStartBufferPointer(ARRAY_ID) + STATIC_ARRAY_BUFF_START +pos 
 , ARRAY_getMaxBufferSize(ARRAY_ID) -pos); 
 STATIC_ARRAY_BUFF[ARRAY_getStartBufferPointer(ARRAY_ID)+pos] = value; 
 ); 
 ARRAY_ID; 
); 
function ARRAY_push_back(ARRAY_ID,value) local(bufferSize) 
( 
 bufferSize = ARRAY_getBufferSize(ARRAY_ID); 
 ( bufferSize+1 < ARRAY_getMaxBufferSize(ARRAY_ID))? 
 ( 
 ARRAY_setBufferSize(ARRAY_ID,ARRAY_getBufferSize(ARRAY_ID)+1); 
 STATIC_ARRAY_BUFF[ARRAY_getStartBufferPointer(ARRAY_ID)+bufferSize] = value; 
 ); 
 ARRAY_ID; 
); 
function ARRAY_push_front(ARRAY_ID,value) local(bufferSize) 
( 
 bufferSize = ARRAY_getBufferSize(ARRAY_ID); 
 ( bufferSize+1 < ARRAY_getMaxBufferSize(ARRAY_ID))? 
 ( 
 ARRAY_setBufferSize(ARRAY_ID,ARRAY_getBufferSize(ARRAY_ID)+1); 
 memcpy( STATIC_ARRAY_BUFF_ID + STATIC_ARRAY_BUFF_START 
 , ARRAY_getStartBufferPointer(ARRAY_ID) + STATIC_ARRAY_BUFF_START 
 , ARRAY_getMaxBufferSize(ARRAY_ID) ); 
 memcpy( ARRAY_getStartBufferPointer(ARRAY_ID) + STATIC_ARRAY_BUFF_START +1 
 , ARRAY_getStartBufferPointer(ARRAY_ID) + STATIC_ARRAY_BUFF_START 
 , ARRAY_getMaxBufferSize(ARRAY_ID) -1); 
 STATIC_ARRAY_BUFF[ARRAY_getStartBufferPointer(ARRAY_ID)] = value; 
 ); 
 ARRAY_ID; 
); 
function ARRAY_removeAt(ARRAY_ID,pos)local (bufferSize) 
( 
 bufferSize = ARRAY_getBufferSize(ARRAY_ID); 
 (bufferSize >= 1 && (bufferSize >= pos) && pos >=0 )? 
 ( 
 memcpy( ARRAY_getStartBufferPointer(ARRAY_ID) +STATIC_ARRAY_BUFF_START + pos 
 , ARRAY_getStartBufferPointer(ARRAY_ID) +STATIC_ARRAY_BUFF_START + pos +1 
 , bufferSize-pos); 
 (ARRAY_getBufferSize(ARRAY_ID)-1 >0)? 
 ( 
 ARRAY_setBufferSize(ARRAY_ID,ARRAY_getBufferSize(ARRAY_ID)-1); 
 ); 
 ); 
 ARRAY_ID; 
); 
function CIRCLEBUFFER_create(MaxSizeInt)local (CIRCLEBUFFER_ID) 
( 
 CIRCLEBUFFER_ID = STATIC_CIRCLE_BUFF_ID; 
 STATIC_CIRCLE_BUFF[CIRCLEBUFFER_ID] ="CircleBuffer"; 
 STATIC_CIRCLE_BUFF[CIRCLEBUFFER_ID+1] = 3 +MaxSizeInt; 
 STATIC_CIRCLE_BUFF[CIRCLEBUFFER_ID+2] = MaxSizeInt; 
 STATIC_CIRCLE_BUFF[CIRCLEBUFFER_ID+3] = 0; 
 memset (STATIC_CIRCLE_BUFF[CIRCLEBUFFER_ID+3], 0,MaxSizeInt); 
 STATIC_CIRCLE_BUFF_ID += 3+ MaxSizeInt+1; 
 CIRCLEBUFFER_ID; 
); 
function CIRCLEBUFFER_getStartBufferPointerID(CIRCLEBUFFER_ID)(CIRCLEBUFFER_ID+3;); 
function CIRCLEBUFFER_getStartBufferPointerIDAbsolute(CIRCLEBUFFER_ID) 
( 
 CIRCLEBUFFER_ID+3+STATIC_CIRCLE_BUFF_START; 
); 
function CIRCLEBUFFER_getBufferSize(CIRCLEBUFFER_ID)(STATIC_CIRCLE_BUFF[CIRCLEBUFFER_ID+2];); 
function CIRCLEBUFFER_setBufferSize(CIRCLEBUFFER_ID,sizeint) (STATIC_CIRCLE_BUFF[CIRCLEBUFFER_ID+2] = floor(sizeint);); 
function CIRCLEBUFFER_getValueFromPos(CIRCLEBUFFER_ID,cursolPos)local (bufSize,curPos_,out) 
( 
 bufSize = CIRCLEBUFFER_getBufferSize(CIRCLEBUFFER_ID); 
 curPos_ = cursolPos; 
 ( bufSize <= curPos_) ? (curPos_ = 0;); 
 STATIC_CIRCLE_BUFF[CIRCLEBUFFER_getStartBufferPointerID(CIRCLEBUFFER_ID)+ curPos_]; 
); 
function CIRCLEBUFFER_getAt(CIRCLEBUFFER_ID,cursolPos) 
( 
 CIRCLEBUFFER_getValueFromPos(CIRCLEBUFFER_ID,cursolPos); 
); 
function CIRCLEBUFFER_push_back(CIRCLEBUFFER_ID,value)local (bufSize,bufStartPointerID) 
( 
 bufSize = CIRCLEBUFFER_getBufferSize(CIRCLEBUFFER_ID); 
 bufStartPointerID = CIRCLEBUFFER_getStartBufferPointerID(CIRCLEBUFFER_ID); 
 memcpy( STATIC_CIRCLE_BUFF_ID + STATIC_CIRCLE_BUFF_START 
 , bufStartPointerID + STATIC_CIRCLE_BUFF_START+1 
 , bufSize); 
 memcpy( bufStartPointerID + STATIC_CIRCLE_BUFF_START 
 , STATIC_CIRCLE_BUFF_ID + STATIC_CIRCLE_BUFF_START 
 , bufSize); 
 STATIC_CIRCLE_BUFF[bufStartPointerID +bufSize] = value; 
 STATIC_CIRCLE_BUFF[bufStartPointerID +bufSize]; 
); 
function CIRCLEBUFFER_push_front(CIRCLEBUFFER_ID,value)local (bufSize,bufStartPointerID) 
( 
 bufSize = CIRCLEBUFFER_getBufferSize(CIRCLEBUFFER_ID); 
 bufStartPointerID = CIRCLEBUFFER_getStartBufferPointerID(CIRCLEBUFFER_ID); 
 memcpy( STATIC_CIRCLE_BUFF_ID + STATIC_CIRCLE_BUFF_START 
 , bufStartPointerID + STATIC_CIRCLE_BUFF_START 
 , bufSize); 
 memcpy( bufStartPointerID+1 + STATIC_CIRCLE_BUFF_START 
 , STATIC_CIRCLE_BUFF_ID + STATIC_CIRCLE_BUFF_START 
 , bufSize); 
 STATIC_CIRCLE_BUFF[bufStartPointerID] = value; 
 STATIC_CIRCLE_BUFF[bufStartPointerID]; 
); 
function CURSOLBUFFER_create (MaxSizeInt) local(CURSOLBUFFER_ID ) 
( 
 CURSOLBUFFER_ID = STATIC_CIRCLE_BUFF_ID; 
 STATIC_CIRCLE_BUFF[CURSOLBUFFER_ID] ="CIRCLEBUFFER_RAW"; 
 STATIC_CIRCLE_BUFF[CURSOLBUFFER_ID+1] = 5; 
 STATIC_CIRCLE_BUFF[CURSOLBUFFER_ID+2] = MaxSizeInt; 
 STATIC_CIRCLE_BUFF[CURSOLBUFFER_ID+3] = 0; 
 STATIC_CIRCLE_BUFF[CURSOLBUFFER_ID+4] = 0; 
 STATIC_CIRCLE_BUFF[CURSOLBUFFER_ID+5] = 0; 
 STATIC_CIRCLE_BUFF_ID += 5+ MaxSizeInt+1; 
 CURSOLBUFFER_ID; 
); 
function CURSOLBUFFER_getMaxSize(CIRCLEBUFFER_ID) (STATIC_CIRCLE_BUFF[CIRCLEBUFFER_ID+2];); 
function CURSOLBUFFER_getCursolPos(CIRCLEBUFFER_ID) (STATIC_CIRCLE_BUFF[CIRCLEBUFFER_ID+3];); 
function CURSOLBUFFER_setCursolPos(CIRCLEBUFFER_ID,v) (STATIC_CIRCLE_BUFF[CIRCLEBUFFER_ID+3]=floor(v)); 
function CURSOLBUFFER_getLastCursolPos(CIRCLEBUFFER_ID) (STATIC_CIRCLE_BUFF[CIRCLEBUFFER_ID+4]); 
function CURSOLBUFFER_setLastCursolPos(CIRCLEBUFFER_ID,v) (STATIC_CIRCLE_BUFF[CIRCLEBUFFER_ID+4]=floor(v)); 
function CURSOLBUFFER_getBufferPointer(CIRCLEBUFFER_ID) ( CIRCLEBUFFER_ID+5;); 
function CURSOLBUFFER_getBufferPointerAbs(CIRCLEBUFFER_ID) ( CIRCLEBUFFER_ID+5+STATIC_CIRCLE_BUFF_START;); 
function CURSOLBUFFER_stepCursolPos(CIRCLEBUFFER_ID) 
( 
 CURSOLBUFFER_setLastCursolPos(CIRCLEBUFFER_ID 
 ,CURSOLBUFFER_getCursolPos(CIRCLEBUFFER_ID) ) ; 
 CURSOLBUFFER_setCursolPos( CIRCLEBUFFER_ID 
 , CURSOLBUFFER_getCursolPos(CIRCLEBUFFER_ID) + 1 ); 
 ( CURSOLBUFFER_getCursolPos(CIRCLEBUFFER_ID) 
 >= CURSOLBUFFER_getMaxSize(CIRCLEBUFFER_ID) )? 
 ( 
 CURSOLBUFFER_setCursolPos( CIRCLEBUFFER_ID, 0 ); 
 ); 
); 
function CURSOLBUFFER_stepBackCursolPos(CIRCLEBUFFER_ID) 
( 
 CURSOLBUFFER_setLastCursolPos(CIRCLEBUFFER_ID 
 ,CURSOLBUFFER_getCursolPos(CIRCLEBUFFER_ID)); 
 CURSOLBUFFER_setCursolPos( CIRCLEBUFFER_ID 
 , CURSOLBUFFER_getCursolPos(CIRCLEBUFFER_ID) -1 
 ); 
 ( CURSOLBUFFER_getCursolPos(CIRCLEBUFFER_ID) < 0) ? 
 ( 
 CURSOLBUFFER_setCursolPos( CIRCLEBUFFER_ID 
 , CURSOLBUFFER_getMaxSize(CIRCLEBUFFER_ID)-1 ); 
 ); 
); 
function CURSOLBUFFER_getValueFromPos(CIRCLEBUFFER_ID,cursolPos) 
 local (bufSize,curPos_) 
( 
 bufSize = CURSOLBUFFER_getMaxSize(CIRCLEBUFFER_ID); 
 curPos_ = cursolPos; 
 ( bufSize < curPos_) ? (curPos_ = 0;); 
 ( curPos_ < 0) ? (curPos_ = 0;); 
 STATIC_CIRCLE_BUFF[CURSOLBUFFER_getBufferPointer(CIRCLEBUFFER_ID)+curPos_]; 
); 
function _CURSOLBUFFER_safeRoundPos(CIRCLEBUFFER_ID,pos ) 
 local (out,bufSize) 
( 
 bufSize = CURSOLBUFFER_getMaxSize(CIRCLEBUFFER_ID); 
 out = pos; 
 ( bufSize <= pos) ? (out -= bufSize;); 
 ( pos < 0 ) ? (out += bufSize;); 
 out; 
); 
function CURSOLBUFFER_getValueOffsetFromLastPushedPos(CIRCLEBUFFER_ID,offsetNum) 
 local (newpos) 
( 
 newpos = _CURSOLBUFFER_safeRoundPos( CIRCLEBUFFER_ID 
 , CURSOLBUFFER_getLastCursolPos(CIRCLEBUFFER_ID)+offsetNum) ; 
 STATIC_CIRCLE_BUFF[CURSOLBUFFER_getBufferPointer(CIRCLEBUFFER_ID)+newpos]; 
); 
function CURSOLBUFFER_getLastPushedValue( CIRCLEBUFFER_ID) 
( 
 CURSOLBUFFER_getValueFromPos(CIRCLEBUFFER_ID 
 ,CURSOLBUFFER_getLastCursolPos(CIRCLEBUFFER_ID)); 
); 
function CURSOLBUFFER_getAt(CIRCLEBUFFER_ID,cursolPos) 
( 
 CURSOLBUFFER_getValueFromPos(CIRCLEBUFFER_ID,cursolPos); 
); 
function CURSOLBUFFER_getValueWithOffset(CIRCLEBUFFER_ID,offsetPos) 
( 
 CURSOLBUFFER_getValueOffsetFromLastPushedPos(CIRCLEBUFFER_ID,offsetPos); 
); 
function CURSOLBUFFER_getOffsettedValue(CIRCLEBUFFER_ID,offsetPos) 
( 
 CURSOLBUFFER_getValueOffsetFromLastPushedPos(CIRCLEBUFFER_ID,offsetPos); 
); 
function CURSOLBUFFER_push(CIRCLEBUFFER_ID,v) 
 local (insertPos,bufferPointer) 
( 
 insertPos = CURSOLBUFFER_getCursolPos(CIRCLEBUFFER_ID); 
 STATIC_CIRCLE_BUFF [CURSOLBUFFER_getBufferPointer(CIRCLEBUFFER_ID)+insertPos] = v; 
 CURSOLBUFFER_stepCursolPos(CIRCLEBUFFER_ID); 
); 
function CURSOLBUFFER_pushAndBackStep(CIRCLEBUFFER_ID,v) 
 local (insertPos,bufferPointer) 
( 
 insertPos = CURSOLBUFFER_getCursolPos(CIRCLEBUFFER_ID); 
 CURSOLBUFFER_getBufferPointerAbs(CIRCLEBUFFER_ID)+ insertPos = v; 
 CURSOLBUFFER_stepBackCursolPos(CIRCLEBUFFER_ID); 
); 
function _CUR_dLinTerp( x1, x2, y1, y2, interPolationPos)local (denom,out,dx) 
( 
 denom = x2 - x1; 
 out = y1; 
 (denom == 0)? 
 ( 
 out = y1; 
 ):( 
 dx = (interPolationPos - x1)/(x2 - x1); 
 out= dx*y2 + (1-dx)*y1; 
 ); 
 out; 
); 
function CURSOLBUFFER_getOffsettedValueWithInterp(CIRCLEBUFFER_ID,delaySample) 
 local ( back 
 , bufSize 
 , counter 
 , index0 
 , index_1 
 , index1 
 , index2 
 , y_1 , y0, y1, y2 
 , x 
 , c0 , c1, c2, c3 
 , output 
 ) 
( 
 bufSize = CURSOLBUFFER_getMaxSize(CIRCLEBUFFER_ID); 
 counter = CURSOLBUFFER_getCursolPos(CIRCLEBUFFER_ID)-1; 
 back = counter-delaySample; 
 ( back < 0.0 )? 
 ( 
 back = bufSize + back; 
 ); 
 index0 = floor(back); 
 index_1 = index0-1; 
 index1 = index0+1; 
 index2 = index0+2; 
 index_1 = _CURSOLBUFFER_safeRoundPos(CIRCLEBUFFER_ID,index_1) ; 
 index1 = _CURSOLBUFFER_safeRoundPos(CIRCLEBUFFER_ID,index1) ; 
 index2 = _CURSOLBUFFER_safeRoundPos(CIRCLEBUFFER_ID,index2) ; 
 y_1 = CURSOLBUFFER_getValueFromPos(CIRCLEBUFFER_ID,index_1); 
 y0 = CURSOLBUFFER_getValueFromPos(CIRCLEBUFFER_ID,index0) ; 
 y1 = CURSOLBUFFER_getValueFromPos(CIRCLEBUFFER_ID,index1) ; 
 y2 = CURSOLBUFFER_getValueFromPos(CIRCLEBUFFER_ID,index2) ; 
 x = back-index0; 
 c0 = y0; 
 c1 = 0.5 * (y1-y_1); 
 c2 = y_1 - 2.5 * y0 + 2.0*y1 - 0.5*y2; 
 c3 = 0.5 * (y2-y_1) + 1.5*(y0-y1); 
 output =((c3*x+c2)*x+c1)*x+c0; 
 output; 
); 
function CURSOLBUFFER_getOffsettedValueWith3rdSplineInterp(CIRCLEBUFFER_ID,delaySample) 
 local ( out 
 , bufSize 
 , counter 
 , back 
 , index_0 
 , x 
 , p0_index,p1_index,p2_index,p3_index 
 , p0,p1,p2,p3 
 ) 
( 
 bufSize = CURSOLBUFFER_getMaxSize(CIRCLEBUFFER_ID); 
 counter = CURSOLBUFFER_getCursolPos(CIRCLEBUFFER_ID)-1; 
 back = counter-delaySample; 
 back = _CURSOLBUFFER_safeRoundPos(CIRCLEBUFFER_ID,back); 
 index_0 =floor( back ); 
 x = back - index_0; 
 p0_index = _CURSOLBUFFER_safeRoundPos(CIRCLEBUFFER_ID,(index_0-2)) ; 
 p1_index = _CURSOLBUFFER_safeRoundPos(CIRCLEBUFFER_ID,(index_0-1)) ; 
 p2_index = _CURSOLBUFFER_safeRoundPos(CIRCLEBUFFER_ID,(index_0)) ; 
 p3_index = _CURSOLBUFFER_safeRoundPos(CIRCLEBUFFER_ID,(index_0+1)) ; 
 L1 = CURSOLBUFFER_getValueFromPos(CIRCLEBUFFER_ID,p0_index); 
 L0 = CURSOLBUFFER_getValueFromPos(CIRCLEBUFFER_ID,p1_index); 
 H0 = CURSOLBUFFER_getValueFromPos(CIRCLEBUFFER_ID,p2_index); 
 H1 = CURSOLBUFFER_getValueFromPos(CIRCLEBUFFER_ID,p3_index); 
 out = L0 
 + 0.5 * 
 x*(H0-L1 + 
 x*(H0 + L0*(-2) + L1 + 
 x*( (H0 - L0)*9 + (L1 - H1)*3 + 
 x*((L0 - H0)*15 + (H1 - L1)*5 + 
 x*((H0 - L0)*6 + (L1 - H1)*2 ))))); 
 out; 
); 
function CURSOLBUFFER_getOffsettedValueWith5thSplineInterp(CIRCLEBUFFER_ID,delaySample) 
 local ( out 
 , bufSize 
 , counter 
 , back 
 , index_0 
 , x 
 , p0_index,p1_index,p2_index,p3_index,p4_index,p5_index 
 , p0,p1,p2,p3,p4,p5 
 ) 
( 
 bufSize = CURSOLBUFFER_getMaxSize(CIRCLEBUFFER_ID); 
 counter = CURSOLBUFFER_getCursolPos(CIRCLEBUFFER_ID)-1; 
 back = counter-delaySample; 
 ( back < 0.0 )? 
 ( 
 back = bufSize + back; 
 ); 
 index_0 =floor( back ); 
 x = back - index_0; 
 p0_index = _CURSOLBUFFER_safeRoundPos(CIRCLEBUFFER_ID,(index_0-2)) ; 
 p1_index = _CURSOLBUFFER_safeRoundPos(CIRCLEBUFFER_ID,(index_0-1)) ; 
 p2_index = _CURSOLBUFFER_safeRoundPos(CIRCLEBUFFER_ID,(index_0)) ; 
 p3_index = _CURSOLBUFFER_safeRoundPos(CIRCLEBUFFER_ID,(index_0+1)) ; 
 p4_index = _CURSOLBUFFER_safeRoundPos(CIRCLEBUFFER_ID,(index_0+2)) ; 
 p5_index = _CURSOLBUFFER_safeRoundPos(CIRCLEBUFFER_ID,(index_0+3)) ; 
 p0 = CURSOLBUFFER_getValueFromPos(CIRCLEBUFFER_ID,p0_index); 
 p1 = CURSOLBUFFER_getValueFromPos(CIRCLEBUFFER_ID,p1_index); 
 p2 = CURSOLBUFFER_getValueFromPos(CIRCLEBUFFER_ID,p2_index); 
 p3 = CURSOLBUFFER_getValueFromPos(CIRCLEBUFFER_ID,p3_index); 
 p4 = CURSOLBUFFER_getValueFromPos(CIRCLEBUFFER_ID,p4_index); 
 p5 = CURSOLBUFFER_getValueFromPos(CIRCLEBUFFER_ID,p5_index); 
 out = p2 + 0.04166666666*x*((p3-p1)*16.0+(p0-p4)*2.0 
 + x *((p3+p1)*16.0-p0-p2*30.0- p4 
 + x *(p3*66.0-p2*70.0-p4*33.0+p1*39.0+ p5*7.0- p0*9.0 
 + x *( p2*126.0-p3*124.0+p4*61.0-p1*64.0- p5*12.0+p0*13.0 
 + x *((p3-p2)*50.0+(p1-p4)*25.0+(p5-p0)*5.0))))); 
 out; 
); 
function MAP_ELEM_create(keyName,velue)local(MAP_ELEM_ID) 
( 
 MAP_ELEM_ID = STATIC_MASTER_BUFF_ID; 
 STATIC_MASTER_BUFF[MAP_ELEM_ID] ="MAP_ELEM"; 
 STATIC_MASTER_BUFF[MAP_ELEM_ID+1] =3; 
 STATIC_MASTER_BUFF[MAP_ELEM_ID+2] =keyName; 
 STATIC_MASTER_BUFF[MAP_ELEM_ID+3] =velue; 
 STATIC_MASTER_BUFF_ID += 4; 
 MAP_ELEM_ID; 
); 
function MAP_ELEM_getKeyName( MAP_ELEM_ID) (STATIC_MASTER_BUFF[MAP_ELEM_ID+2]); 
function MAP_ELEM_getValue ( MAP_ELEM_ID) (STATIC_MASTER_BUFF[MAP_ELEM_ID+3]); 
function MAP_ELEM_setValue ( MAP_ELEM_ID,v)(STATIC_MASTER_BUFF[MAP_ELEM_ID+3] =v;); 
function MAP_create() local (MAP_ID,array_id) 
( 
 array_id = ARRAY_create(1000); 
 MAP_ID = STATIC_MASTER_BUFF_ID; 
 STATIC_MAP_BUFF_START[MAP_ID] = "MAP"; 
 STATIC_MAP_BUFF_START[MAP_ID+1] = 2; 
 STATIC_MAP_BUFF_START[MAP_ID+2] = array_id; 
 STATIC_MAP_BUFF_ID +=3; 
 MAP_ID; 
); 
function MAP_getArrayID(MAP_ID)(STATIC_MAP_BUFF_START[MAP_ID+2];); 
function MAP_getSize(MAP_ID)(ARRAY_getBufferSize( MAP_getArrayID(MAP_ID) );); 
function MAP_setValue(MAP_ID,keyName,Value) 
 local(doubleCheck,count,tempElem,array_ID,tempKeyName,bufferSize) 
( 
 doubleCheck = false; 
 count = 0; 
 array_ID = MAP_getArrayID(MAP_ID); 
 bufferSize =MAP_getSize(MAP_ID); 
 while ( count < bufferSize) 
 ( 
 tempElem = ARRAY_getAt(array_ID,count); 
 tempKeyName = MAP_ELEM_getKeyName(tempElem); 
 ( stringCompareFromNum(keyName,tempKeyName) ==0)? 
 ( 
 MAP_ELEM_setValue(tempElem,Value); 
 doubleCheck =true; 
 count = bufferSize+100; 
 ); 
 count +=1; 
 ); 
 (doubleCheck == false)? 
 ( 
 tempElem = MAP_ELEM_create(keyName,Value); 
 ARRAY_push_back( MAP_getArrayID(MAP_ID) 
 , tempElem); 
 ); 
); 
function MAP_getValue(MAP_ID,keyName) 
 local(out,count_2,tempElem,array_ID,bufferSize,tempKeyName) 
( 
 out =-1; 
 count_2 = 0; 
 array_ID = MAP_getArrayID(MAP_ID); 
 bufferSize =ARRAY_getBufferSize(array_ID); 
 while ( count_2 < bufferSize) 
 ( 
 tempElem = ARRAY_getAt(array_ID,count_2); 
 tempKeyName = MAP_ELEM_getKeyName(tempElem); 
 ( stringCompareFromNum(keyName,tempKeyName) == 0)? 
 ( 
 out = MAP_ELEM_getValue(tempElem); 
 count_2 = bufferSize+100; 
 ); 
 count_2 +=1; 
 ); 
 out; 
); 
function DBG_MSG(message) 
( 
 gfx_x=0; 
 gfx_y=0; 
 gfx_r=1;gfx_g=1;gfx_b=1;gfx_a=1; 
 gfx_drawstr(message); 
); 
function DBGMESSAGE_create(size)local (DBGMSG_ID,size_,circle_BUFF_ID) 
( 
 size_ = (size == 0) ? 50 :size; 
 circle_BUFF_ID =CIRCLEBUFFER_create(size_) ; 
 DBGMSG_ID = STATIC_MASTER_BUFF_ID; 
 STATIC_MASTER_BUFF[DBGMSG_ID] = "DBG_MESSAGE"; 
 STATIC_MASTER_BUFF[DBGMSG_ID+1] = 4; 
 STATIC_MASTER_BUFF[DBGMSG_ID+2] = circle_BUFF_ID; 
 STATIC_MASTER_BUFF[DBGMSG_ID+3] = STATIC_TEMP_STRING_START_SLOT_NUM; 
 STATIC_MASTER_BUFF[DBGMSG_ID+4] = 100; 
 STATIC_MASTER_BUFF[DBGMSG_ID+5] = STATIC_MASTER_BUFF[DBGMSG_ID+1]; 
 STATIC_MASTER_BUFF_ID += 5; 
 DBGMSG_ID; 
); 
function _DBGMESSAGE_getElementNum(DBGMSG_ID)(STATIC_MASTER_BUFF[DBGMSG_ID + 5];); 
function DBGMESSAGE_getActive(DBGMSG_ID) (STATIC_MASTER_BUFF[DBGMSG_ID+4];); 
function DBGMESSAGE_isActive (DBGMSG_ID) (DBGMESSAGE_getActive(DBGMSG_ID);); 
function DBGMESSAGE_setActive(DBGMSG_ID,v) (STATIC_MASTER_BUFF[DBGMSG_ID+4]=v;); 
function DBGMESSAGE_toggleActive(DBGMSG_ID) 
( 
 DBGMESSAGE_setActive( DBGMSG_ID 
 ,( DBGMESSAGE_getActive(DBGMSG_ID) == false ) ); 
); 
function _DBGMESSAGE_getStringSlotCursol(DBGMSG_ID) ( STATIC_MASTER_BUFF[DBGMSG_ID+3];); 
function _DBGMESSAGE_setStringSlotCursol(DBGMSG_ID,newCursol) ( STATIC_MASTER_BUFF[DBGMSG_ID+3] = newCursol;); 
function _DBGMESSAGE_resetStringSlotCursol(DBGMSG_ID) ( STATIC_MASTER_BUFF[DBGMSG_ID+3] = STATIC_TEMP_STRING_START_SLOT_NUM;); 
function _DBGMESSAGE_getCircleBuff(DBGMSG_ID) ( STATIC_MASTER_BUFF[DBGMSG_ID+2];); 
function DBGMESSAGE_addDBG(DBGMSG_ID,str)local (circleBUF_ID,temp_str) 
( 
 circleBUF_ID = _DBGMESSAGE_getCircleBuff(DBGMSG_ID); 
 CIRCLEBUFFER_push_front(circleBUF_ID,str); 
); 
function DBGMESSAGE_add(DBGMSG_ID,str) 
( 
 DBGMESSAGE_addDBG(DBGMSG_ID,str); 
); 
function DBGMESSAGE_addFloat(DBGMSG_ID,floatNum)local (str,strslot) 
( 
 str = STATIC_TEMP_STRING_START_SLOT_NUM; 
 sprintf ( str,"%f",floatNum); 
 DBGMESSAGE_addDBG(DBGMSG_ID,str); 
 STATIC_TEMP_STRING_START_SLOT_NUM += 1; 
 ( STATIC_TEMP_STRING_START_SLOT_NUM>1023) 
 ?(STATIC_TEMP_STRING_START_SLOT_NUM =STATIC_TEMP_STRING_START_SLOT_NUM_START); 
); 
function DBGMESSAGE_addAllStrcutElement(DBGMSG_ID,targetSTRUCT_ID) local (countABC,elementNUM,tempStr,temp) 
( 
 elementNUM = STRUCT_getElementNum ( targetSTRUCT_ID); 
 countABC = 0; 
 tempStr = _DBGMESSAGE_getStringSlotCursol(DBGMSG_ID)+1; 
 while( countABC <= elementNUM) 
 ( 
 temp = STATIC_MASTER_BUFF[targetSTRUCT_ID+countABC]; 
 sprintf(tempStr,"[%i] : %f :%s ", countABC,temp,temp); 
 DBGMESSAGE_addDBG(DBGMSG_ID,tempStr); 
 tempStr +=1; 
 countABC +=1; 
 ); 
 _DBGMESSAGE_setStringSlotCursol(DBGMSG_ID,tempStr); 
 sprintf(temp,""); 
); 
function DBGMESSAGE_drawAllMessage(DBGMSG_ID)local (circleBUF_ID,bufSize,count_2,oneMsg) 
( 
 ( DBGMESSAGE_isActive(DBGMSG_ID) == true )? 
 ( 
 circleBUF_ID = _DBGMESSAGE_getCircleBuff(DBGMSG_ID); 
 bufSize = CIRCLEBUFFER_getBufferSize(circleBUF_ID); 
 count_2 =0; 
 while( count_2 < bufSize) 
 ( 
 oneMsg = CIRCLEBUFFER_getValueFromPos(circleBUF_ID,count_2); 
 gfx_x=0; 
 gfx_y=gfx_texth * count_2; 
 gfx_r=1;gfx_g=1;gfx_b=1;gfx_a=1; 
 gfx_drawstr(oneMsg) ; 
 count_2+=1; 
 ); 
 ); 
 _DBGMESSAGE_resetStringSlotCursol(DBGMSG_ID); 
); 
STATIC_DBG_ID = DBGMESSAGE_create(50); 
DBGMESSAGE_setActive(STATIC_DBG_ID,1); 
DBG = STATIC_DBG_ID; 
function DBG(str) 
( 
 DBGMESSAGE_add(STATIC_DBG_ID,str); 
); 
function DBG_FLOAT(floatNum) 
( 
 DBGMESSAGE_addFloat(STATIC_DBG_ID,floatNum); 
); 
function DBG_toggle() 
( 
 DBGMESSAGE_toggleActive(STATIC_DBG_ID); 
); 
function get1thNote_Time (Tempo) ((60/Tempo)*4;); 
function get2thNote_Time (Tempo) ((60/Tempo)*2;); 
function get4thNote_Time (Tempo) ((60/Tempo);); 
function get8thNote_Time (Tempo) ((60/Tempo)/2;); 
function get16thNote_Time(Tempo) ((60/Tempo)/4;); 
function get32thNote_Time(Tempo) ((60/Tempo)/8;); 
function get1thNote_Rate (Tempo) ( 1/(get1thNote_Time(Tempo)); ); 
function get2thNote_Rate (Tempo) ( 1/(get2thNote_Time(Tempo)); ); 
function get4thNote_Rate (Tempo) ( 1/(get4thNote_Time(Tempo)); ); 
function get8thNote_Rate (Tempo) ( 1/(get8thNote_Time(Tempo)); ); 
function get16thNote_Rate(Tempo) ( 1/(get16thNote_Time(Tempo)); ); 
function get32thNote_Rate(Tempo) ( 1/(get32thNote_Time(Tempo)); ); 
function get1thNote_Sample (Tempo,sampleRate_) ( sampleRate_ * get1thNote_Time (Tempo); ); 
function get2thNote_Sample (Tempo,sampleRate_) ( sampleRate_ * get2thNote_Time (Tempo); ); 
function get4thNote_Sample (Tempo,sampleRate_) ( sampleRate_ * get4thNote_Time (Tempo); ); 
function get8thNote_Sample (Tempo,sampleRate_) ( sampleRate_ * get8thNote_Time (Tempo); ); 
function get16thNote_Sample(Tempo,sampleRate_) ( sampleRate_ * get16thNote_Time(Tempo); ); 
function get32thNote_Sample(Tempo,sampleRate_) ( sampleRate_ * get32thNote_Time(Tempo); ); 
function get1thNote_Pqn (Tempo) ( 4/1; ); 
function get2thNote_Pqn (Tempo) ( 2/1; ); 
function get4thNote_Pqn (Tempo) ( 1/1; ); 
function get8thNote_Pqn (Tempo) ( 1/2; ); 
function get16thNote_Pqn (Tempo) ( 1/4; ); 
function get32thNote_Pqn (Tempo) ( 1/8; ); 
function sample2Ppq (sampleNum,Tempo,sampleRate_) ( sampleNum / get4thNote_Sample(Tempo,sampleRate_);); 
function sample2Sec (sampleNum,sampleRate_) ( sampleNum / ( sampleRate_ ) ;); 
function sample2MSec (sampleNum,sampleRate_) ( sampleNum / ( sampleRate_ )*1000;); 
function sample2Rate (sampleNum,sampleRate_) ( sampleNum / sampleRate_ ;); 
function pqn2SampleNum (pqnNum,Tempo,sampleRate_) ( pqnNum * get4thNote_Sample(Tempo,sampleRate_);); 
function pqn2Rate (pqnNum,Tempo,sampleRate_) ( sample2Rate(pqn2SampleNum( pqnNum,Tempo,sampleRate_),sampleRate_);); 
function pqn2Sec (pqnNum,Tempo,sampleRate_) ( sample2Sec (pqn2SampleNum( pqnNum,Tempo,sampleRate_),sampleRate_);); 
function time2Sample (sec,sampleRate_) ( sec * sampleRate_ ;); 
function time2Rate (sec) ( 1 / sec ;); 
function time2Pqn (sec,Tempo) ( sec / get4thNote_Time(Tempo);); 
function DCOFFSET_create() local ( DCOFFSET_ID ) 
( 
 DCOFFSET_ID = STATIC_MASTER_BUFF_ID; 
 STATIC_MASTER_BUFF[DCOFFSET_ID] = "DCOFFSET"; 
 STATIC_MASTER_BUFF[DCOFFSET_ID+1] = 4; 
 STATIC_MASTER_BUFF[DCOFFSET_ID+2] = 0.0; 
 STATIC_MASTER_BUFF[DCOFFSET_ID+3] = 0.0; 
 STATIC_MASTER_BUFF[DCOFFSET_ID+4] = STATIC_MASTER_BUFF[DCOFFSET_ID+1]; 
 STATIC_MASTER_BUFF_ID +=STRUCT_getElementNum(DCOFFSET_ID)+1; 
 DCOFFSET_ID; 
); 
function _DCOFFSET_getElementNum(DCOFFSET_ID) ( STATIC_MASTER_BUFF[DELTATIME_ID + 4];); 
function _DCOFFSET_getLastItem(DCOFFSET_ID) ( STATIC_MASTER_BUFF[DCOFFSET_ID+2] ;); 
function _DCOFFSET_getLastOtem(DCOFFSET_ID) ( STATIC_MASTER_BUFF[DCOFFSET_ID+3] ;); 
function _DCOFFSET_setLastItem(DCOFFSET_ID,v) ( STATIC_MASTER_BUFF[DCOFFSET_ID+2] =v;); 
function _DCOFFSET_setLastOtem(DCOFFSET_ID,v) ( STATIC_MASTER_BUFF[DCOFFSET_ID+3] =v;); 
function DCOFFSET_process(DCOFFSET_ID,inSample ) local (out) 
( 
 out = 0.999 * _DCOFFSET_getLastOtem(DCOFFSET_ID) 
 + inSample - _DCOFFSET_getLastItem(DCOFFSET_ID); 
 _DCOFFSET_setLastItem(DCOFFSET_ID,inSample); 
 _DCOFFSET_setLastOtem(DCOFFSET_ID,out); 
 out; 
); 
function MSPROCESS_create() local ( MSPROCESS_ID ) 
( 
 MSPROCESS_ID = STATIC_MASTER_BUFF_ID; 
 STATIC_MASTER_BUFF[MSPROCESS_ID] = "MSPROCESS"; 
 STATIC_MASTER_BUFF[MSPROCESS_ID+1] = 5; 
 STATIC_MASTER_BUFF[MSPROCESS_ID+2] = 0.0; 
 STATIC_MASTER_BUFF[MSPROCESS_ID+3] = 0.0; 
 STATIC_MASTER_BUFF[MSPROCESS_ID+4] = 0.0; 
 STATIC_MASTER_BUFF[MSPROCESS_ID+5] = STATIC_MASTER_BUFF[MSPROCESS_ID+1]; 
 STATIC_MASTER_BUFF_ID +=STRUCT_getElementNum(MSPROCESS_ID)+1; 
 MSPROCESS_ID; 
); 
function _MSPROCESS_getElementNum(MSPROCESS_ID) ( STATIC_MASTER_BUFF[MSPROCESS_ID + 5];); 
function MSPROCESS_getMid (MSPROCESS_ID) ( STATIC_MASTER_BUFF[MSPROCESS_ID+2] ;); 
function MSPROCESS_getSideL (MSPROCESS_ID) ( STATIC_MASTER_BUFF[MSPROCESS_ID+3] ;); 
function MSPROCESS_getSideR (MSPROCESS_ID) ( STATIC_MASTER_BUFF[MSPROCESS_ID+4] ;); 
function _MSPROCESS_setMid (MSPROCESS_ID,v) ( STATIC_MASTER_BUFF[MSPROCESS_ID+2] = v;); 
function _MSPROCESS_setSideL(MSPROCESS_ID,v) ( STATIC_MASTER_BUFF[MSPROCESS_ID+3] = v;); 
function _MSPROCESS_setSideR(MSPROCESS_ID,v) ( STATIC_MASTER_BUFF[MSPROCESS_ID+4] = v;); 
function MSPROCESS_process(MSPROCESS_ID,inL,inR ) local (mid_,sideL_,sideR_) 
( 
 mid_ = (inL+inR)/2; 
 sideL_ = inL - mid_; 
 sideR_ = inR - mid_; 
 _MSPROCESS_setMid (MSPROCESS_ID,mid_) ; 
 _MSPROCESS_setSideL (MSPROCESS_ID,sideL_); 
 _MSPROCESS_setSideR (MSPROCESS_ID,sideR_); 
); 
DEFINE_GENERATE_WAVE_TYPE_SIN = 0; 
DEFINE_GENERATE_WAVE_TYPE_SAW = 1; 
DEFINE_GENERATE_WAVE_TYPE_RECT = 2; 
DEFINE_GENERATE_WAVE_TYPE_TRI = 3; 
DEFINE_WAVE_SIGNALE_BIPOLAR = 0; 
DEFINE_WAVE_SIGNALE_UNIPOLAR = 1; 
function WAVESINE_create() local (WAVESINE_ID) 
( 
 WAVESINE_ID = STATIC_MASTER_BUFF_ID; 
 STATIC_MASTER_BUFF[WAVESINE_ID] = "WAVESINE"; 
 STATIC_MASTER_BUFF[WAVESINE_ID+1] = 8; 
 STATIC_MASTER_BUFF[WAVESINE_ID+2] = 440 ; 
 STATIC_MASTER_BUFF[WAVESINE_ID+3] = 0; 
 STATIC_MASTER_BUFF[WAVESINE_ID+4] = srate; 
 STATIC_MASTER_BUFF[WAVESINE_ID+5] = 0; 
 STATIC_MASTER_BUFF[WAVESINE_ID+6] = DEFINE_GENERATE_WAVE_TYPE_SIN; 
 STATIC_MASTER_BUFF[WAVESINE_ID+7] = DEFINE_WAVE_SIGNALE_BIPOLAR; 
 STATIC_MASTER_BUFF[WAVESINE_ID+8] = STATIC_MASTER_BUFF[WAVESINE_ID+1]; 
 STATIC_MASTER_BUFF_ID += STRUCT_getElementNum(WAVESINE_ID)+1; 
 WAVESINE_ID; 
); 
function _WAVESINE_getElementNum (WAVESINE_ID) (STATIC_MASTER_BUFF[WAVESINE_ID+8]; ); 
function WAVESINE_getRate (WAVESINE_ID) (STATIC_MASTER_BUFF[WAVESINE_ID+2]; ); 
function WAVESINE_getCountTime (WAVESINE_ID) (STATIC_MASTER_BUFF[WAVESINE_ID+3]; ); 
function WAVESINE_getSampleRate (WAVESINE_ID) (STATIC_MASTER_BUFF[WAVESINE_ID+4]; ); 
function _WAVESINE_getLastWaveSine (WAVESINE_ID) (STATIC_MASTER_BUFF[WAVESINE_ID+5]; ); 
function WAVESINE_getGenerateWaveType(WAVESINE_ID) (STATIC_MASTER_BUFF[WAVESINE_ID+6]; ); 
function WAVESINE_getPolarType (WAVESINE_ID) (STATIC_MASTER_BUFF[WAVESINE_ID+7]; ); 
function WAVESINE_setRate (WAVESINE_ID,v) (STATIC_MASTER_BUFF[WAVESINE_ID+2] = v; ); 
function WAVESINE_setCountTime (WAVESINE_ID,v) (STATIC_MASTER_BUFF[WAVESINE_ID+3] = v; ); 
function WAVESINE_setSampleRate (WAVESINE_ID,v) (STATIC_MASTER_BUFF[WAVESINE_ID+4] = v; ); 
function _WAVESINE_setLastWaveSine (WAVESINE_ID,v) (STATIC_MASTER_BUFF[WAVESINE_ID+5] = v; ); 
function WAVESINE_setGenerateWaveType(WAVESINE_ID,v) (STATIC_MASTER_BUFF[WAVESINE_ID+6] = v; ); 
function WAVESINE_setPolarType (WAVESINE_ID,v) (STATIC_MASTER_BUFF[WAVESINE_ID+7] = v; ); 
function _WAVESINE_gen(WAVESINE_ID) 
 local ( wave 
 , timeCount 
 , sampleRate 
 , rate 
 , waveType 
 , oneDivSample 
 , rateCount 
 ) 
( 
 timeCount = WAVESINE_getCountTime(WAVESINE_ID); 
 sampleRate = WAVESINE_getSampleRate(WAVESINE_ID); 
 rate = WAVESINE_getRate(WAVESINE_ID); 
 waveType = WAVESINE_getGenerateWaveType(WAVESINE_ID); 
 polarType = WAVESINE_getPolarType(WAVESINE_ID); 
 ( waveType == DEFINE_GENERATE_WAVE_TYPE_SIN )? 
 ( 
 wave = sin( (2*$pi* rate * timeCount)/sampleRate ); 
 ( polarType == DEFINE_WAVE_SIGNALE_UNIPOLAR)? 
 ( 
 wave = abs(wave); 
 ); 
 ):(waveType == DEFINE_GENERATE_WAVE_TYPE_RECT )? 
 ( 
 oneDivSample = srate/ ( 2 * rate ); 
 wave =(floor(timeCount / oneDivSample )% 2 ); 
 (polarType == DEFINE_WAVE_SIGNALE_BIPOLAR)? 
 ( 
 wave = wave *2 -1; 
 ); 
 ):(waveType == DEFINE_GENERATE_WAVE_TYPE_SAW )? 
 ( 
 oneDivSample = srate/ ( 2 * rate ); 
 wave = 1-( (timeCount % oneDivSample)/oneDivSample ) ; 
 (polarType == DEFINE_WAVE_SIGNALE_BIPOLAR)? 
 ( 
 wave = wave *2 -1; 
 ); 
 ):(waveType == DEFINE_GENERATE_WAVE_TYPE_TRI )? 
 ( 
 rateCount = ceil(srate/2/rate); 
 wave = ( 1 /rateCount) 
 * ( rateCount - abs( timeCount % (2*rateCount)-rateCount)) ; 
 (polarType == DEFINE_WAVE_SIGNALE_BIPOLAR)? 
 ( 
 wave = wave *2 -1; 
 ); 
 ); 
 _WAVESINE_setLastWaveSine(WAVESINE_ID,wave); 
); 
function _WAVESINE_tick(WAVESINE_ID) local( newCount) 
( 
 newCount = WAVESINE_getCountTime(WAVESINE_ID) +1; 
 ( newCount >= ( WAVESINE_getSampleRate(WAVESINE_ID )/ WAVESINE_getRate(WAVESINE_ID) ) )? 
 ( 
 newCount = 0; 
 ); 
 WAVESINE_setCountTime(WAVESINE_ID,newCount); 
); 
function WAVESINE_getAndTick(WAVESINE_ID) local (timeCount,sampleRate,rate) 
( 
 _WAVESINE_gen(WAVESINE_ID); 
 _WAVESINE_tick(WAVESINE_ID); 
 _WAVESINE_getLastWaveSine(WAVESINE_ID); 
); 
function WAVESINE_get(WAVESINE_ID) 
( 
 _WAVESINE_getLastWaveSine(WAVESINE_ID); 
); 
function RINGMOD_create()local(RINGMOD_ID,dc_offset) 
( 
 dc_offset = DCOFFSET_create(); 
 RINGMOD_ID = STATIC_MASTER_BUFF_ID; 
 STATIC_MASTER_BUFF[RINGMOD_ID] = "RINGMOD"; 
 STATIC_MASTER_BUFF[RINGMOD_ID+1] = 3; 
 STATIC_MASTER_BUFF[RINGMOD_ID+2] = dc_offset; 
 STATIC_MASTER_BUFF[RINGMOD_ID+3] = STATIC_MASTER_BUFF[RINGMOD_ID+1]; 
 STATIC_MASTER_BUFF_ID +=STRUCT_getElementNum(RINGMOD_ID)+1; 
 RINGMOD_ID; 
); 
function _RINGMOD_getDCOffsetID(RINGMOD_ID) ( STATIC_MASTER_BUFF[RINGMOD_ID+2];); 
function RINGMOD_process(RINGMOD_ID,inSample ) local ( dcOffset,out,tempOtm) 
( 
 temp = max(min(inSample,1),-1); 
 dcOffset = _RINGMOD_getDCOffsetID(RINGMOD_ID); 
 out = DCOFFSET_process(dcOffset,((temp*temp )) *2 ); 
 out = max(min(out,1),-1); 
 out; 
); 
RBJ_FILTER_TYPE_LPF = 1; 
RBJ_FILTER_TYPE_HPF = 2; 
RBJ_FILTER_TYPE_BPF = 3; 
RBJ_FILTER_TYPE_NOTCH = 4; 
RBJ_FILTER_TYPE_APF = 5; 
RBJ_FILTER_TYPE_PEAK = 6; 
RBJ_FILTER_TYPE_LSF = 7; 
RBJ_FILTER_TYPE_HSF = 8; 
function _RBJFILTER_getElementNum (RBJFILTER_ID) ( STATIC_MASTER_BUFF[RBJFILTER_ID+2];); 
function _RBJFILTER_getA1A0 (RBJFILTER_ID) ( STATIC_MASTER_BUFF[RBJFILTER_ID+3];); 
function _RBJFILTER_getA2A0 (RBJFILTER_ID) ( STATIC_MASTER_BUFF[RBJFILTER_ID+4];); 
function _RBJFILTER_getB0A0 (RBJFILTER_ID) ( STATIC_MASTER_BUFF[RBJFILTER_ID+5];); 
function _RBJFILTER_getB1A0 (RBJFILTER_ID) ( STATIC_MASTER_BUFF[RBJFILTER_ID+6];); 
function _RBJFILTER_getB2A0 (RBJFILTER_ID) ( STATIC_MASTER_BUFF[RBJFILTER_ID+7];); 
function _RBJFILTER_getX1 (RBJFILTER_ID) ( STATIC_MASTER_BUFF[RBJFILTER_ID+13];); 
function _RBJFILTER_getX2 (RBJFILTER_ID) ( STATIC_MASTER_BUFF[RBJFILTER_ID+14];); 
function _RBJFILTER_getY1 (RBJFILTER_ID) ( STATIC_MASTER_BUFF[RBJFILTER_ID+15];); 
function _RBJFILTER_getY2 (RBJFILTER_ID) ( STATIC_MASTER_BUFF[RBJFILTER_ID+16];); 
function RBJFILTER_getActive (RBJFILTER_ID) ( STATIC_MASTER_BUFF[RBJFILTER_ID+17];); 
function RBJFILTER_isActive (RBJFILTER_ID) ( RBJFILTER_getActive(RBJFILTER_ID);); 
function RBJFILTER_getMaxFilterQ (RBJFILTER_ID) ( STATIC_MASTER_BUFF[RBJFILTER_ID+18];); 
function _RBJFILTER_setA1A0 (RBJFILTER_ID,v) ( STATIC_MASTER_BUFF[RBJFILTER_ID+3] = v;); 
function _RBJFILTER_setA2A0 (RBJFILTER_ID,v) ( STATIC_MASTER_BUFF[RBJFILTER_ID+4] = v;); 
function _RBJFILTER_setB0A0 (RBJFILTER_ID,v) ( STATIC_MASTER_BUFF[RBJFILTER_ID+5] = v;); 
function _RBJFILTER_setB1A0 (RBJFILTER_ID,v) ( STATIC_MASTER_BUFF[RBJFILTER_ID+6] = v;); 
function _RBJFILTER_setB2A0 (RBJFILTER_ID,v) ( STATIC_MASTER_BUFF[RBJFILTER_ID+7] = v;); 
function _RBJFILTER_setX1 (RBJFILTER_ID,v) ( STATIC_MASTER_BUFF[RBJFILTER_ID+13] = v;); 
function _RBJFILTER_setX2 (RBJFILTER_ID,v) ( STATIC_MASTER_BUFF[RBJFILTER_ID+14] = v;); 
function _RBJFILTER_setY1 (RBJFILTER_ID,v) ( STATIC_MASTER_BUFF[RBJFILTER_ID+15] = v;); 
function _RBJFILTER_setY2 (RBJFILTER_ID,v) ( STATIC_MASTER_BUFF[RBJFILTER_ID+16] = v;); 
function RBJFILTER_setActive (RBJFILTER_ID,v) ( STATIC_MASTER_BUFF[RBJFILTER_ID+17] = v;); 
function RBJFILTER_setMaxFilterQ (RBJFILTER_ID,v) ( STATIC_MASTER_BUFF[RBJFILTER_ID+18] = v;); 
function RBJFILTER_getFreq (RBJFILTER_ID) ( STATIC_MASTER_BUFF[RBJFILTER_ID+8];); 
function RBJFILTER_getQ (RBJFILTER_ID) ( STATIC_MASTER_BUFF[RBJFILTER_ID+9];); 
function RBJFILTER_getDBGain (RBJFILTER_ID) ( STATIC_MASTER_BUFF[RBJFILTER_ID+10];); 
function RBJFILTER_getFilterType (RBJFILTER_ID) ( STATIC_MASTER_BUFF[RBJFILTER_ID+11];); 
function RBJFILTER_getSampleRate (RBJFILTER_ID) ( STATIC_MASTER_BUFF[RBJFILTER_ID+12];); 
function RBJFILTER_calculateCoeff (RBJFILTER_ID) 
 local ( f0 
 , Q 
 , sampleRate 
 , omega 
 , dBgain 
 , sn 
 , cs 
 , alpha 
 , A 
 , sqrtA2alpha 
 , fitlerType 
 , a0,a1,a2,b0,b1,b2 
 ) 
( 
 f0 = RBJFILTER_getFreq (RBJFILTER_ID); 
 Q = RBJFILTER_getQ (RBJFILTER_ID); 
 sampleRate = RBJFILTER_getSampleRate (RBJFILTER_ID); 
 omega = ( 2.0 * $pi * f0 )/ sampleRate; 
 dBgain = RBJFILTER_getDBGain(RBJFILTER_ID); 
 A = 10 ^ (dBgain/40); 
 A = sqrt( 10^(dBgain/20) ); 
 sqrtA2alpha = 2*sqrt(A)*alpha; 
 Q = A * Q; 
 sn = sin(omega); 
 cs = cos(omega); 
 alpha = sn / (2.0 * Q); 
 fitlerType = RBJFILTER_getFilterType (RBJFILTER_ID); 
 ( fitlerType == RBJ_FILTER_TYPE_LPF)? 
 ( 
 b0 = (1 - cs) / 2; 
 b1 = 1 - cs; 
 b2 = (1 - cs) / 2; 
 a0 = 1 + alpha; 
 a1 = -2 * cs; 
 a2 = 1 - alpha; 
 ):( fitlerType == RBJ_FILTER_TYPE_HPF)? 
 ( 
 b0 = (1 + cs) / 2; 
 b1 = -(1 + cs); 
 b2 = (1 + cs) / 2; 
 a0 = 1 + alpha; 
 a1 = -2 * cs; 
 a2 = 1 - alpha; 
 ):( fitlerType == RBJ_FILTER_TYPE_BPF)? 
 ( 
 b0 = Q * alpha; 
 b1 = 0; 
 b2 = -Q * alpha; 
 a0 = 1 + alpha; 
 a1 = -2 * cs; 
 a2 = 1 - alpha; 
 ):( fitlerType == RBJ_FILTER_TYPE_NOTCH)? 
 ( 
 b0 = 1; 
 b1 = -2 * cs; 
 b2 = 1; 
 a0 = 1 + alpha; 
 a1 = -2 * cs; 
 a2 = 1 - alpha; 
 ):( fitlerType == RBJ_FILTER_TYPE_APF)? 
 ( 
 b0 = 1 - alpha; 
 b1 = -2 * cs; 
 b2 = 1 + alpha; 
 a0 = 1 + alpha; 
 a1 = -2 * cs; 
 a2 = 1 - alpha; 
 ):( fitlerType == RBJ_FILTER_TYPE_PEAK)? 
 ( 
 b0 = 1 + alpha*A; 
 b1 = -2 * cs; 
 b2 = 1 - alpha*A; 
 a0 = 1 + alpha/A; 
 a1 = -2 * cs; 
 a2 = 1 - alpha/A; 
 ):( fitlerType == RBJ_FILTER_TYPE_LSF)? 
 ( 
 b0 = A*( (A+1) - (A-1)*cs + sqrtA2alpha ); 
 b1 = 2*A*( (A-1) - (A+1)*cs ); 
 b2 = A*( (A+1) - (A-1)*cs - sqrtA2alpha ); 
 a0 = (A+1) + (A-1)*cs + sqrtA2alpha; 
 a1 = -2*( (A-1) + (A+1)*cs ); 
 a2 = (A+1) + (A-1)*cs - sqrtA2alpha; 
 ):( fitlerType == RBJ_FILTER_TYPE_HSF)? 
 ( 
 b0 = A*( (A+1) + (A-1)*cs + sqrtA2alpha ); 
 b1 = -2*A*( (A-1) + (A+1)*cs ); 
 b2 = A*( (A+1) + (A-1)*cs - sqrtA2alpha ); 
 a0 = (A+1) - (A-1)*cs + sqrtA2alpha ; 
 a1 = 2*( (A-1) - (A+1)*cs ); 
 a2 = (A+1) - (A-1)*cs - sqrtA2alpha; 
 ) 
 ; 
 _RBJFILTER_setA1A0(RBJFILTER_ID,a1/a0); 
 _RBJFILTER_setA2A0(RBJFILTER_ID,a2/a0); 
 _RBJFILTER_setB0A0(RBJFILTER_ID,b0/a0); 
 _RBJFILTER_setB1A0(RBJFILTER_ID,b1/a0); 
 _RBJFILTER_setB2A0(RBJFILTER_ID,b2/a0); 
); 
function RBJFILTER_setFreq (RBJFILTER_ID,v)( STATIC_MASTER_BUFF[RBJFILTER_ID+8] = max(min(v,19000 ),20);RBJFILTER_calculateCoeff(RBJFILTER_ID);); 
function RBJFILTER_setQ (RBJFILTER_ID,v)( STATIC_MASTER_BUFF[RBJFILTER_ID+9] = min(max(v,0.001),RBJFILTER_getMaxFilterQ(RBJFILTER_ID));RBJFILTER_calculateCoeff(RBJFILTER_ID);); 
function RBJFILTER_setDBGain (RBJFILTER_ID,v)( STATIC_MASTER_BUFF[RBJFILTER_ID+10]= v;RBJFILTER_calculateCoeff(RBJFILTER_ID);); 
function RBJFILTER_setFilterType (RBJFILTER_ID,v)( STATIC_MASTER_BUFF[RBJFILTER_ID+11]= v;RBJFILTER_calculateCoeff(RBJFILTER_ID);); 
function RBJFILTER_setSampleRate (RBJFILTER_ID,v)( STATIC_MASTER_BUFF[RBJFILTER_ID+12]= v;RBJFILTER_calculateCoeff(RBJFILTER_ID);); 
function RBJFILTER_process(RBJFILTER_ID,inSample ) 
 local ( out,b0a0,b1a0,b2a0,a1a0,a2a0,x1,x2,y1,y2) 
( 
 a1a0 = _RBJFILTER_getA1A0(RBJFILTER_ID); 
 a2a0 = _RBJFILTER_getA2A0(RBJFILTER_ID); 
 b0a0 = _RBJFILTER_getB0A0(RBJFILTER_ID); 
 b1a0 = _RBJFILTER_getB1A0(RBJFILTER_ID); 
 b2a0 = _RBJFILTER_getB2A0(RBJFILTER_ID); 
 x1 = _RBJFILTER_getX1(RBJFILTER_ID); 
 x2 = _RBJFILTER_getX2(RBJFILTER_ID); 
 y1 = _RBJFILTER_getY1(RBJFILTER_ID); 
 y2 = _RBJFILTER_getY2(RBJFILTER_ID); 
 inSample += 0.000000000000000000000001; 
 out = b0a0 * inSample 
 + b1a0 * x1 
 + b2a0 * x2 
 - a1a0 * y1 
 - a2a0 * y2; 
 _RBJFILTER_setX2(RBJFILTER_ID,x1); 
 _RBJFILTER_setX1(RBJFILTER_ID,inSample); 
 _RBJFILTER_setY2(RBJFILTER_ID,y1); 
 _RBJFILTER_setY1(RBJFILTER_ID,out); 
 out; 
); 
function RBJFILTER_create(sampleRate_)local(RBJFILTER_ID) 
( 
 RBJFILTER_ID = STATIC_MASTER_BUFF_ID; 
 STATIC_MASTER_BUFF[RBJFILTER_ID] = "RBJFILTER"; 
 STATIC_MASTER_BUFF[RBJFILTER_ID+1] = 18; 
 STATIC_MASTER_BUFF[RBJFILTER_ID+2] = STATIC_MASTER_BUFF[RBJFILTER_ID+1]; 
 STATIC_MASTER_BUFF[RBJFILTER_ID+3] = 0; 
 STATIC_MASTER_BUFF[RBJFILTER_ID+4] = 0; 
 STATIC_MASTER_BUFF[RBJFILTER_ID+5] = 0; 
 STATIC_MASTER_BUFF[RBJFILTER_ID+6] = 0; 
 STATIC_MASTER_BUFF[RBJFILTER_ID+7] = 0; 
 STATIC_MASTER_BUFF[RBJFILTER_ID+8] = 1000; 
 STATIC_MASTER_BUFF[RBJFILTER_ID+9] = 1; 
 STATIC_MASTER_BUFF[RBJFILTER_ID+10] = 0; 
 STATIC_MASTER_BUFF[RBJFILTER_ID+11] = RBJ_FILTER_TYPE_LPF; 
 STATIC_MASTER_BUFF[RBJFILTER_ID+12] = sampleRate_; 
 STATIC_MASTER_BUFF[RBJFILTER_ID+13] = 0; 
 STATIC_MASTER_BUFF[RBJFILTER_ID+14] = 0; 
 STATIC_MASTER_BUFF[RBJFILTER_ID+15] = 0; 
 STATIC_MASTER_BUFF[RBJFILTER_ID+16] = 0; 
 STATIC_MASTER_BUFF[RBJFILTER_ID+17] = true; 
 STATIC_MASTER_BUFF[RBJFILTER_ID+18] = 2; 
 STATIC_MASTER_BUFF_ID += STRUCT_getElementNum(RBJFILTER_ID)+1; 
 RBJFILTER_calculateCoeff(RBJFILTER_ID); 
 RBJFILTER_ID; 
); 
function PANNNER_create() 
 local( PANNNER_ID 
 , singlePole_ID_L 
 , singlePole_ID_R 
 ) 
( 
 singlePole_ID_L =createSinglePole(); 
 singlePole_ID_R =createSinglePole(); 
 SINGLEPOLE_setSmoozingTime(singlePole_ID_L,200); 
 SINGLEPOLE_setSmoozingTime(singlePole_ID_R,200); 
 PANNNER_ID = STATIC_MASTER_BUFF_ID; 
 STATIC_MASTER_BUFF[PANNNER_ID] = "PANNNER"; 
 STATIC_MASTER_BUFF[PANNNER_ID+1] = 5; 
 STATIC_MASTER_BUFF[PANNNER_ID+2] = STATIC_MASTER_BUFF[PANNNER_ID+1]; 
 STATIC_MASTER_BUFF[PANNNER_ID+3] = 0.5; 
 STATIC_MASTER_BUFF[PANNNER_ID+4] = singlePole_ID_L; 
 STATIC_MASTER_BUFF[PANNNER_ID+5] = singlePole_ID_R; 
 STATIC_MASTER_BUFF_ID +=STRUCT_getElementNum(PANNNER_ID)+1; 
 PANNNER_ID; 
); 
function _PANNNER_getElementNum (PANNNER_ID) ( STATIC_MASTER_BUFF[PANNNER_ID+2];); 
function PANNER_getPanValue (PANNNER_ID) ( STATIC_MASTER_BUFF[PANNNER_ID+3];); 
function PANNER_setPanValue (PANNNER_ID,v) ( STATIC_MASTER_BUFF[PANNNER_ID+3]= v;); 
function _PANNER_getSinglePole_ID_L (PANNNER_ID ) ( STATIC_MASTER_BUFF[PANNNER_ID+4];); 
function _PANNER_getSinglePole_ID_R (PANNNER_ID ) ( STATIC_MASTER_BUFF[PANNNER_ID+5];); 
function PANNER_getLeft (PANNNER_ID,inSample) 
 local ( out 
 , panValue 
 , amp 
 , SINGLEPOLE_id_L) 
( 
 panValue = PANNER_getPanValue(PANNNER_ID ); 
 SINGLEPOLE_id_L = _PANNER_getSinglePole_ID_L (PANNNER_ID ); 
 amp = 1; 
 ( panValue > 0.5)? 
 ( 
 amp = 1-abs( (PANNER_getPanValue(PANNNER_ID)-0.5)/0.5 ); 
 ):( 
 amp = 1; 
 ); 
 amp = SINGLEPOLE_getSmoozedValue(SINGLEPOLE_id_L,amp); 
 amp = min(max(0,amp),1); 
 out = inSample* amp; 
 out; 
); 
function PANNER_getRight (PANNNER_ID,inSample) 
 local ( out 
 , panValue 
 , amp 
 , SINGLEPOLE_id_R) 
( 
 panValue = PANNER_getPanValue(PANNNER_ID ); 
 SINGLEPOLE_id_R= _PANNER_getSinglePole_ID_R (PANNNER_ID ); 
 amp = 1; 
 ( panValue > 0.5)? 
 ( 
 amp = 1; 
 ):( 
 amp = 1-abs( (PANNER_getPanValue(PANNNER_ID)-0.5)/0.5 ); 
 ); 
 amp = SINGLEPOLE_getSmoozedValue(SINGLEPOLE_id_R,amp); 
 amp = min(max(0,amp),1); 
 out = inSample* amp; 
 out; 
); 
function PANNNER_process(PANNNER_ID,inSample ) local ( dcOffset,out,tempOtm) 
( 
 0; 
); 
function MOUSEINFO_create() local(MOUSEINFO_ID) 
( 
 MOUSEINFO_ID = STATIC_MASTER_BUFF_ID; 
 STATIC_MASTER_BUFF[MOUSEINFO_ID] = "MOUSE_INFO"; 
 STATIC_MASTER_BUFF[MOUSEINFO_ID+1] = 12 ; 
 STATIC_MASTER_BUFF[MOUSEINFO_ID+2] = mouse_x; 
 STATIC_MASTER_BUFF[MOUSEINFO_ID+3] = mouse_y; 
 STATIC_MASTER_BUFF[MOUSEINFO_ID+4] = mouse_x; 
 STATIC_MASTER_BUFF[MOUSEINFO_ID+5] = mouse_y; 
 STATIC_MASTER_BUFF[MOUSEINFO_ID+6] = mouse_cap; 
 STATIC_MASTER_BUFF[MOUSEINFO_ID+7] = mouse_cap; 
 STATIC_MASTER_BUFF[MOUSEINFO_ID+8] = mouse_wheel; 
 STATIC_MASTER_BUFF[MOUSEINFO_ID+9] = mouse_wheel; 
 STATIC_MASTER_BUFF[MOUSEINFO_ID+10] = mouse_hwheel; 
 STATIC_MASTER_BUFF[MOUSEINFO_ID+11] = mouse_hwheel; 
 STATIC_MASTER_BUFF[MOUSEINFO_ID+12] = STATIC_MASTER_BUFF[MOUSEINFO_ID+1]; 
 STATIC_MASTER_BUFF_ID +=STRUCT_getElementNum(MOUSEINFO_ID)+1; 
 MOUSEINFO_ID; 
); 
function _MOUSEINFO_getElementNum(COLOR_ID) (STATIC_MASTER_BUFF[MOUSEINFO_ID+12];); 
function MOUSEINFO_getMouseX(MOUSEINFO_ID) (STATIC_MASTER_BUFF[MOUSEINFO_ID+2];); 
function MOUSEINFO_getMouseY(MOUSEINFO_ID) (STATIC_MASTER_BUFF[MOUSEINFO_ID+3];); 
function MOUSEINFO_getLastMouseX(MOUSEINFO_ID) (STATIC_MASTER_BUFF[MOUSEINFO_ID+4];); 
function MOUSEINFO_getLastMouseY(MOUSEINFO_ID) (STATIC_MASTER_BUFF[MOUSEINFO_ID+5];); 
function MOUSEINFO_getMouseCap(MOUSEINFO_ID) (STATIC_MASTER_BUFF[MOUSEINFO_ID+6];); 
function MOUSEINFO_getLastMouseCap(MOUSEINFO_ID) (STATIC_MASTER_BUFF[MOUSEINFO_ID+7];); 
function MOUSEINFO_getMouseWheelV(MOUSEINFO_ID) (STATIC_MASTER_BUFF[MOUSEINFO_ID+8];); 
function MOUSEINFO_getLastMouseWheelV(MOUSEINFO_ID) (STATIC_MASTER_BUFF[MOUSEINFO_ID+9];); 
function MOUSEINFO_getMouseWheelH(MOUSEINFO_ID) (STATIC_MASTER_BUFF[MOUSEINFO_ID+10];); 
function MOUSEINFO_getLastMouseWheelH(MOUSEINFO_ID) (STATIC_MASTER_BUFF[MOUSEINFO_ID+11];); 
function MOUSEINFO_setMouseX(MOUSEINFO_ID,v) (STATIC_MASTER_BUFF[MOUSEINFO_ID+2] = v;); 
function MOUSEINFO_setMouseY(MOUSEINFO_ID,v) (STATIC_MASTER_BUFF[MOUSEINFO_ID+3] = v;); 
function MOUSEINFO_setLastMouseX(MOUSEINFO_ID,v) (STATIC_MASTER_BUFF[MOUSEINFO_ID+4] = v;); 
function MOUSEINFO_setLastMouseY(MOUSEINFO_ID,v) (STATIC_MASTER_BUFF[MOUSEINFO_ID+5] = v;); 
function MOUSEINFO_setMouseCap(MOUSEINFO_ID,v) (STATIC_MASTER_BUFF[MOUSEINFO_ID+6] = v;); 
function MOUSEINFO_setlastMouseCap(MOUSEINFO_ID,v) (STATIC_MASTER_BUFF[MOUSEINFO_ID+7] = v;); 
function MOUSEINFO_setMouseWheelV(MOUSEINFO_ID,v) (STATIC_MASTER_BUFF[MOUSEINFO_ID+8] = v;); 
function MOUSEINFO_setLastMouseWheelV(MOUSEINFO_ID,v) (STATIC_MASTER_BUFF[MOUSEINFO_ID+9] = v;); 
function MOUSEINFO_setMouseWheelH(MOUSEINFO_ID,v) (STATIC_MASTER_BUFF[MOUSEINFO_ID+10] = v;); 
function MOUSEINFO_setLastMouseWheelH(MOUSEINFO_ID,v) (STATIC_MASTER_BUFF[MOUSEINFO_ID+11] = v;); 
function MOUSEINFO_update(MOUSEINFO_ID) 
( 
 MOUSEINFO_setLastMouseX(MOUSEINFO_ID,MOUSEINFO_getMouseX(MOUSEINFO_ID)); 
 MOUSEINFO_setLastMouseY(MOUSEINFO_ID,MOUSEINFO_getMouseY(MOUSEINFO_ID)); 
 MOUSEINFO_setLastMouseCap(MOUSEINFO_ID,MOUSEINFO_getMouseCap(MOUSEINFO_ID)); 
 MOUSEINFO_setLastMouseWheelV(MOUSEINFO_ID, MOUSEINFO_getMouseWheelV(MOUSEINFO_ID)); 
 MOUSEINFO_setLastMouseWheelH(MOUSEINFO_ID, MOUSEINFO_getMouseWheelH(MOUSEINFO_ID)); 
 MOUSEINFO_setMouseX(MOUSEINFO_ID,mouse_x); 
 MOUSEINFO_setMouseY(MOUSEINFO_ID,mouse_y); 
 MOUSEINFO_setMouseCap(MOUSEINFO_ID,mouse_cap); 
 MOUSEINFO_setMouseWheelV(MOUSEINFO_ID, mouse_wheel); 
 MOUSEINFO_setMouseWheelH(MOUSEINFO_ID, mouse_hwheel); 
); 
function MOUSEINFO_isMouseMoved(MOUSEINFO_ID) 
( 
 ( MOUSEINFO_getLastMouseX(MOUSEINFO_ID) != MOUSEINFO_getMouseX(MOUSEINFO_ID) 
 || MOUSEINFO_getLastMouseY(MOUSEINFO_ID) != MOUSEINFO_getMouseY(MOUSEINFO_ID) ) 
); 
function MOUSEINFO_isMouseCapChanged(MOUSEINFO_ID) 
( 
 ( MOUSEINFO_getLastMouseCap(MOUSEINFO_ID) != MOUSEINFO_getMouseCap(MOUSEINFO_ID) ) 
); 
function MOUSEINFO_isMouseWheelChanged(MOUSEINFO_ID) 
( 
 ( MOUSEINFO_getLastMouseWheelV(MOUSEINFO_ID) != MOUSEINFO_getMouseWheelV(MOUSEINFO_ID) 
 || MOUSEINFO_getLastMouseWheelH(MOUSEINFO_ID) != MOUSEINFO_getMouseWheelH(MOUSEINFO_ID) ) 
); 
function MOUSEINFO_isMouseWheelVChanged(MOUSEINFO_ID) 
( 
 ( MOUSEINFO_getLastMouseWheelV(MOUSEINFO_ID) != MOUSEINFO_getMouseWheelV(MOUSEINFO_ID) ) 
); 
function MOUSEINFO_isMouseWheelHChanged(MOUSEINFO_ID) 
( 
 ( MOUSEINFO_getLastMouseWheelH(MOUSEINFO_ID) != MOUSEINFO_getMouseWheelH(MOUSEINFO_ID) ) 
); 
function MOUSEINFO_getMouseXDiff(MOUSEINFO_ID) 
( 
 MOUSEINFO_getMouseX(MOUSEINFO_ID)-MOUSEINFO_getLastMouseX(MOUSEINFO_ID); 
); 
function MOUSEINFO_getMouseXDiffAbs(MOUSEINFO_ID) local(out) 
( 
 out =0; 
 ( MOUSEINFO_getMouseXDiff(MOUSEINFO_ID) >0)? out =1:(out =-1); 
 out ; 
); 
function MOUSEINFO_getMouseYDiff(MOUSEINFO_ID) 
( 
 MOUSEINFO_getMouseY(MOUSEINFO_ID)-MOUSEINFO_getLastMouseY(MOUSEINFO_ID); 
); 
function MOUSEINFO_getMouseYDiffAbs(MOUSEINFO_ID) local(out) 
( 
 out =0; 
 ( MOUSEINFO_getMouseYDiff(MOUSEINFO_ID) >0)? out =1:(out =-1 ); 
 out ; 
); 
function MOUSEINFO_getMouseWheelDiffV(MOUSEINFO_ID) 
( 
 MOUSEINFO_getMouseWheelV(MOUSEINFO_ID)-MOUSEINFO_getLastMouseWheelV(MOUSEINFO_ID); 
); 
function MOUSEINFO_getMouseWheelDiffH(MOUSEINFO_ID) 
( 
 MOUSEINFO_getMouseWheelH(MOUSEINFO_ID)-MOUSEINFO_getLastMouseWheelH(MOUSEINFO_ID); 
); 
function MOUSEINFO_getMouseWheelDiffV_ABS(MOUSEINFO_ID)local (out) 
( 
 out = 0; 
 (MOUSEINFO_getMouseWheelV(MOUSEINFO_ID) > MOUSEINFO_getLastMouseWheelV(MOUSEINFO_ID) )? 
 ( 
 out = 1; 
 ):( 
 out = -1; 
 ); 
); 
function MOUSEINFO_getMouseWheelDiffH_ABS(MOUSEINFO_ID)local (out) 
( 
 out = 0; 
 (MOUSEINFO_getMouseWheelH(MOUSEINFO_ID) > MOUSEINFO_getLastMouseWheelH(MOUSEINFO_ID) )? 
 ( 
 out = 1; 
 ):( 
 out = -1; 
 ); 
); 
function COLOR_create(r,g,b,a)local(COLOR_ID) 
( 
 COLOR_ID = STATIC_MASTER_BUFF_ID; 
 STATIC_MASTER_BUFF[COLOR_ID] = "COLOR"; 
 STATIC_MASTER_BUFF[COLOR_ID+1] = 6; 
 STATIC_MASTER_BUFF[COLOR_ID+2] = r; 
 STATIC_MASTER_BUFF[COLOR_ID+3] = g; 
 STATIC_MASTER_BUFF[COLOR_ID+4] = b; 
 STATIC_MASTER_BUFF[COLOR_ID+5] = a; 
 STATIC_MASTER_BUFF[COLOR_ID+6] = STATIC_MASTER_BUFF[COLOR_ID+1]; 
 STATIC_MASTER_BUFF_ID +=STRUCT_getElementNum(COLOR_ID)+1; 
 COLOR_ID; 
); 
function _COLOR_getElementNum(COLOR_ID) ( STATIC_MASTER_BUFF[COLOR_ID+6];); 
function COLOR_getR(COLOR_ID)(STATIC_MASTER_BUFF[COLOR_ID+2]); 
function COLOR_getG(COLOR_ID)(STATIC_MASTER_BUFF[COLOR_ID+3];); 
function COLOR_getB(COLOR_ID)(STATIC_MASTER_BUFF[COLOR_ID+4];); 
function COLOR_getA(COLOR_ID)(STATIC_MASTER_BUFF[COLOR_ID+5];); 
function COLOR_setR(COLOR_ID,newR)(STATIC_MASTER_BUFF[COLOR_ID+2]=newR;); 
function COLOR_setG(COLOR_ID,newG)(STATIC_MASTER_BUFF[COLOR_ID+3]=newG;); 
function COLOR_setB(COLOR_ID,newB)(STATIC_MASTER_BUFF[COLOR_ID+4]=newB;); 
function COLOR_setA(COLOR_ID,newA)(STATIC_MASTER_BUFF[COLOR_ID+5]=newA;); 
function COLOR_invert(COLOR_ID)local(r,g,b,a) 
( 
 r = COLOR_getR(COLOR_ID); 
 g = COLOR_getG(COLOR_ID); 
 b = COLOR_getB(COLOR_ID); 
 COLOR_setR(COLOR_ID,1-r); 
 COLOR_setG(COLOR_ID,1-g); 
 COLOR_setB(COLOR_ID,1-b); 
); 
function COLOR_applyHSB(COLOR_ID,hue, saturation , value) 
local ( hsb) 
( 
 hsb.HSBtoRGB(hue, saturation , value) ; 
 COLOR_setR(COLOR_ID,hsb.r); 
 COLOR_setg(COLOR_ID,hsb.g); 
 COLOR_setb(COLOR_ID,hsb.b); 
); 
function POINT_create(x,y)local (POINT_ID) 
( 
 POINT_ID = STATIC_MASTER_BUFF_ID; 
 STATIC_MASTER_BUFF[POINT_ID] = "POINT"; 
 STATIC_MASTER_BUFF[POINT_ID+1] = 4; 
 STATIC_MASTER_BUFF[POINT_ID+2] = x; 
 STATIC_MASTER_BUFF[POINT_ID+3] = y; 
 STATIC_MASTER_BUFF[POINT_ID+4] = STATIC_MASTER_BUFF[POINT_ID+1]; 
 STATIC_MASTER_BUFF_ID +=STRUCT_getElementNum(POINT_ID)+1; 
 POINT_ID; 
); 
function _POINT_getElementNum(POINT_ID) ( STATIC_MASTER_BUFF[POINT_ID+4];); 
function POINT_getX(POINT_ID)(STATIC_MASTER_BUFF[POINT_ID+2];); 
function POINT_getY(POINT_ID)(STATIC_MASTER_BUFF[POINT_ID+3];); 
function POINT_setX(POINT_ID,newX)(STATIC_MASTER_BUFF[POINT_ID+2]=newX;); 
function POINT_setY(POINT_ID,newY)(STATIC_MASTER_BUFF[POINT_ID+3]=newY;); 
function POINT_rotation(targetPOINT_ID,orignePOINT_ID,AngleRadian_)local(x,y,ox,oy,lx,ly,px,py) 
( 
 x = POINT_getX(targetPOINT_ID); 
 y = POINT_getY(targetPOINT_ID); 
 ox = POINT_getX(orignePOINT_ID); 
 oy = POINT_getY(orignePOINT_ID); 
 lx = x -ox; 
 ly = y -oy; 
 px = lx * cos(AngleRadian_) - ly *sin(AngleRadian_); 
 py = lx * sin(AngleRadian_) + ly *cos(AngleRadian_); 
 POINT_setX(targetPOINT_ID,ox +px); 
 POINT_setY(targetPOINT_ID,oy +py); 
); 
function getManhattanDist(POINT_ID_A,POINT_ID_B)local(x1,y1,x2,y2,distance) 
( 
 x1 = POINT_getX(POINT_ID_A); 
 y1 = POINT_getY(POINT_ID_A); 
 x2 = POINT_getX(POINT_ID_B); 
 y2 = POINT_getY(POINT_ID_B); 
 distance =abs(x1 -x2) + abs(y1 -y2); 
 distance; 
); 
function getEuclideanDist(POINT_ID_A,POINT_ID_B)local(x1,y1,x2,y2,horizDistance,vertDistance,distance) 
( 
 x1 = POINT_getX(POINT_ID_A); 
 y1 = POINT_getY(POINT_ID_A); 
 x2 = POINT_getX(POINT_ID_B); 
 y2 = POINT_getY(POINT_ID_B); 
 horizDistance =abs(x1 - x2); 
 vertDistance =abs(y1 - y2); 
 distance = sqrt( (horizDistance ^ 2) + (vertDistance ^ 2) ); 
 distance; 
); 
function getChebyshevDist(POINT_ID_A,POINT_ID_B)local(x1,y1,x2,y2,distHoriz,distVert,distanceOut) 
( 
 x1 = POINT_getX(POINT_ID_A); 
 y1 = POINT_getY(POINT_ID_A); 
 x2 = POINT_getX(POINT_ID_B); 
 y2 = POINT_getY(POINT_ID_B); 
 distHoriz = abs(x1 - x2); 
 distVert = abs(y1 - y2); 
 ( distHoriz > distVert) ? ( 
 distanceOut = distHoriz; 
 ):( 
 distanceOut= distVert; 
 ); 
 distanceOut; 
); 
function POINT_getAngle(POINT_A,POINT_B)local (out) 
( 
 out = atan2( 
 POINT_getY (POINT_B ) - POINT_getY (POINT_A ) 
 ,POINT_getX (POINT_B ) - POINT_getX (POINT_A ) 
 ); 
 out; 
); 
function CIRCLE_create(x,y,radius)local (CIRCLE_ID) 
( 
 CIRCLE_ID = STATIC_MASTER_BUFF_ID; 
 STATIC_MASTER_BUFF[CIRCLE_ID] = "CIRCLE"; 
 STATIC_MASTER_BUFF[CIRCLE_ID+1] = 5; 
 STATIC_MASTER_BUFF[CIRCLE_ID+2] = x; 
 STATIC_MASTER_BUFF[CIRCLE_ID+3] = y; 
 STATIC_MASTER_BUFF[CIRCLE_ID+4] = radius; 
 STATIC_MASTER_BUFF[CIRCLE_ID+5] = STATIC_MASTER_BUFF[CIRCLE_ID+1]; 
 STATIC_MASTER_BUFF_ID +=STRUCT_getElementNum(CIRCLE_ID)+1; 
 CIRCLE_ID; 
); 
function _CIRCLE_getElementNum(CIRCLE_ID) ( STATIC_MASTER_BUFF[CIRCLE_ID+5];); 
function CIRCLE_getCX(CIRCLE_ID)(STATIC_MASTER_BUFF[CIRCLE_ID+2];); 
function CIRCLE_getCY(CIRCLE_ID)(STATIC_MASTER_BUFF[CIRCLE_ID+3];); 
function CIRCLE_getRadius(CIRCLE_ID)(STATIC_MASTER_BUFF[CIRCLE_ID+4];); 
function CIRCLE_setCX(CIRCLE_ID,newX)(STATIC_MASTER_BUFF[CIRCLE_ID+2]=newX;); 
function CIRCLE_setCY(CIRCLE_ID,newY)(STATIC_MASTER_BUFF[CIRCLE_ID+3]=newY;); 
function CIRCLE_setRadius(CIRCLE_ID,newRadius)(STATIC_MASTER_BUFF[CIRCLE_ID+4]=newRadius;); 
function CIRCLE_isContainPoint(CIRCLE_ID,targetX,targetY)local ( x,y,r,out) 
( 
 x = CIRCLE_getCX(CIRCLE_ID); 
 y = CIRCLE_getCY(CIRCLE_ID); 
 r = CIRCLE_getRadius(CIRCLE_ID); 
 ( getEuclideanDist(x,y,targetX,targetY) <= r )? 
 ( 
 out =true; 
 ):( 
 out =false; 
 ); 
 out; 
); 
function CIRCLE_isContainMouse(CIRCLE_ID)local (out) 
( 
 out = Circle_isContainPoint(CIRCLE_ID,mouse_x,mouse_y); 
 out; 
); 
function RECTANGLE_create(x,y,w,h) 
 local (RECT_ID,angle,scale,matrix) 
( 
 RECT_ID = STATIC_MASTER_BUFF_ID; 
 STATIC_MASTER_BUFF[RECT_ID] ="RECTANGLE"; 
 STATIC_MASTER_BUFF[RECT_ID+1] = 20; 
 STATIC_MASTER_BUFF[RECT_ID+2] = x; 
 STATIC_MASTER_BUFF[RECT_ID+3] = y; 
 STATIC_MASTER_BUFF[RECT_ID+4] = w; 
 STATIC_MASTER_BUFF[RECT_ID+5] = h; 
 STATIC_MASTER_BUFF[RECT_ID+6] = x+w; 
 STATIC_MASTER_BUFF[RECT_ID+7] = y+h; 
 STATIC_MASTER_BUFF[RECT_ID+8] = STATIC_MASTER_BUFF[STATIC_MASTER_BUFF_ID+1] ; 
 STATIC_MASTER_BUFF[RECT_ID+9] = angle; 
 STATIC_MASTER_BUFF[RECT_ID+10]= scale; 
 STATIC_MASTER_BUFF[RECT_ID+11]= matrix; 
 STATIC_MASTER_BUFF_ID += STRUCT_getElementNum(RECT_ID)+1; 
 RECT_ID; 
); 
function _RECTANGLE_getElementNum(RECT_ID) ( STATIC_MASTER_BUFF[RECT_ID+8];); 
function RECTANGLE_updateInfo(RECT_ID) 
( 
 ( abs(STATIC_MASTER_BUFF[RECT_ID+4] ) <1 ) ? 
 ( 
 STATIC_MASTER_BUFF[RECT_ID+4] = 1; 
 ); 
 ( abs(STATIC_MASTER_BUFF[RECT_ID+5] ) <1 ) ? 
 ( 
 STATIC_MASTER_BUFF[RECT_ID+5] = 1; 
 ); 
 STATIC_MASTER_BUFF[RECT_ID+6] = STATIC_MASTER_BUFF[RECT_ID+2]+STATIC_MASTER_BUFF[RECT_ID+4]; 
 STATIC_MASTER_BUFF[RECT_ID+7] = STATIC_MASTER_BUFF[RECT_ID+3]+STATIC_MASTER_BUFF[RECT_ID+5] 
); 
function RECTANGLE_getX(RECT_ID) (STATIC_MASTER_BUFF[RECT_ID+2];); 
function RECTANGLE_getY(RECT_ID) (STATIC_MASTER_BUFF[RECT_ID+3];); 
function RECTANGLE_getWidth(RECT_ID) (STATIC_MASTER_BUFF[RECT_ID+4];); 
function RECTANGLE_getHeight(RECT_ID) (STATIC_MASTER_BUFF[RECT_ID+5];); 
function RECTANGLE_getX2(RECT_ID) (STATIC_MASTER_BUFF[RECT_ID+6];); 
function RECTANGLE_getY2(RECT_ID) (STATIC_MASTER_BUFF[RECT_ID+7];); 
function RECTANGLE_getCenterX(RECT_ID) (RECTANGLE_getX(RECT_ID)+RECTANGLE_getWidth (RECT_ID)/2;); 
function RECTANGLE_getCenterY(RECT_ID) (RECTANGLE_getY(RECT_ID)+RECTANGLE_getHeight(RECT_ID)/2;); 
function RECTANGLE_setX(RECT_ID,newX) (STATIC_MASTER_BUFF[RECT_ID+2] = newX; RECTANGLE_updateInfo(RECT_ID) ); 
function RECTANGLE_setY(RECT_ID,newY) (STATIC_MASTER_BUFF[RECT_ID+3] = newY; RECTANGLE_updateInfo(RECT_ID) ); 
function RECTANGLE_setWidth(RECT_ID,newWidth) (STATIC_MASTER_BUFF[RECT_ID+4] = newWidth; RECTANGLE_updateInfo(RECT_ID) ); 
function RECTANGLE_setHeight(RECT_ID,newHeight) (STATIC_MASTER_BUFF[RECT_ID+5] = newHeight;RECTANGLE_updateInfo(RECT_ID) ); 
function RECTANGLE_setX2(RECT_ID,newX2) local (x1) 
( 
 STATIC_MASTER_BUFF[RECT_ID+6] = newX2; 
 x1 = RECTANGLE_getX(RECT_ID); 
 RECTANGLE_setWidth(RECT_ID,newX2-x1); 
); 
function RECTANGLE_setY2(RECT_ID,newY2) local (y1) 
( 
 STATIC_MASTER_BUFF[RECT_ID+7] = newY2; 
 y1 = RECTANGLE_getX(RECT_ID); 
 RECTANGLE_setHeight(RECT_ID,newY2-y1); 
); 
function RECTANGLE_move(RECT_ID,moveX,moveY)local(x,y) 
( 
 x = RECTANGLE_getX(RECT_ID); 
 y = RECTANGLE_getY(RECT_ID); 
 RECTANGLE_setX(RECT_ID,x+moveX); 
 RECTANGLE_setY(RECT_ID,y+moveY); 
); 
function RECTANGLE_moveP(RECT_ID,moveXp,moveYp)local(x,y,w,h) 
( 
 x = RECTANGLE_getX(RECT_ID); 
 y = RECTANGLE_getY(RECT_ID); 
 w = RECTANGLE_getWidth(RECT_ID); 
 h = RECTANGLE_getHeight(RECT_ID); 
 RECTANGLE_setX(RECT_ID,x+w * moveXp); 
 RECTANGLE_setY(RECT_ID,y+h * moveYp); 
); 
function RECTANGLE_removeFromTop(RECT_ID,removeValue)local(y,h) 
( 
 y = RECTANGLE_getY(RECT_ID); 
 h = RECTANGLE_getHeight(RECT_ID); 
 RECTANGLE_setY(RECT_ID,y+removeValue); 
 RECTANGLE_setHeight(RECT_ID,h-removeValue); 
 RECTANGLE_updateInfo(RECT_ID); 
); 
function RECTANGLE_removeFromBottom(RECT_ID,removeValue)local(h) 
( 
 h = RECTANGLE_getHeight(RECT_ID); 
 RECTANGLE_setHeight(RECT_ID,h-removeValue); 
 RECTANGLE_updateInfo(RECT_ID); 
); 
function RECTANGLE_removeFromLeft(RECT_ID,removeValue)local(x,w) 
( 
 x = RECTANGLE_getX(RECT_ID); 
 w = RECTANGLE_getWidth(RECT_ID); 
 RECTANGLE_setX(RECT_ID,x+removeValue); 
 RECTANGLE_setWidth(RECT_ID,w-removeValue); 
 RECTANGLE_updateInfo(RECT_ID); 
); 
function RECTANGLE_removeFromRight(RECT_ID,removeValue)local(w) 
( 
 w = RECTANGLE_getWidth(RECT_ID); 
 RECTANGLE_setWidth(RECT_ID,w-removeValue); 
 RECTANGLE_updateInfo(RECT_ID); 
); 
function RECTANGLE_cropFromTop(RECT_ID,cropValue)local(y) 
( 
 y = RECTANGLE_getY(RECT_ID); 
 RECTANGLE_setHeight(RECT_ID,cropValue); 
 RECTANGLE_updateInfo(RECT_ID); 
); 
function RECTANGLE_cropFromBottom(RECT_ID,cropValue)local(y,h) 
( 
 y = RECTANGLE_getY(RECT_ID); 
 h = RECTANGLE_getHeight(RECT_ID); 
 RECTANGLE_setY(RECT_ID,y+h-cropValue); 
 RECTANGLE_setHeight(RECT_ID,cropValue); 
 RECTANGLE_updateInfo(RECT_ID); 
); 
function RECTANGLE_cropFromLeft(RECT_ID,cropValue)local(x,w) 
( 
 x = RECTANGLE_getX(RECT_ID); 
 RECTANGLE_setX(RECT_ID,x); 
 RECTANGLE_setWidth(RECT_ID,cropValue); 
 RECTANGLE_updateInfo(RECT_ID); 
); 
function RECTANGLE_cropFromRight(RECT_ID,cropValue)local(x,w) 
( 
 x = RECTANGLE_getX(RECT_ID); 
 w = RECTANGLE_getWidth(RECT_ID); 
 RECTANGLE_setX(RECT_ID,x+w-cropValue); 
 RECTANGLE_setWidth(RECT_ID,cropValue); 
 RECTANGLE_updateInfo(RECT_ID); 
); 
function RECTANGLE_cropFromTopP(RECT_ID,cropValue)local(h,val,y) 
( 
 y = RECTANGLE_getY(RECT_ID); 
 h = RECTANGLE_getHeight(RECT_ID); 
 val = h * cropValue; 
 RECTANGLE_cropFromTop(RECT_ID,val); 
); 
function RECTANGLE_cropFromBottomP(RECT_ID,cropValue)local(h,val) 
( 
 h = RECTANGLE_getHeight(RECT_ID); 
 val = h * cropValue; 
 RECTANGLE_cropFromBottom(RECT_ID,val); 
); 
function RECTANGLE_cropFromLeftP(RECT_ID,cropValue)local(w,val) 
( 
 w = RECTANGLE_getWidth(RECT_ID); 
 val = w * cropValue; 
 RECTANGLE_cropFromLeft(RECT_ID,val); 
); 
function RECTANGLE_cropFromRightP(RECT_ID,cropValue)local(w,val) 
( 
 w = RECTANGLE_getWidth(RECT_ID); 
 val = w * cropValue; 
 RECTANGLE_cropFromRight(RECT_ID,val); 
); 
function RECTANGLE_removeFromTopP(RECT_ID,removeValueRelative)local(y,h,rVelue) 
( 
 y = RECTANGLE_getY(RECT_ID); 
 h = RECTANGLE_getHeight(RECT_ID); 
 rVelue = h *removeValueRelative; 
 RECTANGLE_setY(RECT_ID,y+rVelue); 
 RECTANGLE_setHeight(RECT_ID,h-rVelue); 
 RECTANGLE_updateInfo(RECT_ID); 
); 
function RECTANGLE_removeFromBottomP(RECT_ID,removeValueRelative)local(h,rVelue) 
( 
 h = RECTANGLE_getHeight(RECT_ID); 
 rVelue = h *removeValueRelative; 
 RECTANGLE_setHeight(RECT_ID,h-rVelue); 
 RECTANGLE_updateInfo(RECT_ID); 
); 
function RECTANGLE_removeFromLeftP(RECT_ID,removeValueRelative)local(x,w,rVelue) 
( 
 x = RECTANGLE_getX(RECT_ID); 
 w = RECTANGLE_getWidth(RECT_ID); 
 rVelue = w *removeValueRelative; 
 RECTANGLE_setX(RECT_ID,x+rVelue); 
 RECTANGLE_setWidth(RECT_ID,w-rVelue); 
 RECTANGLE_updateInfo(RECT_ID); 
); 
function RECTANGLE_removeFromRightP(RECT_ID,removeValueRelative)local(w,rVelue) 
( 
 w = RECTANGLE_getWidth(RECT_ID); 
 rVelue = w *removeValueRelative; 
 RECTANGLE_setWidth(RECT_ID,w-rVelue); 
 RECTANGLE_updateInfo(RECT_ID); 
); 
function RECTANGLE_reduce(RECT_ID,reduceX,reduceY) local (x,y,w,h) 
( 
 x = RECTANGLE_getX(RECT_ID); 
 y = RECTANGLE_getY(RECT_ID); 
 w = RECTANGLE_getWidth(RECT_ID); 
 h = RECTANGLE_getHeight(RECT_ID); 
 RECTANGLE_setX(RECT_ID,x+reduceX); 
 RECTANGLE_setY(RECT_ID,y+reduceY); 
 RECTANGLE_setWidth(RECT_ID,w-reduceX*2); 
 RECTANGLE_setHeight(RECT_ID,h-reduceY*2); 
 RECTANGLE_updateInfo(RECT_ID); 
); 
function RECTANGLE_reduceP(RECT_ID,reduceXrel,reduceYrel) local (x,y,w,h,xRelV,yRelV) 
( 
 x = RECTANGLE_getX(RECT_ID); 
 y = RECTANGLE_getY(RECT_ID); 
 w = RECTANGLE_getWidth(RECT_ID); 
 h = RECTANGLE_getHeight(RECT_ID); 
 xRelV = w * reduceXrel; 
 yRelV = h * reduceYrel; 
 RECTANGLE_setX(RECT_ID,x+xRelV); 
 RECTANGLE_setY(RECT_ID,y+yRelV); 
 RECTANGLE_setWidth(RECT_ID,w-xRelV*2); 
 RECTANGLE_setHeight(RECT_ID,h-yRelV*2); 
 RECTANGLE_updateInfo(RECT_ID); 
); 
function RECTANGLE_expand(RECT_ID,expandX,expandY) local (x,y,w,h) 
( 
 x = RECTANGLE_getX(RECT_ID); 
 y = RECTANGLE_getY(RECT_ID); 
 w = RECTANGLE_getWidth(RECT_ID); 
 h = RECTANGLE_getHeight(RECT_ID); 
 RECTANGLE_setX(RECT_ID,x-expandX); 
 RECTANGLE_setY(RECT_ID,y-expandY); 
 RECTANGLE_setWidth(RECT_ID,w+expandX*2); 
 RECTANGLE_setHeight(RECT_ID,h+expandY*2); 
 RECTANGLE_updateInfo(RECT_ID); 
); 
function __RECTANGLE_isContainPoint__check_(targetX,targetY,curentX,currentY,nextX,nextY) 
 local (tempX1,tempY1,tempX2,tempY2,checkedOut) 
( 
 tempX1 = nextX - curentX; 
 tempY1 = nextY - currentY; 
 tempX2 = targetX - curentX; 
 tempY2 = targetY - currentY; 
 (tempX1 * tempY2 - tempX2 * tempY1 < 0) ? 
 ( 
 checkedOut=1 
 ):( 
 checkedOut=-1 
 ); 
 checkedOut; 
); 
function RECTANGLE_isContainPoint(RECT_ID,targetX,targetY) 
 local (out,x,y,x2,y2,xx1,yy1,xx2,yy2,xx3,yy3,xx4,yy4,check1,check2,check3,check4) 
( 
 x = RECTANGLE_getX(RECT_ID); 
 y = RECTANGLE_getY(RECT_ID); 
 x2 = RECTANGLE_getX2(RECT_ID); 
 y2 = RECTANGLE_getY2(RECT_ID); 
 xx1 = x; yy1=y; 
 xx2 = x2;yy2=y; 
 xx3 = x2;yy3=y2; 
 xx4 = x; yy4=y2; 
 check1 = __RECTANGLE_isContainPoint__check_(targetX,targetY,xx1,yy1,xx2,yy2); 
 check2 = __RECTANGLE_isContainPoint__check_(targetX,targetY,xx2,yy2,xx3,yy3); 
 check3 = __RECTANGLE_isContainPoint__check_(targetX,targetY,xx3,yy3,xx4,yy4); 
 check4 = __RECTANGLE_isContainPoint__check_(targetX,targetY,xx4,yy4,xx1,yy1); 
 ( RECTANGLE_getWidth (RECT_ID) > 0 
 && RECTANGLE_getHeight(RECT_ID) > 0 
 && abs(check1+check2+check3+check4) >=4 
 ) ? 
 ( 
 out = true; 
 ):( 
 out = false; 
 ); 
 out; 
); 
function RECTANGLE_isContainMouse(RECT_ID)local (out) 
( 
 out = RECTANGLE_isContainPoint(RECT_ID,mouse_x,mouse_y); 
 out; 
); 
function RECTANGLE_copyTo(destRECT_ID,srcRECT_ID) 
( 
 RECTANGLE_setX (destRECT_ID,RECTANGLE_getX(srcRECT_ID)); 
 RECTANGLE_setY (destRECT_ID,RECTANGLE_getY(srcRECT_ID)); 
 RECTANGLE_setWidth (destRECT_ID,RECTANGLE_getWidth(srcRECT_ID)); 
 RECTANGLE_setHeight(destRECT_ID,RECTANGLE_getHeight(srcRECT_ID)); 
); 
function RECTANGLE_compare(RECT_ID,targetRECT_ID)local ( out ) 
( 
 out = ( RECTANGLE_getX(RECT_ID) == RECTANGLE_getX( targetRECT_ID) 
 && RECTANGLE_getY(RECT_ID) == RECTANGLE_getY( targetRECT_ID) 
 && RECTANGLE_getWidth(RECT_ID) == RECTANGLE_getWidth( targetRECT_ID) 
 && RECTANGLE_getHeight(RECT_ID) == RECTANGLE_getHeight( targetRECT_ID) 
 ); 
 (out ==true ); 
); 
function RECTANGLE_isSame(RECT_ID,targetRECT_ID)local ( out ) 
( 
 out = ( RECTANGLE_getX(RECT_ID) == RECTANGLE_getX( targetRECT_ID) 
 && RECTANGLE_getY(RECT_ID) == RECTANGLE_getY( targetRECT_ID) 
 && RECTANGLE_getWidth(RECT_ID) == RECTANGLE_getWidth( targetRECT_ID) 
 && RECTANGLE_getHeight(RECT_ID) == RECTANGLE_getHeight( targetRECT_ID) 
 ); 
 (out ==true ); 
); 
function CANVAS_create(width,height) 
local (CANVAS_ID,canvasSLOTID,ww_,hh_,baseClassElementNum) 
( 
 CANVAS_ID = RECTANGLE_create(0,0,width ,height); 
 baseClassElementNum = _RECTANGLE_getElementNum(CANVAS_ID); 
 STATIC_MASTER_BUFF[CANVAS_ID ] = "CANVAS"; 
 STATIC_MASTER_BUFF[CANVAS_ID +1] = baseClassElementNum +3; 
 STATIC_MASTER_BUFF[CANVAS_ID + baseClassElementNum + 1] = STATIC_CANVAS_SLOT_CURSOL; 
 STATIC_MASTER_BUFF[CANVAS_ID + baseClassElementNum + 2] = false; 
 STATIC_MASTER_BUFF[CANVAS_ID + baseClassElementNum + 3] = STATIC_MASTER_BUFF[CANVAS_ID +1]; 
 STATIC_MASTER_BUFF_ID += STRUCT_getElementNum(CANVAS_ID)+1; 
 STATIC_CANVAS_SLOT_CURSOL +=1; 
 CANVAS_ID; 
); 
function _CANVAS_getElementNum(CANVAS_ID) ( STATIC_MASTER_BUFF[CANVAS_ID +_RECTANGLE_getElementNum(CANVAS_ID)+3];); 
function CANVAS_isCreatedCanvas(CANVAS_ID) ( STATIC_MASTER_BUFF[CANVAS_ID +_RECTANGLE_getElementNum(CANVAS_ID)+2];); 
function _CANVAS_setisCreatedCanvas(CANVAS_ID,v)( STATIC_MASTER_BUFF[CANVAS_ID +_RECTANGLE_getElementNum(CANVAS_ID)+2] = v;); 
function CANVAS_recreateCanvas(CANVAS_ID)local (width,height,canvasSlot,cW,cH) 
( 
 width = RECTANGLE_getWidth(CANVAS_ID); 
 height = RECTANGLE_getHeight(CANVAS_ID); 
 canvasSlot = STATIC_MASTER_BUFF[ CANVAS_ID +_RECTANGLE_getElementNum(CANVAS_ID)+1]; 
 gfx_getimgdim(canvasSlot,cW,cH); 
 ( cW > 0 
 && cH > 0 
 && CANVAS_isCreatedCanvas(CANVAS_ID) ==false 
 )? 
 ( 
 _CANVAS_setisCreatedCanvas(CANVAS_ID,true); 
 ):( 
 gfx_setimgdim(canvasSlot, 0,0); 
 gfx_setimgdim(canvasSlot, width,height); 
 ( gfx_w != 0 )? 
 ( 
 _CANVAS_setisCreatedCanvas(CANVAS_ID,true); 
 ); 
 ); 
); 
function CANVAS_getCanvaseSlotID(CANVAS_ID)local (out) 
( 
 ( CANVAS_isCreatedCanvas(CANVAS_ID) ==false )? 
 ( 
 CANVAS_recreateCanvas(CANVAS_ID); 
 ); 
 out = STATIC_MASTER_BUFF[ CANVAS_ID +_RECTANGLE_getElementNum(CANVAS_ID)+1 ]; 
 out; 
); 
function CANVAS_clearCanvas(CANVAS_ID) 
( 
 CANVAS_recreateCanvas(CANVAS_ID); 
); 
function CANVAS_resizeCanvas(CANVAS_ID,width,height) 
( 
 RECTANGLE_setWidth(CANVAS_ID,width); 
 RECTANGLE_setHeight(CANVAS_ID,height); 
 CANVAS_recreateCanvas(CANVAS_ID); 
); 
function changeGfxColorByPreset(colorName ) 
( 
 ( colorName == "aliceblue" )?( gfx_r = 240/255;gfx_g = 248/255;gfx_b = 255/255;) 
 :(colorName == "antiquewhite" )?( gfx_r = 250/255;gfx_g = 235/255;gfx_b = 215/255;) 
 :(colorName == "aqua" )?( gfx_r = 0/255;gfx_g = 255/255;gfx_b = 255/255;) 
 :(colorName == "aquamarine" )?( gfx_r = 127/255;gfx_g = 255/255;gfx_b = 212/255;) 
 :(colorName == "azure" )?( gfx_r = 240/255;gfx_g = 255/255;gfx_b = 255/255;) 
 :(colorName == "beige" )?( gfx_r = 245/255;gfx_g = 245/255;gfx_b = 220/255;) 
 :(colorName == "bisque" )?( gfx_r = 255/255;gfx_g = 228/255;gfx_b = 196/255;) 
 :(colorName == "black" )?( gfx_r = 0/255;gfx_g = 0/255;gfx_b = 0/255;) 
 :(colorName == "blanchedalmond" )?( gfx_r = 255/255;gfx_g = 235/255;gfx_b = 205/255;) 
 :(colorName == "blue" )?( gfx_r = 0/255;gfx_g = 0/255;gfx_b = 255/255;) 
 :(colorName == "blueviolet" )?( gfx_r = 138/255;gfx_g = 43/255;gfx_b = 226/255;) 
 :(colorName == "brown" )?( gfx_r = 165/255;gfx_g = 42/255;gfx_b = 42 /255;) 
 :(colorName == "burlywood" )?( gfx_r = 222/255;gfx_g = 184/255;gfx_b = 135/255;) 
 :(colorName == "cadetblue" )?( gfx_r = 95/255;gfx_g = 158/255;gfx_b = 160/255;) 
 :(colorName == "chartreuse" )?( gfx_r = 127/255;gfx_g = 255/255;gfx_b = 0 /255;) 
 :(colorName == "chocolate" )?( gfx_r = 210/255;gfx_g = 105/255;gfx_b = 30 /255;) 
 :(colorName == "coral" )?( gfx_r = 255/255;gfx_g = 127/255;gfx_b = 80 /255;) 
 :(colorName == "cornflowerblue" )?( gfx_r = 100/255;gfx_g = 149/255;gfx_b = 237/255;) 
 :(colorName == "cornsilk" )?( gfx_r = 255/255;gfx_g = 248/255;gfx_b = 220/255;) 
 :(colorName == "crimson" )?( gfx_r = 220/255;gfx_g = 20/255;gfx_b = 60 /255;) 
 :(colorName == "cyan" )?( gfx_r = 0/255;gfx_g = 255/255;gfx_b = 255/255;) 
 :(colorName == "darkblue" )?( gfx_r = 0/255;gfx_g = 0/255;gfx_b = 139/255;) 
 :(colorName == "darkcyan" )?( gfx_r = 0/255;gfx_g = 139/255;gfx_b = 139/255;) 
 :(colorName == "darkgoldenrod" )?( gfx_r = 184/255;gfx_g = 134/255;gfx_b = 11 /255;) 
 :(colorName == "darkgray" )?( gfx_r = 169/255;gfx_g = 169/255;gfx_b = 169/255;) 
 :(colorName == "darkgreen" )?( gfx_r = 0/255;gfx_g = 100/255;gfx_b = 0 /255;) 
 :(colorName == "darkgrey" )?( gfx_r = 169/255;gfx_g = 169/255;gfx_b = 169/255;) 
 :(colorName == "darkkhaki" )?( gfx_r = 189/255;gfx_g = 183/255;gfx_b = 107/255;) 
 :(colorName == "darkmagenta" )?( gfx_r = 139/255;gfx_g = 0/255;gfx_b = 139/255;) 
 :(colorName == "darkolivegreen" )?( gfx_r = 85/255;gfx_g = 107/255;gfx_b = 47 /255;) 
 :(colorName == "darkorange" )?( gfx_r = 255/255;gfx_g = 140/255;gfx_b = 0 /255;) 
 :(colorName == "darkorchid" )?( gfx_r = 153/255;gfx_g = 50/255;gfx_b = 204/255;) 
 :(colorName == "darkred" )?( gfx_r = 139/255;gfx_g = 0/255;gfx_b = 0 /255;) 
 :(colorName == "darksalmon" )?( gfx_r = 233/255;gfx_g = 150/255;gfx_b = 122/255;) 
 :(colorName == "darkseagreen" )?( gfx_r = 143/255;gfx_g = 188/255;gfx_b = 143/255;) 
 :(colorName == "darkslateblue" )?( gfx_r = 72/255;gfx_g = 61/255;gfx_b = 139/255;) 
 :(colorName == "darkslategray" )?( gfx_r = 47/255;gfx_g = 79/255;gfx_b = 79 /255;) 
 :(colorName == "darkturquoise" )?( gfx_r = 0/255;gfx_g = 206/255;gfx_b = 209/255;) 
 :(colorName == "darkviolet" )?( gfx_r = 148/255;gfx_g = 0/255;gfx_b = 211/255;) 
 :(colorName == "deeppink" )?( gfx_r = 255/255;gfx_g = 20/255;gfx_b = 147/255;) 
 :(colorName == "deepskyblue" )?( gfx_r = 0/255;gfx_g = 191/255;gfx_b = 255/255;) 
 :(colorName == "dimgrey" )?( gfx_r = 105/255;gfx_g = 105/255;gfx_b = 105/255;) 
 :(colorName == "dodgerblue" )?( gfx_r = 30/255;gfx_g = 144/255;gfx_b = 255/255;) 
 :(colorName == "firebrick" )?( gfx_r = 178/255;gfx_g = 34/255;gfx_b = 34 /255;) 
 :(colorName == "floralwhite" )?( gfx_r = 255/255;gfx_g = 250/255;gfx_b = 240/255;) 
 :(colorName == "forestgreen" )?( gfx_r = 34/255;gfx_g = 139/255;gfx_b = 34 /255;) 
 :(colorName == "fuchsia" )?( gfx_r = 255/255;gfx_g = 0/255;gfx_b = 255/255;) 
 :(colorName == "gainsboro" )?( gfx_r = 220/255;gfx_g = 220/255;gfx_b = 220/255;) 
 :(colorName == "ghostwhite" )?( gfx_r = 248/255;gfx_g = 248/255;gfx_b = 255/255;) 
 :(colorName == "gold" )?( gfx_r = 255/255;gfx_g = 215/255;gfx_b = 0 /255;) 
 :(colorName == "goldenrod" )?( gfx_r = 218/255;gfx_g = 165/255;gfx_b = 32 /255;) 
 :(colorName == "grey" )?( gfx_r = 128/255;gfx_g = 128/255;gfx_b = 128/255;) 
 :(colorName == "green" )?( gfx_r = 0/255;gfx_g = 128/255;gfx_b = 0 /255;) 
 :(colorName == "greenyellow" )?( gfx_r = 173/255;gfx_g = 255/255;gfx_b = 47 /255;) 
 :(colorName == "honeydew" )?( gfx_r = 240/255;gfx_g = 255/255;gfx_b = 240/255;) 
 :(colorName == "hotpink" )?( gfx_r = 255/255;gfx_g = 105/255;gfx_b = 180/255;) 
 :(colorName == "indianred" )?( gfx_r = 205/255;gfx_g = 92/255;gfx_b = 92 /255;) 
 :(colorName == "indigo" )?( gfx_r = 75/255;gfx_g = 0/255;gfx_b = 130/255;) 
 :(colorName == "ivory" )?( gfx_r = 255/255;gfx_g = 255/255;gfx_b = 240/255;) 
 :(colorName == "khaki" )?( gfx_r = 240/255;gfx_g = 230/255;gfx_b = 140/255;) 
 :(colorName == "lavender" )?( gfx_r = 230/255;gfx_g = 230/255;gfx_b = 250/255;) 
 :(colorName == "lavenderblush" )?( gfx_r = 255/255;gfx_g = 240/255;gfx_b = 245/255;) 
 :(colorName == "lawngreen" )?( gfx_r = 124/255;gfx_g = 252/255;gfx_b = 0 /255;) 
 :(colorName == "lemonchiffon" )?( gfx_r = 255/255;gfx_g = 250/255;gfx_b = 205/255;) 
 :(colorName == "lightblue" )?( gfx_r = 173/255;gfx_g = 216/255;gfx_b = 230/255;) 
 :(colorName == "lightcoral" )?( gfx_r = 240/255;gfx_g = 128/255;gfx_b = 128/255;) 
 :(colorName == "lightcyan" )?( gfx_r = 224/255;gfx_g = 255/255;gfx_b = 255/255;) 
 :(colorName == "lightgoldenrodyellow" )?( gfx_r = 250/255;gfx_g = 250/255;gfx_b = 210/255;) 
 :(colorName == "lightgray" )?( gfx_r = 211/255;gfx_g = 211/255;gfx_b = 211/255;) 
 :(colorName == "lightgreen" )?( gfx_r = 144/255;gfx_g = 238/255;gfx_b = 144/255;) 
 :(colorName == "lightgrey" )?( gfx_r = 211/255;gfx_g = 211/255;gfx_b = 211/255;) 
 :(colorName == "lightpink" )?( gfx_r = 255/255;gfx_g = 182/255;gfx_b = 193/255;) 
 :(colorName == "lightsalmon" )?( gfx_r = 255/255;gfx_g = 160/255;gfx_b = 122/255;) 
 :(colorName == "lightseagreen" )?( gfx_r = 32/255;gfx_g = 178/255;gfx_b = 170/255;) 
 :(colorName == "lightskyblue" )?( gfx_r = 135/255;gfx_g = 206/255;gfx_b = 250/255;) 
 :(colorName == "lightslategrey" )?( gfx_r = 119/255;gfx_g = 136/255;gfx_b = 153/255;) 
 :(colorName == "lightsteelblue" )?( gfx_r = 176/255;gfx_g = 196/255;gfx_b = 222/255;) 
 :(colorName == "lightyellow" )?( gfx_r = 255/255;gfx_g = 255/255;gfx_b = 224/255;) 
 :(colorName == "lime" )?( gfx_r = 0/255;gfx_g = 255/255;gfx_b = 0 /255;) 
 :(colorName == "limegreen" )?( gfx_r = 50/255;gfx_g = 205/255;gfx_b = 50 /255;) 
 :(colorName == "linen" )?( gfx_r = 250/255;gfx_g = 240/255;gfx_b = 230/255;) 
 :(colorName == "magenta" )?( gfx_r = 255/255;gfx_g = 0/255;gfx_b = 255/255;) 
 :(colorName == "maroon" )?( gfx_r = 128/255;gfx_g = 0/255;gfx_b = 0 /255;) 
 :(colorName == "mediumaquamarine" )?( gfx_r = 102/255;gfx_g = 205/255;gfx_b = 170/255;) 
 :(colorName == "mediumblue" )?( gfx_r = 0/255;gfx_g = 0/255;gfx_b = 205/255;) 
 :(colorName == "mediumorchid" )?( gfx_r = 186/255;gfx_g = 85/255;gfx_b = 211/255;) 
 :(colorName == "mediumpurple" )?( gfx_r = 147/255;gfx_g = 112/255;gfx_b = 219/255;) 
 :(colorName == "mediumseagreen" )?( gfx_r = 60/255;gfx_g = 179/255;gfx_b = 113/255;) 
 :(colorName == "mediumslateblue" )?( gfx_r = 123/255;gfx_g = 104/255;gfx_b = 238/255;) 
 :(colorName == "mediumspringgreen" )?( gfx_r = 0/255;gfx_g = 250/255;gfx_b = 154/255;) 
 :(colorName == "mediumturquoise" )?( gfx_r = 72/255;gfx_g = 209/255;gfx_b = 204/255;) 
 :(colorName == "mediumvioletred" )?( gfx_r = 199/255;gfx_g = 21/255;gfx_b = 133/255;) 
 :(colorName == "midnightblue" )?( gfx_r = 25/255;gfx_g = 25/255;gfx_b = 112/255;) 
 :(colorName == "mintcream" )?( gfx_r = 245/255;gfx_g = 255/255;gfx_b = 250/255;) 
 :(colorName == "mistyrose" )?( gfx_r = 255/255;gfx_g = 228/255;gfx_b = 225/255;) 
 :(colorName == "moccasin" )?( gfx_r = 255/255;gfx_g = 228/255;gfx_b = 181/255;) 
 :(colorName == "navajowhite" )?( gfx_r = 255/255;gfx_g = 222/255;gfx_b = 173/255;) 
 :(colorName == "navy" )?( gfx_r = 0/255;gfx_g = 0/255;gfx_b = 128/255;) 
 :(colorName == "oldlace" )?( gfx_r = 253/255;gfx_g = 245/255;gfx_b = 230/255;) 
 :(colorName == "olive" )?( gfx_r = 128/255;gfx_g = 128/255;gfx_b = 0 /255;) 
 :(colorName == "olivedrab" )?( gfx_r = 107/255;gfx_g = 142/255;gfx_b = 35 /255;) 
 :(colorName == "orange" )?( gfx_r = 255/255;gfx_g = 165/255;gfx_b = 0 /255;) 
 :(colorName == "orangered" )?( gfx_r = 255/255;gfx_g = 69/255;gfx_b = 0 /255;) 
 :(colorName == "orchid" )?( gfx_r = 218/255;gfx_g = 112/255;gfx_b = 214/255;) 
 :(colorName == "palegoldenrod" )?( gfx_r = 238/255;gfx_g = 232/255;gfx_b = 170/255;) 
 :(colorName == "palegreen" )?( gfx_r = 152/255;gfx_g = 251/255;gfx_b = 152/255;) 
 :(colorName == "paleturquoise" )?( gfx_r = 175/255;gfx_g = 238/255;gfx_b = 238/255;) 
 :(colorName == "palevioletred" )?( gfx_r = 219/255;gfx_g = 112/255;gfx_b = 147/255;) 
 :(colorName == "papayawhip" )?( gfx_r = 255/255;gfx_g = 239/255;gfx_b = 213/255;) 
 :(colorName == "peachpuff" )?( gfx_r = 255/255;gfx_g = 218/255;gfx_b = 185/255;) 
 :(colorName == "peru" )?( gfx_r = 205/255;gfx_g = 133/255;gfx_b = 63 /255;) 
 :(colorName == "pink" )?( gfx_r = 255/255;gfx_g = 192/255;gfx_b = 203/255;) 
 :(colorName == "plum" )?( gfx_r = 221/255;gfx_g = 160/255;gfx_b = 221/255;) 
 :(colorName == "powderblue" )?( gfx_r = 176/255;gfx_g = 224/255;gfx_b = 230/255;) 
 :(colorName == "purple" )?( gfx_r = 128/255;gfx_g = 0/255;gfx_b = 128/255;) 
 :(colorName == "red" )?( gfx_r = 255/255;gfx_g = 0/255;gfx_b = 0 /255;) 
 :(colorName == "rosybrown" )?( gfx_r = 188/255;gfx_g = 143/255;gfx_b = 143/255;) 
 :(colorName == "royalblue" )?( gfx_r = 65/255;gfx_g = 105/255;gfx_b = 225/255;) 
 :(colorName == "saddlebrown" )?( gfx_r = 139/255;gfx_g = 69/255;gfx_b = 19 /255;) 
 :(colorName == "salmon" )?( gfx_r = 250/255;gfx_g = 128/255;gfx_b = 114/255;) 
 :(colorName == "sandybrown" )?( gfx_r = 244/255;gfx_g = 164/255;gfx_b = 96 /255;) 
 :(colorName == "seagreen" )?( gfx_r = 46/255;gfx_g = 139/255;gfx_b = 87 /255;) 
 :(colorName == "seashell" )?( gfx_r = 255/255;gfx_g = 245/255;gfx_b = 238/255;) 
 :(colorName == "sienna" )?( gfx_r = 160/255;gfx_g = 82/255;gfx_b = 45 /255;) 
 :(colorName == "silver" )?( gfx_r = 192/255;gfx_g = 192/255;gfx_b = 192/255;) 
 :(colorName == "skyblue" )?( gfx_r = 135/255;gfx_g = 206/255;gfx_b = 235/255;) 
 :(colorName == "slateblue" )?( gfx_r = 106/255;gfx_g = 90/255;gfx_b = 205/255;) 
 :(colorName == "slategrey" )?( gfx_r = 112/255;gfx_g = 128/255;gfx_b = 144/255;) 
 :(colorName == "snow" )?( gfx_r = 255/255;gfx_g = 250/255;gfx_b = 250/255;) 
 :(colorName == "springgreen" )?( gfx_r = 0/255;gfx_g = 255/255;gfx_b = 127/255;) 
 :(colorName == "steelblue" )?( gfx_r = 70/255;gfx_g = 130/255;gfx_b = 180/255;) 
 :(colorName == "tan" )?( gfx_r = 210/255;gfx_g = 180/255;gfx_b = 140/255;) 
 :(colorName == "teal" )?( gfx_r = 0/255;gfx_g = 128/255;gfx_b = 128/255;) 
 :(colorName == "thistle" )?( gfx_r = 216/255;gfx_g = 191/255;gfx_b = 216/255;) 
 :(colorName == "tomato" )?( gfx_r = 255/255;gfx_g = 99/255;gfx_b = 71 /255;) 
 :(colorName == "turquoise" )?( gfx_r = 64/255;gfx_g = 224/255;gfx_b = 208/255;) 
 :(colorName == "violet" )?( gfx_r = 238/255;gfx_g = 130/255;gfx_b = 238/255;) 
 :(colorName == "wheat" )?( gfx_r = 245/255;gfx_g = 222/255;gfx_b = 179/255;) 
 :(colorName == "white" )?( gfx_r = 255/255;gfx_g = 255/255;gfx_b = 255/255;) 
 :(colorName == "whitesmoke" )?( gfx_r = 245/255;gfx_g = 245/255;gfx_b = 245/255;) 
 :(colorName == "yellow" )?( gfx_r = 255/255;gfx_g = 255/255;gfx_b = 0 /255;) 
 :(colorName == "yellowgreen" )?( gfx_r = 154/255;gfx_g = 205/255;gfx_b = 50 /255;) 
 ; 
); 
function COLOR_changeColorByName(COLOR_ID,colorName ) 
( 
 ( colorName == "aliceblue" )?( COLOR_setA(COLOR_ID,240/255);COLOR_setG(COLOR_ID,248/255);COLOR_setB(COLOR_ID,255/255);) 
 :(colorName == "antiquewhite" )?( COLOR_setA(COLOR_ID,250/255);COLOR_setG(COLOR_ID,235/255);COLOR_setB(COLOR_ID,215/255);) 
 :(colorName == "aqua" )?( COLOR_setA(COLOR_ID, 0/255);COLOR_setG(COLOR_ID,255/255);COLOR_setB(COLOR_ID,255/255);) 
 :(colorName == "aquamarine" )?( COLOR_setA(COLOR_ID,127/255);COLOR_setG(COLOR_ID,255/255);COLOR_setB(COLOR_ID,212/255);) 
 :(colorName == "azure" )?( COLOR_setA(COLOR_ID,240/255);COLOR_setG(COLOR_ID,255/255);COLOR_setB(COLOR_ID,255/255);) 
 :(colorName == "beige" )?( COLOR_setA(COLOR_ID,245/255);COLOR_setG(COLOR_ID,245/255);COLOR_setB(COLOR_ID,220/255);) 
 :(colorName == "bisque" )?( COLOR_setA(COLOR_ID,255/255);COLOR_setG(COLOR_ID,228/255);COLOR_setB(COLOR_ID,196/255);) 
 :(colorName == "black" )?( COLOR_setA(COLOR_ID, 0/255);COLOR_setG(COLOR_ID, 0/255);COLOR_setB(COLOR_ID, 0/255);) 
 :(colorName == "blanchedalmond" )?( COLOR_setA(COLOR_ID,255/255);COLOR_setG(COLOR_ID,235/255);COLOR_setB(COLOR_ID,205/255);) 
 :(colorName == "blue" )?( COLOR_setA(COLOR_ID, 0/255);COLOR_setG(COLOR_ID, 0/255);COLOR_setB(COLOR_ID,255/255);) 
 :(colorName == "blueviolet" )?( COLOR_setA(COLOR_ID,138/255);COLOR_setG(COLOR_ID, 43/255);COLOR_setB(COLOR_ID,226/255);) 
 :(colorName == "brown" )?( COLOR_setA(COLOR_ID,165/255);COLOR_setG(COLOR_ID, 42/255);COLOR_setB(COLOR_ID,42 /255);) 
 :(colorName == "burlywood" )?( COLOR_setA(COLOR_ID,222/255);COLOR_setG(COLOR_ID,184/255);COLOR_setB(COLOR_ID,135/255);) 
 :(colorName == "cadetblue" )?( COLOR_setA(COLOR_ID, 95/255);COLOR_setG(COLOR_ID,158/255);COLOR_setB(COLOR_ID,160/255);) 
 :(colorName == "chartreuse" )?( COLOR_setA(COLOR_ID,127/255);COLOR_setG(COLOR_ID,255/255);COLOR_setB(COLOR_ID,0 /255);) 
 :(colorName == "chocolate" )?( COLOR_setA(COLOR_ID,210/255);COLOR_setG(COLOR_ID,105/255);COLOR_setB(COLOR_ID,30 /255);) 
 :(colorName == "coral" )?( COLOR_setA(COLOR_ID,255/255);COLOR_setG(COLOR_ID,127/255);COLOR_setB(COLOR_ID,80 /255);) 
 :(colorName == "cornflowerblue" )?( COLOR_setA(COLOR_ID,100/255);COLOR_setG(COLOR_ID,149/255);COLOR_setB(COLOR_ID,237/255);) 
 :(colorName == "cornsilk" )?( COLOR_setA(COLOR_ID,255/255);COLOR_setG(COLOR_ID,248/255);COLOR_setB(COLOR_ID,220/255);) 
 :(colorName == "crimson" )?( COLOR_setA(COLOR_ID,220/255);COLOR_setG(COLOR_ID, 20/255);COLOR_setB(COLOR_ID,60 /255);) 
 :(colorName == "cyan" )?( COLOR_setA(COLOR_ID, 0/255);COLOR_setG(COLOR_ID,255/255);COLOR_setB(COLOR_ID,255/255);) 
 :(colorName == "darkblue" )?( COLOR_setA(COLOR_ID, 0/255);COLOR_setG(COLOR_ID, 0/255);COLOR_setB(COLOR_ID,139/255);) 
 :(colorName == "darkcyan" )?( COLOR_setA(COLOR_ID, 0/255);COLOR_setG(COLOR_ID,139/255);COLOR_setB(COLOR_ID,139/255);) 
 :(colorName == "darkgoldenrod" )?( COLOR_setA(COLOR_ID,184/255);COLOR_setG(COLOR_ID,134/255);COLOR_setB(COLOR_ID,11 /255);) 
 :(colorName == "darkgray" )?( COLOR_setA(COLOR_ID,169/255);COLOR_setG(COLOR_ID,169/255);COLOR_setB(COLOR_ID,169/255);) 
 :(colorName == "darkgreen" )?( COLOR_setA(COLOR_ID, 0/255);COLOR_setG(COLOR_ID,100/255);COLOR_setB(COLOR_ID,0 /255);) 
 :(colorName == "darkgrey" )?( COLOR_setA(COLOR_ID,169/255);COLOR_setG(COLOR_ID,169/255);COLOR_setB(COLOR_ID,169/255);) 
 :(colorName == "darkkhaki" )?( COLOR_setA(COLOR_ID,189/255);COLOR_setG(COLOR_ID,183/255);COLOR_setB(COLOR_ID,107/255);) 
 :(colorName == "darkmagenta" )?( COLOR_setA(COLOR_ID,139/255);COLOR_setG(COLOR_ID, 0/255);COLOR_setB(COLOR_ID,139/255);) 
 :(colorName == "darkolivegreen" )?( COLOR_setA(COLOR_ID, 85/255);COLOR_setG(COLOR_ID,107/255);COLOR_setB(COLOR_ID,47 /255);) 
 :(colorName == "darkorange" )?( COLOR_setA(COLOR_ID,255/255);COLOR_setG(COLOR_ID,140/255);COLOR_setB(COLOR_ID,0 /255);) 
 :(colorName == "darkorchid" )?( COLOR_setA(COLOR_ID,153/255);COLOR_setG(COLOR_ID, 50/255);COLOR_setB(COLOR_ID,204/255);) 
 :(colorName == "darkred" )?( COLOR_setA(COLOR_ID,139/255);COLOR_setG(COLOR_ID, 0/255);COLOR_setB(COLOR_ID,0 /255);) 
 :(colorName == "darksalmon" )?( COLOR_setA(COLOR_ID,233/255);COLOR_setG(COLOR_ID,150/255);COLOR_setB(COLOR_ID,122/255);) 
 :(colorName == "darkseagreen" )?( COLOR_setA(COLOR_ID,143/255);COLOR_setG(COLOR_ID,188/255);COLOR_setB(COLOR_ID,143/255);) 
 :(colorName == "darkslateblue" )?( COLOR_setA(COLOR_ID, 72/255);COLOR_setG(COLOR_ID, 61/255);COLOR_setB(COLOR_ID,139/255);) 
 :(colorName == "darkslategray" )?( COLOR_setA(COLOR_ID, 47/255);COLOR_setG(COLOR_ID, 79/255);COLOR_setB(COLOR_ID,79 /255);) 
 :(colorName == "darkturquoise" )?( COLOR_setA(COLOR_ID, 0/255);COLOR_setG(COLOR_ID,206/255);COLOR_setB(COLOR_ID,209/255);) 
 :(colorName == "darkviolet" )?( COLOR_setA(COLOR_ID,148/255);COLOR_setG(COLOR_ID, 0/255);COLOR_setB(COLOR_ID,211/255);) 
 :(colorName == "deeppink" )?( COLOR_setA(COLOR_ID,255/255);COLOR_setG(COLOR_ID, 20/255);COLOR_setB(COLOR_ID,147/255);) 
 :(colorName == "deepskyblue" )?( COLOR_setA(COLOR_ID, 0/255);COLOR_setG(COLOR_ID,191/255);COLOR_setB(COLOR_ID,255/255);) 
 :(colorName == "dimgrey" )?( COLOR_setA(COLOR_ID,105/255);COLOR_setG(COLOR_ID,105/255);COLOR_setB(COLOR_ID,105/255);) 
 :(colorName == "dodgerblue" )?( COLOR_setA(COLOR_ID, 30/255);COLOR_setG(COLOR_ID,144/255);COLOR_setB(COLOR_ID,255/255);) 
 :(colorName == "firebrick" )?( COLOR_setA(COLOR_ID,178/255);COLOR_setG(COLOR_ID, 34/255);COLOR_setB(COLOR_ID,34 /255);) 
 :(colorName == "floralwhite" )?( COLOR_setA(COLOR_ID,255/255);COLOR_setG(COLOR_ID,250/255);COLOR_setB(COLOR_ID,240/255);) 
 :(colorName == "forestgreen" )?( COLOR_setA(COLOR_ID, 34/255);COLOR_setG(COLOR_ID,139/255);COLOR_setB(COLOR_ID,34 /255);) 
 :(colorName == "fuchsia" )?( COLOR_setA(COLOR_ID,255/255);COLOR_setG(COLOR_ID, 0/255);COLOR_setB(COLOR_ID,255/255);) 
 :(colorName == "gainsboro" )?( COLOR_setA(COLOR_ID,220/255);COLOR_setG(COLOR_ID,220/255);COLOR_setB(COLOR_ID,220/255);) 
 :(colorName == "ghostwhite" )?( COLOR_setA(COLOR_ID,248/255);COLOR_setG(COLOR_ID,248/255);COLOR_setB(COLOR_ID,255/255);) 
 :(colorName == "gold" )?( COLOR_setA(COLOR_ID,255/255);COLOR_setG(COLOR_ID,215/255);COLOR_setB(COLOR_ID,0 /255);) 
 :(colorName == "goldenrod" )?( COLOR_setA(COLOR_ID,218/255);COLOR_setG(COLOR_ID,165/255);COLOR_setB(COLOR_ID,32 /255);) 
 :(colorName == "grey" )?( COLOR_setA(COLOR_ID,128/255);COLOR_setG(COLOR_ID,128/255);COLOR_setB(COLOR_ID,128/255);) 
 :(colorName == "green" )?( COLOR_setA(COLOR_ID, 0/255);COLOR_setG(COLOR_ID,128/255);COLOR_setB(COLOR_ID,0 /255);) 
 :(colorName == "greenyellow" )?( COLOR_setA(COLOR_ID,173/255);COLOR_setG(COLOR_ID,255/255);COLOR_setB(COLOR_ID,47 /255);) 
 :(colorName == "honeydew" )?( COLOR_setA(COLOR_ID,240/255);COLOR_setG(COLOR_ID,255/255);COLOR_setB(COLOR_ID,240/255);) 
 :(colorName == "hotpink" )?( COLOR_setA(COLOR_ID,255/255);COLOR_setG(COLOR_ID,105/255);COLOR_setB(COLOR_ID,180/255);) 
 :(colorName == "indianred" )?( COLOR_setA(COLOR_ID,205/255);COLOR_setG(COLOR_ID, 92/255);COLOR_setB(COLOR_ID,92 /255);) 
 :(colorName == "indigo" )?( COLOR_setA(COLOR_ID, 75/255);COLOR_setG(COLOR_ID, 0/255);COLOR_setB(COLOR_ID,130/255);) 
 :(colorName == "ivory" )?( COLOR_setA(COLOR_ID,255/255);COLOR_setG(COLOR_ID,255/255);COLOR_setB(COLOR_ID,240/255);) 
 :(colorName == "khaki" )?( COLOR_setA(COLOR_ID,240/255);COLOR_setG(COLOR_ID,230/255);COLOR_setB(COLOR_ID,140/255);) 
 :(colorName == "lavender" )?( COLOR_setA(COLOR_ID,230/255);COLOR_setG(COLOR_ID,230/255);COLOR_setB(COLOR_ID,250/255);) 
 :(colorName == "lavenderblush" )?( COLOR_setA(COLOR_ID,255/255);COLOR_setG(COLOR_ID,240/255);COLOR_setB(COLOR_ID,245/255);) 
 :(colorName == "lawngreen" )?( COLOR_setA(COLOR_ID,124/255);COLOR_setG(COLOR_ID,252/255);COLOR_setB(COLOR_ID,0 /255);) 
 :(colorName == "lemonchiffon" )?( COLOR_setA(COLOR_ID,255/255);COLOR_setG(COLOR_ID,250/255);COLOR_setB(COLOR_ID,205/255);) 
 :(colorName == "lightblue" )?( COLOR_setA(COLOR_ID,173/255);COLOR_setG(COLOR_ID,216/255);COLOR_setB(COLOR_ID,230/255);) 
 :(colorName == "lightcoral" )?( COLOR_setA(COLOR_ID,240/255);COLOR_setG(COLOR_ID,128/255);COLOR_setB(COLOR_ID,128/255);) 
 :(colorName == "lightcyan" )?( COLOR_setA(COLOR_ID,224/255);COLOR_setG(COLOR_ID,255/255);COLOR_setB(COLOR_ID,255/255);) 
 :(colorName == "lightgoldenrodyellow" )?( COLOR_setA(COLOR_ID,250/255);COLOR_setG(COLOR_ID,250/255);COLOR_setB(COLOR_ID,210/255);) 
 :(colorName == "lightgray" )?( COLOR_setA(COLOR_ID,211/255);COLOR_setG(COLOR_ID,211/255);COLOR_setB(COLOR_ID,211/255);) 
 :(colorName == "lightgreen" )?( COLOR_setA(COLOR_ID,144/255);COLOR_setG(COLOR_ID,238/255);COLOR_setB(COLOR_ID,144/255);) 
 :(colorName == "lightgrey" )?( COLOR_setA(COLOR_ID,211/255);COLOR_setG(COLOR_ID,211/255);COLOR_setB(COLOR_ID,211/255);) 
 :(colorName == "lightpink" )?( COLOR_setA(COLOR_ID,255/255);COLOR_setG(COLOR_ID,182/255);COLOR_setB(COLOR_ID,193/255);) 
 :(colorName == "lightsalmon" )?( COLOR_setA(COLOR_ID,255/255);COLOR_setG(COLOR_ID,160/255);COLOR_setB(COLOR_ID,122/255);) 
 :(colorName == "lightseagreen" )?( COLOR_setA(COLOR_ID, 32/255);COLOR_setG(COLOR_ID,178/255);COLOR_setB(COLOR_ID,170/255);) 
 :(colorName == "lightskyblue" )?( COLOR_setA(COLOR_ID,135/255);COLOR_setG(COLOR_ID,206/255);COLOR_setB(COLOR_ID,250/255);) 
 :(colorName == "lightslategrey" )?( COLOR_setA(COLOR_ID,119/255);COLOR_setG(COLOR_ID,136/255);COLOR_setB(COLOR_ID,153/255);) 
 :(colorName == "lightsteelblue" )?( COLOR_setA(COLOR_ID,176/255);COLOR_setG(COLOR_ID,196/255);COLOR_setB(COLOR_ID,222/255);) 
 :(colorName == "lightyellow" )?( COLOR_setA(COLOR_ID,255/255);COLOR_setG(COLOR_ID,255/255);COLOR_setB(COLOR_ID,224/255);) 
 :(colorName == "lime" )?( COLOR_setA(COLOR_ID, 0/255);COLOR_setG(COLOR_ID,255/255);COLOR_setB(COLOR_ID,0 /255);) 
 :(colorName == "limegreen" )?( COLOR_setA(COLOR_ID, 50/255);COLOR_setG(COLOR_ID,205/255);COLOR_setB(COLOR_ID,50 /255);) 
 :(colorName == "linen" )?( COLOR_setA(COLOR_ID,250/255);COLOR_setG(COLOR_ID,240/255);COLOR_setB(COLOR_ID,230/255);) 
 :(colorName == "magenta" )?( COLOR_setA(COLOR_ID,255/255);COLOR_setG(COLOR_ID, 0/255);COLOR_setB(COLOR_ID,255/255);) 
 :(colorName == "maroon" )?( COLOR_setA(COLOR_ID,128/255);COLOR_setG(COLOR_ID, 0/255);COLOR_setB(COLOR_ID,0 /255);) 
 :(colorName == "mediumaquamarine" )?( COLOR_setA(COLOR_ID,102/255);COLOR_setG(COLOR_ID,205/255);COLOR_setB(COLOR_ID,170/255);) 
 :(colorName == "mediumblue" )?( COLOR_setA(COLOR_ID, 0/255);COLOR_setG(COLOR_ID, 0/255);COLOR_setB(COLOR_ID,205/255);) 
 :(colorName == "mediumorchid" )?( COLOR_setA(COLOR_ID,186/255);COLOR_setG(COLOR_ID, 85/255);COLOR_setB(COLOR_ID,211/255);) 
 :(colorName == "mediumpurple" )?( COLOR_setA(COLOR_ID,147/255);COLOR_setG(COLOR_ID,112/255);COLOR_setB(COLOR_ID,219/255);) 
 :(colorName == "mediumseagreen" )?( COLOR_setA(COLOR_ID, 60/255);COLOR_setG(COLOR_ID,179/255);COLOR_setB(COLOR_ID,113/255);) 
 :(colorName == "mediumslateblue" )?( COLOR_setA(COLOR_ID,123/255);COLOR_setG(COLOR_ID,104/255);COLOR_setB(COLOR_ID,238/255);) 
 :(colorName == "mediumspringgreen" )?( COLOR_setA(COLOR_ID, 0/255);COLOR_setG(COLOR_ID,250/255);COLOR_setB(COLOR_ID,154/255);) 
 :(colorName == "mediumturquoise" )?( COLOR_setA(COLOR_ID, 72/255);COLOR_setG(COLOR_ID,209/255);COLOR_setB(COLOR_ID,204/255);) 
 :(colorName == "mediumvioletred" )?( COLOR_setA(COLOR_ID,199/255);COLOR_setG(COLOR_ID, 21/255);COLOR_setB(COLOR_ID,133/255);) 
 :(colorName == "midnightblue" )?( COLOR_setA(COLOR_ID, 25/255);COLOR_setG(COLOR_ID, 25/255);COLOR_setB(COLOR_ID,112/255);) 
 :(colorName == "mintcream" )?( COLOR_setA(COLOR_ID,245/255);COLOR_setG(COLOR_ID,255/255);COLOR_setB(COLOR_ID,250/255);) 
 :(colorName == "mistyrose" )?( COLOR_setA(COLOR_ID,255/255);COLOR_setG(COLOR_ID,228/255);COLOR_setB(COLOR_ID,225/255);) 
 :(colorName == "moccasin" )?( COLOR_setA(COLOR_ID,255/255);COLOR_setG(COLOR_ID,228/255);COLOR_setB(COLOR_ID,181/255);) 
 :(colorName == "navajowhite" )?( COLOR_setA(COLOR_ID,255/255);COLOR_setG(COLOR_ID,222/255);COLOR_setB(COLOR_ID,173/255);) 
 :(colorName == "navy" )?( COLOR_setA(COLOR_ID, 0/255);COLOR_setG(COLOR_ID, 0/255);COLOR_setB(COLOR_ID,128/255);) 
 :(colorName == "oldlace" )?( COLOR_setA(COLOR_ID,253/255);COLOR_setG(COLOR_ID,245/255);COLOR_setB(COLOR_ID,230/255);) 
 :(colorName == "olive" )?( COLOR_setA(COLOR_ID,128/255);COLOR_setG(COLOR_ID,128/255);COLOR_setB(COLOR_ID,0 /255);) 
 :(colorName == "olivedrab" )?( COLOR_setA(COLOR_ID,107/255);COLOR_setG(COLOR_ID,142/255);COLOR_setB(COLOR_ID,35 /255);) 
 :(colorName == "orange" )?( COLOR_setA(COLOR_ID,255/255);COLOR_setG(COLOR_ID,165/255);COLOR_setB(COLOR_ID,0 /255);) 
 :(colorName == "orangered" )?( COLOR_setA(COLOR_ID,255/255);COLOR_setG(COLOR_ID, 69/255);COLOR_setB(COLOR_ID,0 /255);) 
 :(colorName == "orchid" )?( COLOR_setA(COLOR_ID,218/255);COLOR_setG(COLOR_ID,112/255);COLOR_setB(COLOR_ID,214/255);) 
 :(colorName == "palegoldenrod" )?( COLOR_setA(COLOR_ID,238/255);COLOR_setG(COLOR_ID,232/255);COLOR_setB(COLOR_ID,170/255);) 
 :(colorName == "palegreen" )?( COLOR_setA(COLOR_ID,152/255);COLOR_setG(COLOR_ID,251/255);COLOR_setB(COLOR_ID,152/255);) 
 :(colorName == "paleturquoise" )?( COLOR_setA(COLOR_ID,175/255);COLOR_setG(COLOR_ID,238/255);COLOR_setB(COLOR_ID,238/255);) 
 :(colorName == "palevioletred" )?( COLOR_setA(COLOR_ID,219/255);COLOR_setG(COLOR_ID,112/255);COLOR_setB(COLOR_ID,147/255);) 
 :(colorName == "papayawhip" )?( COLOR_setA(COLOR_ID,255/255);COLOR_setG(COLOR_ID,239/255);COLOR_setB(COLOR_ID,213/255);) 
 :(colorName == "peachpuff" )?( COLOR_setA(COLOR_ID,255/255);COLOR_setG(COLOR_ID,218/255);COLOR_setB(COLOR_ID,185/255);) 
 :(colorName == "peru" )?( COLOR_setA(COLOR_ID,205/255);COLOR_setG(COLOR_ID,133/255);COLOR_setB(COLOR_ID,63 /255);) 
 :(colorName == "pink" )?( COLOR_setA(COLOR_ID,255/255);COLOR_setG(COLOR_ID,192/255);COLOR_setB(COLOR_ID,203/255);) 
 :(colorName == "plum" )?( COLOR_setA(COLOR_ID,221/255);COLOR_setG(COLOR_ID,160/255);COLOR_setB(COLOR_ID,221/255);) 
 :(colorName == "powderblue" )?( COLOR_setA(COLOR_ID,176/255);COLOR_setG(COLOR_ID,224/255);COLOR_setB(COLOR_ID,230/255);) 
 :(colorName == "purple" )?( COLOR_setA(COLOR_ID,128/255);COLOR_setG(COLOR_ID, 0/255);COLOR_setB(COLOR_ID,128/255);) 
 :(colorName == "red" )?( COLOR_setA(COLOR_ID,255/255);COLOR_setG(COLOR_ID, 0/255);COLOR_setB(COLOR_ID,0 /255);) 
 :(colorName == "rosybrown" )?( COLOR_setA(COLOR_ID,188/255);COLOR_setG(COLOR_ID,143/255);COLOR_setB(COLOR_ID,143/255);) 
 :(colorName == "royalblue" )?( COLOR_setA(COLOR_ID, 65/255);COLOR_setG(COLOR_ID,105/255);COLOR_setB(COLOR_ID,225/255);) 
 :(colorName == "saddlebrown" )?( COLOR_setA(COLOR_ID,139/255);COLOR_setG(COLOR_ID, 69/255);COLOR_setB(COLOR_ID,19 /255);) 
 :(colorName == "salmon" )?( COLOR_setA(COLOR_ID,250/255);COLOR_setG(COLOR_ID,128/255);COLOR_setB(COLOR_ID,114/255);) 
 :(colorName == "sandybrown" )?( COLOR_setA(COLOR_ID,244/255);COLOR_setG(COLOR_ID,164/255);COLOR_setB(COLOR_ID,96 /255);) 
 :(colorName == "seagreen" )?( COLOR_setA(COLOR_ID, 46/255);COLOR_setG(COLOR_ID,139/255);COLOR_setB(COLOR_ID,87 /255);) 
 :(colorName == "seashell" )?( COLOR_setA(COLOR_ID,255/255);COLOR_setG(COLOR_ID,245/255);COLOR_setB(COLOR_ID,238/255);) 
 :(colorName == "sienna" )?( COLOR_setA(COLOR_ID,160/255);COLOR_setG(COLOR_ID, 82/255);COLOR_setB(COLOR_ID,45 /255);) 
 :(colorName == "silver" )?( COLOR_setA(COLOR_ID,192/255);COLOR_setG(COLOR_ID,192/255);COLOR_setB(COLOR_ID,192/255);) 
 :(colorName == "skyblue" )?( COLOR_setA(COLOR_ID,135/255);COLOR_setG(COLOR_ID,206/255);COLOR_setB(COLOR_ID,235/255);) 
 :(colorName == "slateblue" )?( COLOR_setA(COLOR_ID,106/255);COLOR_setG(COLOR_ID, 90/255);COLOR_setB(COLOR_ID,205/255);) 
 :(colorName == "slategrey" )?( COLOR_setA(COLOR_ID,112/255);COLOR_setG(COLOR_ID,128/255);COLOR_setB(COLOR_ID,144/255);) 
 :(colorName == "snow" )?( COLOR_setA(COLOR_ID,255/255);COLOR_setG(COLOR_ID,250/255);COLOR_setB(COLOR_ID,250/255);) 
 :(colorName == "springgreen" )?( COLOR_setA(COLOR_ID, 0/255);COLOR_setG(COLOR_ID,255/255);COLOR_setB(COLOR_ID,127/255);) 
 :(colorName == "steelblue" )?( COLOR_setA(COLOR_ID, 70/255);COLOR_setG(COLOR_ID,130/255);COLOR_setB(COLOR_ID,180/255);) 
 :(colorName == "tan" )?( COLOR_setA(COLOR_ID,210/255);COLOR_setG(COLOR_ID,180/255);COLOR_setB(COLOR_ID,140/255);) 
 :(colorName == "teal" )?( COLOR_setA(COLOR_ID, 0/255);COLOR_setG(COLOR_ID,128/255);COLOR_setB(COLOR_ID,128/255);) 
 :(colorName == "thistle" )?( COLOR_setA(COLOR_ID,216/255);COLOR_setG(COLOR_ID,191/255);COLOR_setB(COLOR_ID,216/255);) 
 :(colorName == "tomato" )?( COLOR_setA(COLOR_ID,255/255);COLOR_setG(COLOR_ID, 99/255);COLOR_setB(COLOR_ID,71 /255);) 
 :(colorName == "turquoise" )?( COLOR_setA(COLOR_ID, 64/255);COLOR_setG(COLOR_ID,224/255);COLOR_setB(COLOR_ID,208/255);) 
 :(colorName == "violet" )?( COLOR_setA(COLOR_ID,238/255);COLOR_setG(COLOR_ID,130/255);COLOR_setB(COLOR_ID,238/255);) 
 :(colorName == "wheat" )?( COLOR_setA(COLOR_ID,245/255);COLOR_setG(COLOR_ID,222/255);COLOR_setB(COLOR_ID,179/255);) 
 :(colorName == "white" )?( COLOR_setA(COLOR_ID,255/255);COLOR_setG(COLOR_ID,255/255);COLOR_setB(COLOR_ID,255/255);) 
 :(colorName == "whitesmoke" )?( COLOR_setA(COLOR_ID,245/255);COLOR_setG(COLOR_ID,245/255);COLOR_setB(COLOR_ID,245/255);) 
 :(colorName == "yellow" )?( COLOR_setA(COLOR_ID,255/255);COLOR_setG(COLOR_ID,255/255);COLOR_setB(COLOR_ID,0 /255);) 
 :(colorName == "yellowgreen" )?( COLOR_setA(COLOR_ID,154/255);COLOR_setG(COLOR_ID,205/255);COLOR_setB(COLOR_ID,50 /255);) 
 ; 
); 
___tempHSB ; 
function Draw_WaveGraph( CursolBufferID_ForGraph,drawPointNum,x,y,w,h) 
 local ( xDelta,count_BB,lastVV_YY,lastVV_XX 
 , bufferNum,temp_Alpha,xx,yy 
 , vv_YY 
 ) 
( 
 bufferNum = CURSOLBUFFER_getMaxSize( CursolBufferID_ForGraph); 
 xDelta = w / drawPointNum; 
 count_BB = 0; 
 lastVV_YY = 0; 
 lastVV_XX = w; 
 temp_Alpha = gfx_a; 
 while(count_BB < drawPointNum ) 
 ( 
 xx = w-count_BB *xDelta; 
 vv_YY = CURSOLBUFFER_getOffsettedValue( CursolBufferID_ForGraph 
 , -count_BB ); 
 yy = -vv_YY * w/2*0.4 +h/2; 
 gfx_r = 1;gfx_g = 1;gfx_b = 1; 
 gfx_rect(xx,yy,1,gfx_h/2-yy+1,false); 
 gfx_r = 0;gfx_g = 0;gfx_b = 0; 
 gfx_line(lastVV_XX,lastVV_YY,xx+1,yy,false); 
 lastVV_XX = xx; 
 lastVV_YY = yy; 
 count_BB += 1; 
 ); 
 gfx_a = temp_Alpha; 
); 
function drawCircleWaveSignale( _cx,_cy , _CursolBuffer_ID _radius, _signalGain) 
 local ( bufferNum 
 ,drawPointNum 
 ,angleDelta 
 ,count_BB 
 ,last_YY 
 ,last_XX 
 ,xx_ 
 ,yy_ 
 ,value_ 
 ,roted_X 
 ,roted_Y 
 ,targetAngle 
 ) 
( 
 bufferNum = CURSOLBUFFER_getMaxSize( _CursolBuffer_ID); 
 drawPointNum = bufferNum; 
 angleDelta = 1.0/ drawPointNum; 
 xDelta = 1; 
 count_BB = 0; 
 last_YY = _cy -_radius; 
 last_XX = _cx; 
 while(count_BB < drawPointNum ) 
 ( 
 xx_ = _cx ; 
 value_ = CURSOLBUFFER_getOffsettedValue( _CursolBuffer_ID 
 , -count_BB ); 
 yy_ = _cy-_radius- _signalGain*value_; 
 targetAngle = angleDelta *count_BB; 
 roted_X = rotPoint_X(xx_,yy_,_cx,_cy,$pi*2*targetAngle); 
 roted_Y = rotPoint_Y(xx_,yy_,_cx,_cy,$pi*2*targetAngle); 
 gfx_r=1;gfx_g=1;gfx_b=0;gfx_a= 1; 
 gfx_line(last_XX,last_YY,roted_X,roted_Y,false); 
 last_XX = roted_X; 
 last_YY = roted_Y; 
 count_BB+=1; 
 ); 
); 
function drawWaveBufferToCanvas(CANVAS_ID,waveMax,waveMin,oneBar_Width,vAmp,alpha,hueOffset) 
 local ( lastDest,tempCanvasSlot,halfHeight 
 , yy1,yy2,tempCanvas,vAmp_,CLEAR_CANVAS_SLOT 
 , onebarWidth,val,cH,cW) 
( 
 gfx_getimgdim(CANVAS_getCanvaseSlotID(CANVAS_ID),cW,cH); 
 ( cW >0 && cH >0)? 
 ( 
 onebarWidth = ceil( oneBar_Width ); 
 onebarWidth = max (1,onebarWidth); 
 lastDest = gfx_dest; 
 vAmp_ = vAmp; 
 gfx_setimgdim( STATIC_CLEAR_CANVAS_SLOT,0,0); 
 gfx_setimgdim( STATIC_CLEAR_CANVAS_SLOT,2048,2048); 
 gfx_dest=STATIC_CLEAR_CANVAS_SLOT; 
 gfx_x=0;gfx_y=0; 
 gfx_r =1;gfx_g=1;gfx_b=1;gfx_a=1; 
 gfx_blit( CANVAS_getCanvaseSlotID(CANVAS_ID), 1,0 ); 
 CANVAS_clearCanvas(CANVAS_ID); 
 gfx_dest=CANVAS_getCanvaseSlotID(CANVAS_ID); 
 gfx_blit( STATIC_CLEAR_CANVAS_SLOT 
 , 1,0 
 , onebarWidth 
 , 0 
 , RECTANGLE_getWidth(CANVAS_ID) -onebarWidth 
 , RECTANGLE_getHeight(CANVAS_ID) 
 , 0, 0 
 , RECTANGLE_getWidth(CANVAS_ID) -onebarWidth 
 , RECTANGLE_getHeight(CANVAS_ID) 
 ); 
 halfHeight = (RECTANGLE_getHeight(CANVAS_ID)/2); 
 yy1 = halfHeight - abs( halfHeight * waveMax) *vAmp_; 
 yy2 = halfHeight + abs( halfHeight * waveMin) *vAmp_; 
 val = max(waveMax,abs(waveMin)); 
 ___tempHSB.HSBtoRGB(-180+30*val +hueOffset, 0 , 1*hueOffset); 
 gfx_r =___tempHSB.r/255;gfx_g=___tempHSB.g/255;gfx_b=___tempHSB.b/255;gfx_a=1; 
 gfx_rect( RECTANGLE_getWidth(CANVAS_ID) -onebarWidth 
 , yy1 
 , onebarWidth 
 , yy2-yy1 
 ,true,true ); 
 gfx_r =0;gfx_g=0;gfx_b=0;gfx_a=0.5; 
 gfx_line(RECTANGLE_getWidth(CANVAS_ID) -onebarWidth 
 , halfHeight 
 , RECTANGLE_getWidth(CANVAS_ID) 
 ,halfHeight 
 ,true 
 ); 
 gfx_dest= lastDest; 
 gfx_a=1; 
 ); 
); 
function drawBackGrond_black(gradiationNUM) 
 local (count_,incWidth,_incHue,move_) 
( 
 count_ = 0; 
 incWidth = ceil (gfx_w/gradiationNUM); 
 _incHue = hueWidth_ /gradiationNUM; 
 while (count_ < gradiationNUM) 
 ( 
 ___tempHSB.HSBtoRGB(0 
 ,0 
 ,0.6/gradiationNUM *count_); 
 gfx_r = ___tempHSB.r/255; 
 gfx_g = ___tempHSB.g/255; 
 gfx_b = ___tempHSB.b/255; 
 gfx_a = 1; 
 gfx_rect( incWidth*count_,0,incWidth,gfx_h,true); 
 count_+=1; 
 ); 
 move_ += 1.5; 
 (move_ >360) ?(move_ =0); 
); 
function drawBackGrond_color(gradiationNUM,hueStart_,hueWidth_) 
 local (count_,incWidth,_incHue,move_) 
( 
 count_ = 0; 
 incWidth = ceil (gfx_w/gradiationNUM); 
 _incHue = hueWidth_ /gradiationNUM; 
 while (count_ < gradiationNUM) 
 ( 
 ___tempHSB.HSBtoRGB(hueStart_ + _incHue*count_ +move_ ,1,1); 
 gfx_r = ___tempHSB.r/255; 
 gfx_g = ___tempHSB.g/255; 
 gfx_b = ___tempHSB.b/255; 
 gfx_a = 1; 
 gfx_rect( incWidth*count_,0,incWidth,gfx_h,true); 
 count_+=1; 
 ); 
 move_ += 1.5; 
 (move_ >360) ?(move_ =0); 
); 
function drawSinWaveCircle(num,radius,rate,speed) 
 local (count_,incWidth,incDelta,x,y,time_) 
( 
 incWidth = gfx_w / num; 
 incDelta = ($pi *2 *rate)/num; 
 gfx_r=1; 
 gfx_g=1; 
 gfx_b=1; 
 gfx_a=1; 
 count_ = 0; 
 while ( count_ < num ) 
 ( 
 x = incWidth * count_ -radius; 
 y = sin( $pi *2 * time_ + incDelta*count_ ) * gfx_h/2.3 + gfx_h/2; 
 gfx_circle(x,y,radius,true); 
 x = incWidth * count_ -radius; 
 y = sin( $pi *2 * time_ + incDelta*count_ +$pi )* gfx_h/2.3 + gfx_h/2; 
 gfx_circle(x,y,radius,true); 
 count_+=1; 
 ); 
 time_+= speed; 
 (time_ > 1.0)?(time_ =0.0); 
 (time_ < 0.0)?(time_ =1.0); 
); 
function drawDotGrid(xwidth,ywidth,radius) 
 local (_xDrawNum,_yDrawNum,count_x,count_y) 
( 
 _xDrawNum = gfx_w / xwidth; 
 _yDrawNum = gfx_h / ywidth; 
 count_y = 0; 
 while (count_y < _yDrawNum ) 
 ( 
 count_x = 0; 
 while (count_x < _xDrawNum ) 
 ( 
 gfx_r=1; gfx_g=1; 
 gfx_b=1; gfx_a=0.5; 
 gfx_circle( xwidth * count_x 
 , ywidth * count_y 
 , radius,true); 
 count_x +=1; 
 ); 
 count_y +=1; 
 ); 
); 
function COLOR_changeColor(COLOR_ID) 
( 
 gfx_r = COLOR_getR(COLOR_ID); 
 gfx_g = COLOR_getG(COLOR_ID); 
 gfx_b = COLOR_getB(COLOR_ID); 
 gfx_a = COLOR_getA(COLOR_ID); 
); 
function COLOR_toGFX(COLOR_ID)( COLOR_changeColor(COLOR_ID);); 
function POINT_drawString( POINT_ID,text)local (x,y,lastX,lastY) 
( 
 lastX = gfx_x;lastY = gfx_y; 
 gfx_x = POINT_getX ( POINT_ID); 
 gfx_y = POINT_getY ( POINT_ID); 
 gfx_drawstr( text); 
 gfx_x = lastX;gfx_y = lastY; 
); 
function CANVAS_blitImage(CANVAS_ID,dest_xpos,dest_ypos,scale,rotation) 
 local ( lastX,lastY) 
( 
 lastX = gfx_x;lastY = gfx_y; 
 gfx_x = dest_xpos ; 
 gfx_y = dest_ypos ; 
 gfx_blit( CANVAS_getCanvaseSlotID (CANVAS_ID),scale,rotation); 
 gfx_x = lastX;gfx_y = lastY; 
); 
function CANVAS_blitImage2(CANVAS_ID,dest_xpos,dest_ypos,scale,rotation,roffsetX,roffsetY)local (canvasSlot) 
( 
 canvasSlot = CANVAS_getCanvaseSlotID (CANVAS_ID); 
 lastX = gfx_x;lastY = gfx_y; 
 gfx_x = dest_xpos; 
 gfx_y = dest_ypos; 
 gfx_blit( canvasSlot,scale,rotation 
 , dest_xpos,dest_ypos 
 , RECTANGLE_getWidth(CANVAS_ID ) 
 , RECTANGLE_getHeight(CANVAS_ID ) 
 , dest_xpos,dest_ypos 
 , RECTANGLE_getWidth(CANVAS_ID ) 
 , RECTANGLE_getHeight(CANVAS_ID ) 
 , roffsetX,roffsetY 
 ); 
 gfx_x = lastX;gfx_y = lastY; 
); 
function CANVAS_blitImage3(CANVAS_ID,dest_xpos,dest_ypos,scale,rotation)local (canvasSlot) 
( 
 canvasSlot = CANVAS_getCanvaseSlotID (CANVAS_ID); 
 lastX = gfx_x;lastY = gfx_y; 
 gfx_x = dest_xpos; 
 gfx_y = dest_ypos; 
 gfx_blit( canvasSlot,scale,rotation 
 , dest_xpos,dest_ypos 
 , RECTANGLE_getWidth(CANVAS_ID ) 
 , RECTANGLE_getHeight(CANVAS_ID ) 
 , dest_xpos,dest_ypos 
 , RECTANGLE_getWidth(CANVAS_ID ) 
 , RECTANGLE_getHeight(CANVAS_ID ) 
 , RECTANGLE_getWidth(CANVAS_ID )/8 
 , RECTANGLE_getHeight(CANVAS_ID )/8 
 ); 
 gfx_x = lastX;gfx_y = lastY; 
); 
function CANVAS_blitImage4(CANVAS_ID,scale,rotation) 
 local ( lastX,lastY) 
( 
 lastX = gfx_x;lastY = gfx_y; 
 gfx_x = RECTANGLE_getX( CANVAS_ID ); 
 gfx_y = RECTANGLE_getY( CANVAS_ID ) ; 
 gfx_blit( CANVAS_getCanvaseSlotID (CANVAS_ID),scale,rotation); 
 gfx_x = lastX;gfx_y = lastY; 
); 
function POINT_drawCircle(POINT_ID,radius,antialiase)local (x,y) 
( 
 x = POINT_getX(POINT_ID); 
 y = POINT_getY(POINT_ID); 
 gfx_circle(x,y,radius,false,antialiase); 
); 
function POINT_drawCircleFill(POINT_ID,radius,antialiase)local (x,y) 
( 
 x = POINT_getX(POINT_ID); 
 y = POINT_getY(POINT_ID); 
 gfx_circle(x,y,radius,true,antialiase); 
); 
function POINT_drawLine(POINT_A_ID,POINT_B_ID,thickNess) 
 local ( angleRad 
 , x1_L,y1_L 
 , x1_R,y1_R 
 , x2_L,y2_L 
 , x2_R,y2_R 
 , cx 
 , cy 
 ) 
( 
 angleRad = POINT_getAngle(POINT_A_ID,POINT_ID_B); 
 cx = POINT_getX(POINT_A_ID ); 
 cy = POINT_getY(POINT_A_ID ); 
 x1_L = rotPoint_X(POINT_getX(POINT_A_ID),POINT_getY(POINT_A_ID)-thickNess,cx,cy,angleRad); 
 y1_L = rotPoint_Y(POINT_getX(POINT_A_ID),POINT_getY(POINT_A_ID)-thickNess,cx,cy,angleRad); 
 x1_R = rotPoint_X(POINT_getX(POINT_A_ID),POINT_getY(POINT_A_ID)+thickNess,cx,cy,angleRad); 
 y1_R = rotPoint_Y(POINT_getX(POINT_A_ID),POINT_getY(POINT_A_ID)+thickNess,cx,cy,angleRad); 
 cx = POINT_getX(POINT_B_ID ); 
 cy = POINT_getY(POINT_B_ID ); 
 x2_L = rotPoint_X(POINT_getX(POINT_B_ID),POINT_getY(POINT_B_ID)-thickNess,cx,cy,angleRad); 
 y2_L = rotPoint_Y(POINT_getX(POINT_B_ID),POINT_getY(POINT_B_ID)-thickNess,cx,cy,angleRad); 
 x2_R = rotPoint_X(POINT_getX(POINT_B_ID),POINT_getY(POINT_B_ID)+thickNess,cx,cy,angleRad); 
 y2_R = rotPoint_Y(POINT_getX(POINT_B_ID),POINT_getY(POINT_B_ID)+thickNess,cx,cy,angleRad); 
 gfx_triangle ( x1_L, y1_L 
 ,x1_R, y1_R 
 ,x2_L, y2_L 
 ,x2_R, y2_R 
 ); 
); 
function POINT_drawLineWithRect(POINT_A_ID,POINT_B_ID,thickNess,rectAngle_) 
 local ( angleRad 
 , x1_L,y1_L 
 , x1_R,y1_R 
 , x2_L,y2_L 
 , x2_R,y2_R 
 , cx 
 , cy 
 , x1,y1, x2, y2 
 ) 
( 
 angleRad = POINT_getAngle(POINT_A_ID,POINT_ID_B); 
 cx = POINT_getX(POINT_A_ID ); 
 cy = POINT_getY(POINT_B_ID ); 
 x1 = RECTANGLE_getX(rectAngle_ ); 
 y1 = RECTANGLE_getY(rectAngle_ ); 
 x2 = RECTANGLE_getX2(rectAngle_ )-1; 
 y2 = RECTANGLE_getY2(rectAngle_ )-1; 
 x1_L = rotPoint_X(POINT_getX(POINT_A_ID),POINT_getY(POINT_A_ID)-thickNess,cx,cy,angleRad); 
 y1_L = rotPoint_Y(POINT_getX(POINT_A_ID),POINT_getY(POINT_A_ID)-thickNess,cx,cy,angleRad); 
 x1_R = rotPoint_X(POINT_getX(POINT_A_ID),POINT_getY(POINT_A_ID)+thickNess,cx,cy,angleRad); 
 y1_R = rotPoint_Y(POINT_getX(POINT_A_ID),POINT_getY(POINT_A_ID)+thickNess,cx,cy,angleRad); 
 x1_L = max(x1,min(x2,x1_L)); 
 y1_L = max(y1,min(y2,y1_L)); 
 x1_R = max(x1,min(x2,x1_R)); 
 y1_R = max(y1,min(y2,y1_R)); 
 cx = POINT_getX(POINT_B_ID ); 
 cy = POINT_getY(POINT_B_ID ); 
 x2_L = rotPoint_X(POINT_getX(POINT_B_ID),POINT_getY(POINT_B_ID)-thickNess,cx,cy,angleRad); 
 y2_L = rotPoint_Y(POINT_getX(POINT_B_ID),POINT_getY(POINT_B_ID)-thickNess,cx,cy,angleRad); 
 x2_R = rotPoint_X(POINT_getX(POINT_B_ID),POINT_getY(POINT_B_ID)+thickNess,cx,cy,angleRad); 
 y2_R = rotPoint_Y(POINT_getX(POINT_B_ID),POINT_getY(POINT_B_ID)+ thickNess,cx,cy,angleRad); 
 x2_L = max(x1,min(x2,x2_L)); 
 y2_L = max(y1,min(y2,y2_L)); 
 x2_R = max(x1,min(x2,x2_R)); 
 y2_R = max(y1,min(y2,y2_R)); 
 gfx_triangle ( x1_L, y1_L 
 ,x1_R, y1_R 
 ,x2_L, y2_L 
 ,x2_R, y2_R 
 ); 
); 
function POINT_drawLine_2(POINT_A_ID,POINT_B_ID) 
( 
 gfx_line ( POINT_getX(POINT_A_ID) 
 ,POINT_getY(POINT_A_ID) 
 ,POINT_getX(POINT_B_ID) 
 ,POINT_getY(POINT_B_ID) 
 ); 
); 
function POINT_drawLineWithRect_2(POINT_A_ID,POINT_B_ID,rectAngle_) 
 local ( x1,y1, x2, y2 
 ) 
( 
 x1 = RECTANGLE_getX(rectAngle_ ); 
 y1 = RECTANGLE_getY(rectAngle_ ); 
 x2 = RECTANGLE_getX2(rectAngle_ )-1; 
 y2 = RECTANGLE_getY2(rectAngle_ )-1; 
 gfx_line ( max(x1,min(x2,POINT_getX(POINT_A_ID))) 
 ,max(y1,min(y2,POINT_getY(POINT_A_ID))) 
 ,max(x1,min(x2,POINT_getX(POINT_B_ID))) 
 ,max(y1,min(y2,POINT_getY(POINT_B_ID))) 
 ); 
); 
function DrawLine_WithThickNess(x1_,y1_,x2_,y2_,thickness) 
 local ( angle 
 , p1X ,p1Y 
 , p2X ,p2Y 
 , p3X ,p3Y 
 , p4X ,p4Y 
 ) 
( 
 angle = atan2( y2_ -y1_ 
 , x2_ -x1_ ); 
 p1X = rotPoint_X(x1_,y1_-thickness,x1_,y1_, angle); 
 p1Y = rotPoint_Y(x1_,y1_-thickness,x1_,y1_, angle); 
 p2X = rotPoint_X(x2_,y2_-thickness,x2_,y2_, angle); 
 p2Y = rotPoint_Y(x2_,y2_-thickness,x2_,y2_, angle); 
 p3X = rotPoint_X(x2_,y2_+thickness,x2_,y2_, angle); ; 
 p3Y = rotPoint_Y(x2_,y2_+thickness,x2_,y2_, angle); 
 p4X = rotPoint_X(x1_,y1_+thickness,x1_,y1_, angle); ; 
 p4Y = rotPoint_Y(x1_,y1_+thickness,x1_,y1_, angle); ; 
 gfx_triangle( p1X,p1Y 
 , p2X,p2Y 
 , p3X,p3Y 
 , p4X,p4Y 
 ); 
); 
function CIRCLE_draw(CIRCLE_ID,antialiase)local (x,y,r) 
( 
 x = CIRCLE_getCX(CIRCLE_ID); 
 y = CIRCLE_getCY(CIRCLE_ID); 
 r = CIRCLE_getRadius (CIRCLE_ID); 
 gfx_circle(x,y,r,false,antialiase); 
); 
function CIRCLE_drawFill(CIRCLE_ID,antialiase)local (x,y,r) 
( 
 x = CIRCLE_getCX(CIRCLE_ID); 
 y = CIRCLE_getCY(CIRCLE_ID); 
 r = CIRCLE_getRadius (CIRCLE_ID); 
 gfx_circle(x,y,r,true,antialiase); 
); 
function RECTANGLE_drawLine(RECT_ID,antialiase)local (x,y,w,h) 
( 
 x = RECTANGLE_getX(RECT_ID); 
 y = RECTANGLE_getY(RECT_ID); 
 w = RECTANGLE_getWidth(RECT_ID); 
 h = RECTANGLE_getHeight(RECT_ID); 
 gfx_rect(x,y,w,h,false,antialiase); 
); 
function RECTANGLE_drawFill(RECT_ID,antialiase)local (x,y,w,h) 
( 
 x = RECTANGLE_getX(RECT_ID); 
 y = RECTANGLE_getY(RECT_ID); 
 w = RECTANGLE_getWidth(RECT_ID); 
 h = RECTANGLE_getHeight(RECT_ID); 
 gfx_rect(x,y,w,h,true,antialiase); 
); 
function RECTANGLE_drawCenterLine(RECT_ID)local (x,y,x2,y2,h) 
( 
 x = RECTANGLE_getX(RECT_ID); 
 y = RECTANGLE_getY(RECT_ID); 
 x2 = RECTANGLE_getX2(RECT_ID); 
 y2 = RECTANGLE_getY2(RECT_ID); 
 h = RECTANGLE_getHeight(RECT_ID); 
 gfx_line(x,y+h/2,x2-1,y+h/2,true); 
); 
function RECTANGLE_drawStrInCenter(RECT_ID,str) 
 local (strW,strH,x,y,w,h,lastX,lasty) 
( 
 gfx_measurestr(str,strW,strH); 
 lastX = gfx_x; 
 lastY = gfx_y; 
 x = RECTANGLE_getX(RECT_ID); 
 y = RECTANGLE_getY(RECT_ID); 
 w = RECTANGLE_getWidth(RECT_ID); 
 h = RECTANGLE_getHeight(RECT_ID); 
 gfx_x = (x +w/2) - strW/2; 
 gfx_y = (y +h/2) - strH/2; 
 gfx_drawstr( str); 
 gfx_x = lastX; 
 gfx_y = lastY; 
); 
function RECTANGLE_getFittedFontSize(RECT_ID,str)local (strLen,x,y,w,h,targetFontSize) 
( 
 strLen = strlen(str); 
 w = RECTANGLE_getWidth(RECT_ID); 
 h = RECTANGLE_getHeight(RECT_ID); 
 targetFontSize = w/(strLen/1.5); 
 targetFontSize = min(max(targetFontSize,1),h) ; 
 min(max(8,targetFontSize),100); 
); 
function RECTANGLE_drawStrInCenterFitFont(RECT_ID,str)local (strLen,x,y,w,h,lastFontIdx,temp,targetFontSize) 
( 
 lastFontIdx = gfx_getfont(); 
 strLen = strlen(str); 
 w = RECTANGLE_getWidth(RECT_ID); 
 h = RECTANGLE_getHeight(RECT_ID); 
 targetFontSize = w/(strLen/1.5); 
 targetFontSize = min(max(targetFontSize,1),h) ; 
 targetFontSize = min(max(8,targetFontSize),256); 
 gfx_setfont(1,"Courier New Bold",targetFontSize); 
 RECTANGLE_drawStrInCenter(RECT_ID,str); 
 gfx_setfont(lastFontIdx); 
); 
function drawDecibelValue( x,y,Value,fontsize) 
 local(tempStr,lastFontIdx ,lastX,lastY) 
( 
 lastFontIdx = gfx_getfont(); 
 tempStr = #; 
 sprintf ( tempStr,"%2.2fdB",valueToDecivel( value ) ); 
 gfx_setfont(1,"arial black",fontsize); 
 lastX = gfx_x; 
 lastY = gfx_y; 
 gfx_x = x; 
 gfx_y = y; 
 gfx_drawstr(tempStr); 
 gfx_x = lastX; 
 gfx_y = lastY; 
 gfx_setfont(lastFontIdx); 
); 
function drawStrWithBlackBackGround(x,y,str) 
 local (strW,strH,lastR,lastG.lastB,lastA,lastX,lastY) 
( 
 gfx_measurestr(str,strW,strH); 
 lastR =gfx_r;lastG =gfx_g;lastB =gfx_b;lastA =gfx_a; 
 lastX =gfx_x;lastY =gfx_y; 
 gfx_r =0;gfx_g =0;gfx_b =0; 
 gfx_a =1; 
 gfx_rect(x-3,y-3,strW+6,strH+6,true); 
 gfx_r =1;gfx_g =1;gfx_b =1; 
 gfx_a =1; 
 gfx_x = x;gfx_y=y; 
 gfx_drawstr( str); 
 gfx_r = lastR;gfx_g = lastG;gfx_b = lastB;gfx_a = lastA; 
 gfx_x = lastX;gfx_y = lastY; 
); 
function drawTriangle(cx,cy,radius,rotationRad,isFill) 
local ( p1x,p1y 
 ,p2x,p2y 
 ,p3x,p3y ) 
( 
 p1x = rotPoint_X(cx ,cy-radius,cx,cy,rad(120*0)+rotationRad); 
 p1y = rotPoint_Y(cx ,cy-radius,cx,cy,rad(120*0)+rotationRad); 
 p2x = rotPoint_X(cx ,cy-radius,cx,cy,rad(120*1)+rotationRad); 
 p2y = rotPoint_Y(cx ,cy-radius,cx,cy,rad(120*1)+rotationRad); 
 p3x = rotPoint_X(cx ,cy-radius,cx,cy,rad(120*2)+rotationRad); 
 p3y = rotPoint_Y(cx ,cy-radius,cx,cy,rad(120*2)+rotationRad); 
 (isFill ==true)? 
 ( 
 gfx_triangle( p1x,p1y,p2x,p2y 
 , p2x,p2y,p3x,p3y 
 , p3x,p3y,p1x,p1y ); 
 ):( 
 gfx_line(p1x,p1y,p2x,p2y ); 
 gfx_line(p2x,p2y,p3x,p3y ); 
 gfx_line(p3x,p3y,p1x,p1y ); 
 ); 
); 
function drawRectAngle(cx,cy,radius,rotationRad,isFill) 
local ( p1x,p1y 
 ,p2x,p2y 
 ,p3x,p3y 
 ,p4x,p4y ) 
( 
 p1x = rotPoint_X(cx ,cy-radius,cx,cy,rad(90*0)+rotationRad); 
 p1y = rotPoint_Y(cx ,cy-radius,cx,cy,rad(90*0)+rotationRad); 
 p2x = rotPoint_X(cx ,cy-radius,cx,cy,rad(90*1)+rotationRad); 
 p2y = rotPoint_Y(cx ,cy-radius,cx,cy,rad(90*1)+rotationRad); 
 p3x = rotPoint_X(cx ,cy-radius,cx,cy,rad(90*2)+rotationRad); 
 p3y = rotPoint_Y(cx ,cy-radius,cx,cy,rad(90*2)+rotationRad); 
 p4x = rotPoint_X(cx ,cy-radius,cx,cy,rad(90*3)+rotationRad); 
 p4y = rotPoint_Y(cx ,cy-radius,cx,cy,rad(90*3)+rotationRad); 
 (isFill ==true)? 
 ( 
 gfx_triangle( p1x,p1y,p2x,p2y 
 ,p2x,p2y,p3x,p3y 
 ,p3x,p3y,p4x,p4y 
 ,p4x,p4y,p1x,p1y ); 
 ):( 
 gfx_line(p1x,p1y,p2x,p2y ); 
 gfx_line(p2x,p2y,p3x,p3y ); 
 gfx_line(p3x,p3y,p4x,p4y ); 
 gfx_line(p4x,p4y,p1x,p1y ); 
 ); 
); 
function drawHex(cx,cy,radius,rotationRad,isFill) 
 local ( p1x,p1y 
 ,p2x,p2y 
 ,p3x,p3y 
 ,p4x,p4y 
 ,p5x,p5y 
 ,p6x,p6y ) 
( 
 p1x = rotPoint_X(cx ,cy-radius,cx,cy,rad(60*0)+rotationRad); 
 p1y = rotPoint_Y(cx ,cy-radius,cx,cy,rad(60*0)+rotationRad); 
 p2x = rotPoint_X(cx ,cy-radius,cx,cy,rad(60*1)+rotationRad); 
 p2y = rotPoint_Y(cx ,cy-radius,cx,cy,rad(60*1)+rotationRad); 
 p3x = rotPoint_X(cx ,cy-radius,cx,cy,rad(60*2)+rotationRad); 
 p3y = rotPoint_Y(cx ,cy-radius,cx,cy,rad(60*2)+rotationRad); 
 p4x = rotPoint_X(cx ,cy-radius,cx,cy,rad(60*3)+rotationRad); 
 p4y = rotPoint_Y(cx ,cy-radius,cx,cy,rad(60*3)+rotationRad); 
 p5x = rotPoint_X(cx ,cy-radius,cx,cy,rad(60*4)+rotationRad); 
 p5y = rotPoint_Y(cx ,cy-radius,cx,cy,rad(60*4)+rotationRad); 
 p6x = rotPoint_X(cx ,cy-radius,cx,cy,rad(60*5)+rotationRad); 
 p6y = rotPoint_Y(cx ,cy-radius,cx,cy,rad(60*5)+rotationRad); 
 (isFill ==true)? 
 ( 
 gfx_triangle( p1x,p1y,p2x,p2y 
 , p2x,p2y,p3x,p3y 
 , p3x,p3y,p4x,p4y 
 , p4x,p4y,p5x,p5y 
 , p5x,p5y,p6x,p6y 
 , p6x,p6y,p1x,p1y ); 
 ):( 
 gfx_line(p1x,p1y,p2x,p2y ); 
 gfx_line(p2x,p2y,p3x,p3y ); 
 gfx_line(p3x,p3y,p4x,p4y ); 
 gfx_line(p4x,p4y,p5x,p5y ); 
 gfx_line(p5x,p5y,p6x,p6y ); 
 gfx_line(p6x,p6y,p1x,p1y ); 
 ); 
); 
function drawStar(cx,cy,radius,rotationRad,isFill) 
 local ( p1x,p1y 
 ,p2x,p2y 
 ,p3x,p3y 
 ,p4x,p4y 
 ,p5x,p5y 
 ,pB1x,pB1y 
 ,pB2x,pB2y 
 ,pB3x,pB3y 
 ,pB4x,pB4y 
 ,pB5x,pB5y 
 ) 
( 
 p1x = rotPoint_X(cx ,cy-radius,cx,cy,rad(72*0)+rotationRad); 
 p1y = rotPoint_Y(cx ,cy-radius,cx,cy,rad(72*0)+rotationRad); 
 p2x = rotPoint_X(cx ,cy-radius,cx,cy,rad(72*1)+rotationRad); 
 p2y = rotPoint_Y(cx ,cy-radius,cx,cy,rad(72*1)+rotationRad); 
 p3x = rotPoint_X(cx ,cy-radius,cx,cy,rad(72*2)+rotationRad); 
 p3y = rotPoint_Y(cx ,cy-radius,cx,cy,rad(72*2)+rotationRad); 
 p4x = rotPoint_X(cx ,cy-radius,cx,cy,rad(72*3)+rotationRad); 
 p4y = rotPoint_Y(cx ,cy-radius,cx,cy,rad(72*3)+rotationRad); 
 p5x = rotPoint_X(cx ,cy-radius,cx,cy,rad(72*4)+rotationRad); 
 p5y = rotPoint_Y(cx ,cy-radius,cx,cy,rad(72*4)+rotationRad); 
 pB1x = rotPoint_X(cx ,cy-radius*0.5,cx,cy,rad(36*1)+rotationRad); 
 pB1y = rotPoint_Y(cx ,cy-radius*0.5,cx,cy,rad(36*1)+rotationRad); 
 pB2x = rotPoint_X(cx ,cy-radius*0.5,cx,cy,rad(36*3)+rotationRad); 
 pB2y = rotPoint_Y(cx ,cy-radius*0.5,cx,cy,rad(36*3)+rotationRad); 
 pB3x = rotPoint_X(cx ,cy-radius*0.5,cx,cy,rad(36*5)+rotationRad); 
 pB3y = rotPoint_Y(cx ,cy-radius*0.5,cx,cy,rad(36*5)+rotationRad); 
 pB4x = rotPoint_X(cx ,cy-radius*0.5,cx,cy,rad(36*7)+rotationRad); 
 pB4y = rotPoint_Y(cx ,cy-radius*0.5,cx,cy,rad(36*7)+rotationRad); 
 pB5x = rotPoint_X(cx ,cy-radius*0.5,cx,cy,rad(36*9)+rotationRad); 
 pB5y = rotPoint_Y(cx ,cy-radius*0.5,cx,cy,rad(36*9)+rotationRad); 
 (isFill ==true)? 
 ( 
 gfx_triangle( cx,cy, p1x,p1y, pB1x,pB1y); 
 gfx_triangle( cx,cy, pB1x,pB1y, p2x ,p2y ); 
 gfx_triangle( cx,cy, p2x,p2y, pB2x,pB2y ); 
 gfx_triangle( cx,cy, pB2x,pB2y, p3x,p3y ); 
 gfx_triangle( cx,cy, p3x,p3y, pB3x,pB3y ); 
 gfx_triangle( cx,cy, pB3x,pB3y, p4x,p4y ); 
 gfx_triangle( cx,cy, p4x,p4y, pB4x,pB4y ); 
 gfx_triangle( cx,cy, pB4x,pB4y, p5x,p5y ); 
 gfx_triangle( cx,cy, p5x,p5y, pB5x,pB5y ); 
 gfx_triangle( cx,cy, pB5x,pB5y, p1x,p1y ); 
 ): 
 ( 
 gfx_line(p1x,p1y,pB1x,pB1y );gfx_line(pB1x,pB1y,p2x,p2y ); 
 gfx_line(p2x,p2y,pB2x,pB2y );gfx_line(pB2x,pB2y,p3x,p3y ); 
 gfx_line(p3x,p3y,pB3x,pB3y );gfx_line(pB3x,pB3y,p4x,p4y ); 
 gfx_line(p4x,p4y,pB4x,pB4y );gfx_line(pB4x,pB4y,p5x,p5y ); 
 gfx_line(p5x,p5y,pB5x,pB5y );gfx_line(pB5x,pB5y,p1x,p1y ); 
 ); 
); 
function drawFillArc(_cx,_cy,_r,_sA,_eA,_div) 
 local(divNum,oneAngleArea,polygons,count_1 
 , lastPoint 
 , centerPoint_X 
 , centerPoint_Y 
 , tempPoiont2_X 
 , tempPoiont2_Y 
 , lastPoint_X 
 , lastPoint_Y 
 ) 
( 
 oneAngleArea = (_eA - _sA)/_div; 
 polygons = STATIC_TEMP_BUFFER; 
 lastPoint_X = _cx; 
 lastPoint_Y = _cy; 
 tempPoiont2_X = _cx; 
 tempPoiont2_Y = _cy -_r; 
 tempPoiont2_X =rotPoint_X(_cx,_cy -_r,_cx,_cy,_sA); 
 tempPoiont2_Y =rotPoint_Y(_cx,_cy -_r,_cx,_cy,_sA); 
 count_1 =0; 
 while ( count_1 <=_div) 
 ( 
 tempPoiont2_X =rotPoint_X(_cx,_cy -_r,_cx,_cy,_sA+(oneAngleArea*count_1)); 
 tempPoiont2_Y =rotPoint_Y(_cx,_cy -_r,_cx,_cy,_sA+(oneAngleArea*count_1)); 
 gfx_triangle( _cx , _cy 
 , lastPoint_X , lastPoint_Y 
 , tempPoiont2_X , tempPoiont2_Y 
 ); 
 lastPoint_X = tempPoiont2_X ; 
 lastPoint_Y = tempPoiont2_Y ; 
 count_1+=1; 
 ); 
); 
function drawFillArc2(_cx,_cy,_r,_r2,_sA,_eA,_div) 
 local( divNum,oneAngleArea,polygons,count_1,centerPoint,lastPoint 
 , outerPointLast_X 
 , outerPointLast_Y 
 , outerPointNew_X 
 , outerPointNew_Y 
 , innerPointlast_X 
 , innerPointlast_Y 
 , innerPointNew_X 
 , innerPointNew_Y 
 ) 
( 
 oneAngleArea = (_eA - _sA)/_div; 
 polygons = STATIC_TEMP_BUFFER; 
 _r2 = _r2 ; 
 outerPointLast_X =rotPoint_X(_cx,_cy -_r, _cx,_cy,_sA); 
 outerPointLast_Y =rotPoint_Y(_cx,_cy -_r, _cx,_cy,_sA); 
 innerPointlast_X =rotPoint_X(_cx,_cy -_r2,_cx,_cy,_sA); 
 innerPointlast_Y =rotPoint_Y(_cx,_cy -_r2,_cx,_cy,_sA); 
 count_1 =0; 
 while ( count_1 <=_div) 
 ( 
 outerPointNew_X =rotPoint_X(_cx,_cy -_r, _cx,_cy,_sA+(oneAngleArea*count_1)); 
 outerPointNew_Y =rotPoint_Y(_cx,_cy -_r, _cx,_cy,_sA+(oneAngleArea*count_1)); 
 innerPointNew_X =rotPoint_X(_cx,_cy -_r2,_cx,_cy,_sA+(oneAngleArea*count_1)); 
 innerPointNew_Y =rotPoint_Y(_cx,_cy -_r2,_cx,_cy,_sA+(oneAngleArea*count_1)); 
 gfx_triangle( innerPointlast_X , innerPointlast_Y 
 , outerPointLast_X , outerPointLast_Y 
 , outerPointNew_X , outerPointNew_Y 
 , innerPointNew_X , innerPointNew_Y 
 , outerPointNew_X , outerPointNew_Y 
 , innerPointlast_X , innerPointlast_Y 
 ); 
 outerPointLast_X =outerPointNew_X; 
 outerPointLast_Y =outerPointNew_Y; 
 innerPointlast_X =innerPointNew_X; 
 innerPointlast_Y =innerPointNew_Y; 
 count_1+=1; 
 ); 
); 
function RECTANGLE_drawBottomRightText( RECTANGLE_ID,str) 
 local (pluginTitleStrMarginX 
 ,pluginTitleStrMarginY 
 ,pluginTitleStr 
 ,pluginTitleStr_w 
 ,pluginTitleStr_h 
 ) 
( 
 pluginTitleStrMarginX = 10; 
 pluginTitleStrMarginY = 4; 
 pluginTitleStr = #; 
 sprintf ( pluginTitleStr,str); 
 strcat (pluginTitleStr," : " ); 
 strcat (pluginTitleStr,STATICE_BUILD_DATE ); 
 gfx_measurestr(pluginTitleStr,pluginTitleStr_w,pluginTitleStr_h); 
 gfx_x = RECTANGLE_getX2(RECTANGLE_ID) - pluginTitleStr_w -pluginTitleStrMarginX; 
 gfx_y = RECTANGLE_getY2(RECTANGLE_ID) - pluginTitleStr_h -pluginTitleStrMarginY; 
 gfx_r =0;gfx_g=0;gfx_b=0;gfx_a=1; 
 gfx_rect( gfx_x -pluginTitleStrMarginX 
 , gfx_y -pluginTitleStrMarginY 
 , pluginTitleStr_w+pluginTitleStrMarginX*2 
 , pluginTitleStr_h+pluginTitleStrMarginY*2 
 ); 
 gfx_r =1;gfx_g=1;gfx_b=1;gfx_a=1; 
 gfx_drawstr( pluginTitleStr); 
); 
function RECTANGLE_drawBottomRightText2( RECTANGLE_ID,str) 
 local (pluginTitleStrMarginX 
 ,pluginTitleStrMarginY 
 ,pluginTitleStr 
 ,pluginTitleStr_w 
 ,pluginTitleStr_h 
 ) 
( 
 pluginTitleStrMarginX = 10; 
 pluginTitleStrMarginY = 4; 
 pluginTitleStr = #; 
 sprintf ( pluginTitleStr,str); 
 gfx_measurestr(pluginTitleStr,pluginTitleStr_w,pluginTitleStr_h); 
 gfx_x = RECTANGLE_getX2(RECTANGLE_ID) - pluginTitleStr_w -pluginTitleStrMarginX; 
 gfx_y = RECTANGLE_getY2(RECTANGLE_ID) - pluginTitleStr_h -pluginTitleStrMarginY; 
 gfx_r =0;gfx_g=0;gfx_b=0;gfx_a=1; 
 gfx_rect( gfx_x -pluginTitleStrMarginX 
 , gfx_y -pluginTitleStrMarginY 
 , pluginTitleStr_w+pluginTitleStrMarginX*2 
 , pluginTitleStr_h+pluginTitleStrMarginY*2 
 ); 
 gfx_r =1;gfx_g=1;gfx_b=1;gfx_a=1; 
 gfx_drawstr( pluginTitleStr); 
); 
PARTICE_DRAW_TYPE_CIRCLE = 0; 
PARTICE_DRAW_TYPE_HEX = 1; 
PARTICE_DRAW_TYPE_STAR = 2; 
PARTICE_DRAW_TYPE_TRI = 3; 
PARTICE_DRAW_TYPE_RECT = 4; 
function PARTICLESINGLE_create(x,y,radius)local (PARTICLESINGLE_ID) 
( 
 PARTICLESINGLE_ID = STATIC_MASTER_BUFF_ID; 
 STATIC_MASTER_BUFF[PARTICLESINGLE_ID] = "PARTICLE_SINGLE"; 
 STATIC_MASTER_BUFF[PARTICLESINGLE_ID+1] = 20; 
 STATIC_MASTER_BUFF[PARTICLESINGLE_ID+2] = x; 
 STATIC_MASTER_BUFF[PARTICLESINGLE_ID+3] = y; 
 STATIC_MASTER_BUFF[PARTICLESINGLE_ID+4] = radius; 
 STATIC_MASTER_BUFF[PARTICLESINGLE_ID+5] = 0; 
 STATIC_MASTER_BUFF[PARTICLESINGLE_ID+6] = 0; 
 STATIC_MASTER_BUFF[PARTICLESINGLE_ID+7] = 0; 
 STATIC_MASTER_BUFF[PARTICLESINGLE_ID+8] = x; 
 STATIC_MASTER_BUFF[PARTICLESINGLE_ID+9] = y; 
 STATIC_MASTER_BUFF[PARTICLESINGLE_ID+10] = 0; 
 STATIC_MASTER_BUFF[PARTICLESINGLE_ID+11] = 0; 
 STATIC_MASTER_BUFF[PARTICLESINGLE_ID+12] = 60; 
 STATIC_MASTER_BUFF[PARTICLESINGLE_ID+13] = 1; 
 STATIC_MASTER_BUFF[PARTICLESINGLE_ID+14] = STATIC_MASTER_BUFF[PARTICLESINGLE_ID+1]; 
 STATIC_MASTER_BUFF[PARTICLESINGLE_ID+15] = false; 
 STATIC_MASTER_BUFF[PARTICLESINGLE_ID+16] = false; 
 STATIC_MASTER_BUFF[PARTICLESINGLE_ID+17] = 0; 
 STATIC_MASTER_BUFF[PARTICLESINGLE_ID+18] = 0; 
 STATIC_MASTER_BUFF[PARTICLESINGLE_ID+19] = 0; 
 STATIC_MASTER_BUFF[PARTICLESINGLE_ID+20] = PARTICE_DRAW_TYPE_CIRCLE; 
 STATIC_MASTER_BUFF_ID +=STRUCT_getElementNum(PARTICLESINGLE_ID)+1; 
 PARTICLESINGLE_ID; 
); 
function _PARTICLESINGLE_getElementNum (PARTICLESINGLE_ID) (STATIC_MASTER_BUFF[PARTICLESINGLE_ID+13];); 
function PARTICLESINGLE_getRotationAngle (PARTICLESINGLE_ID) (STATIC_MASTER_BUFF[PARTICLESINGLE_ID+10];); 
function PARTICLESINGLE_getRotationAngleForce (PARTICLESINGLE_ID) (STATIC_MASTER_BUFF[PARTICLESINGLE_ID+17];); 
function PARTICLESINGLE_getOriginRotationAngle (PARTICLESINGLE_ID) (STATIC_MASTER_BUFF[PARTICLESINGLE_ID+18];); 
function PARTICLESINGLE_getOriginRotationAngleForce(PARTICLESINGLE_ID) (STATIC_MASTER_BUFF[PARTICLESINGLE_ID+19];); 
function PARTICLESINGLE_getParticleDrawType (PARTICLESINGLE_ID) (STATIC_MASTER_BUFF[PARTICLESINGLE_ID+20];); 
function PARTICLESINGLE_setRotationAngle (PARTICLESINGLE_ID,v) (STATIC_MASTER_BUFF[PARTICLESINGLE_ID+10]=v;); 
function PARTICLESINGLE_setRotationAngleForce (PARTICLESINGLE_ID,v) (STATIC_MASTER_BUFF[PARTICLESINGLE_ID+17]=v;); 
function PARTICLESINGLE_setOriginRotationAngle (PARTICLESINGLE_ID,v) (STATIC_MASTER_BUFF[PARTICLESINGLE_ID+18]=v;); 
function PARTICLESINGLE_setOriginRotationAngleForce(PARTICLESINGLE_ID,v) (STATIC_MASTER_BUFF[PARTICLESINGLE_ID+19]=v;); 
function PARTICLESINGLE_setParticleDrawType (PARTICLESINGLE_ID,v) (STATIC_MASTER_BUFF[PARTICLESINGLE_ID+20]=v;); 
function PARTICLESINGLE_getX (PARTICLESINGLE_ID) (STATIC_MASTER_BUFF[PARTICLESINGLE_ID+2];); 
function PARTICLESINGLE_getY (PARTICLESINGLE_ID) (STATIC_MASTER_BUFF[PARTICLESINGLE_ID+3];); 
function PARTICLESINGLE_getRadius (PARTICLESINGLE_ID) (STATIC_MASTER_BUFF[PARTICLESINGLE_ID+4];); 
function PARTICLESINGLE_getFourceX (PARTICLESINGLE_ID) (STATIC_MASTER_BUFF[PARTICLESINGLE_ID+5];); 
function PARTICLESINGLE_getFourceY (PARTICLESINGLE_ID) (STATIC_MASTER_BUFF[PARTICLESINGLE_ID+6];); 
function PARTICLESINGLE_getFourceRadius (PARTICLESINGLE_ID) (STATIC_MASTER_BUFF[PARTICLESINGLE_ID+7];); 
function PARTICLESINGLE_getOriginX (PARTICLESINGLE_ID) (STATIC_MASTER_BUFF[PARTICLESINGLE_ID+8];); 
function PARTICLESINGLE_getOriginY (PARTICLESINGLE_ID) (STATIC_MASTER_BUFF[PARTICLESINGLE_ID+9];); 
function PARTICLESINGLE_getCurrentLife (PARTICLESINGLE_ID) (STATIC_MASTER_BUFF[PARTICLESINGLE_ID+11];); 
function PARTICLESINGLE_getLife (PARTICLESINGLE_ID) (STATIC_MASTER_BUFF[PARTICLESINGLE_ID+12];); 
function PARTICLESINGLE_getAlpha (PARTICLESINGLE_ID) (STATIC_MASTER_BUFF[PARTICLESINGLE_ID+13];); 
function PARTICLESINGLE_getIsUseFadeInOutAlpha (PARTICLESINGLE_ID) (STATIC_MASTER_BUFF[PARTICLESINGLE_ID+15];); 
function PARTICLESINGLE_isUseFadeInOutAlpha (PARTICLESINGLE_ID) (PARTICLESINGLE_getIsUseFadeInOutAlpha(PARTICLESINGLE_ID);); 
function PARTICLESINGLE_getIsCircleFill (PARTICLESINGLE_ID) (STATIC_MASTER_BUFF[PARTICLESINGLE_ID+16];); 
function PARTICLESINGLE_isCircleFill (PARTICLESINGLE_ID) (PARTICLESINGLE_getIsCircleFill(PARTICLESINGLE_ID);); 
function PARTICLESINGLE_setX (PARTICLESINGLE_ID,v) (STATIC_MASTER_BUFF[PARTICLESINGLE_ID+2] =v;); 
function PARTICLESINGLE_setY (PARTICLESINGLE_ID,v) (STATIC_MASTER_BUFF[PARTICLESINGLE_ID+3] =v;); 
function PARTICLESINGLE_setRadius (PARTICLESINGLE_ID,v) (STATIC_MASTER_BUFF[PARTICLESINGLE_ID+4] =v;); 
function PARTICLESINGLE_setFourceX (PARTICLESINGLE_ID,v) (STATIC_MASTER_BUFF[PARTICLESINGLE_ID+5] =v;); 
function PARTICLESINGLE_setFourceY (PARTICLESINGLE_ID,v) (STATIC_MASTER_BUFF[PARTICLESINGLE_ID+6] =v;); 
function PARTICLESINGLE_setFourceRadius (PARTICLESINGLE_ID,v) (STATIC_MASTER_BUFF[PARTICLESINGLE_ID+7] =v;); 
function PARTICLESINGLE_setOriginX (PARTICLESINGLE_ID,v) (STATIC_MASTER_BUFF[PARTICLESINGLE_ID+8] =v;); 
function PARTICLESINGLE_setOriginY (PARTICLESINGLE_ID,v) (STATIC_MASTER_BUFF[PARTICLESINGLE_ID+9] =v;); 
function PARTICLESINGLE_setCurrentLife (PARTICLESINGLE_ID,v) (STATIC_MASTER_BUFF[PARTICLESINGLE_ID+11]=v;); 
function PARTICLESINGLE_setLife (PARTICLESINGLE_ID,v) (STATIC_MASTER_BUFF[PARTICLESINGLE_ID+12]=v;PARTICLESINGLE_setCurrentLife(PARTICLESINGLE_ID,v) ); 
function PARTICLESINGLE_setAlpha (PARTICLESINGLE_ID,v) (STATIC_MASTER_BUFF[PARTICLESINGLE_ID+13]=v;); 
function PARTICLESINGLE_setIsUseFadeInOutAlpha (PARTICLESINGLE_ID,v) (STATIC_MASTER_BUFF[PARTICLESINGLE_ID+15]=v;); 
function PARTICLESINGLE_setIsCircleFill (PARTICLESINGLE_ID,v) (STATIC_MASTER_BUFF[PARTICLESINGLE_ID+16]=v;); 
function PARTICLESINGLE_isActive(PARTICLESINGLE_ID) 
( 
 (PARTICLESINGLE_getCurrentLife(PARTICLESINGLE_ID) > 0 ); 
); 
function PARTICLESINGLE_setToDie(PARTICLESINGLE_ID)( PARTICLESINGLE_setLife(PARTICLESINGLE_ID,0);); 
function PARTICLESINGLE_syncLifeToLife(PARTICLESINGLE_ID) 
( 
 PARTICLESINGLE_setCurrentLife( PARTICLESINGLE_ID 
 , PARTICLESINGLE_getLife(PARTICLESINGLE_ID)); 
); 
function _PARTICLESINGLE_calcAlphaV(PARTICLESINGLE_ID) 
 local(curentTime_,incV,out,fadInOutTime) 
( 
 out = 0; 
 curentTime_ = PARTICLESINGLE_getCurrentLife(PARTICLESINGLE_ID)/PARTICLESINGLE_getLife(PARTICLESINGLE_ID); 
 fadInOutTime = 0.1; 
 (curentTime_ > (1-fadInOutTime) )? 
 ( 
 out = 1-(curentTime_-fadInOutTime)/fadInOutTime ; 
 ):(curentTime_ > fadInOutTime)? 
 ( 
 out = 1; 
 ):( 
 out = curentTime_/fadInOutTime ; 
 ); 
 out; 
); 
function _PARTICLESINGLE_decrementLife(PARTICLESINGLE_ID ) 
( 
 ( PARTICLESINGLE_getCurrentLife(PARTICLESINGLE_ID)-1 > 0)? 
 ( 
 PARTICLESINGLE_setCurrentLife(PARTICLESINGLE_ID 
 ,PARTICLESINGLE_getCurrentLife(PARTICLESINGLE_ID) -1); 
 ):( 
 PARTICLESINGLE_setCurrentLife(PARTICLESINGLE_ID ,0); 
 ); 
); 
function PARTICLESINGLE_update(PARTICLESINGLE_ID) 
( 
 ( PARTICLESINGLE_isActive(PARTICLESINGLE_ID) == true) ? 
 ( 
 PARTICLESINGLE_setX( PARTICLESINGLE_ID 
 , PARTICLESINGLE_getX(PARTICLESINGLE_ID) 
 + PARTICLESINGLE_getFourceX(PARTICLESINGLE_ID) ); 
 PARTICLESINGLE_setY( PARTICLESINGLE_ID 
 , PARTICLESINGLE_getY(PARTICLESINGLE_ID) 
 + PARTICLESINGLE_getFourceY(PARTICLESINGLE_ID) ); 
 PARTICLESINGLE_setRadius( PARTICLESINGLE_ID 
 , PARTICLESINGLE_getRadius(PARTICLESINGLE_ID) 
 + PARTICLESINGLE_getFourceRadius(PARTICLESINGLE_ID) ); 
 PARTICLESINGLE_setRotationAngle( PARTICLESINGLE_ID 
 , PARTICLESINGLE_getRotationAngle(PARTICLESINGLE_ID) 
 + PARTICLESINGLE_getRotationAngleForce(PARTICLESINGLE_ID)); 
 PARTICLESINGLE_setOriginRotationAngle( PARTICLESINGLE_ID 
 , PARTICLESINGLE_getOriginRotationAngle(PARTICLESINGLE_ID) 
 + PARTICLESINGLE_getOriginRotationAngleForce(PARTICLESINGLE_ID)); 
 _PARTICLESINGLE_decrementLife(PARTICLESINGLE_ID ); 
 ); 
); 
function PARTICLESINGLE_reset(PARTICLESINGLE_ID) 
( 
 PARTICLESINGLE_setFourceX (PARTICLESINGLE_ID,0) ; 
 PARTICLESINGLE_setFourceY (PARTICLESINGLE_ID,0) ; 
 PARTICLESINGLE_setFourceRadius (PARTICLESINGLE_ID,0) ; 
 PARTICLESINGLE_setRotationAngle (PARTICLESINGLE_ID,0) ; 
 PARTICLESINGLE_setRotationAngleForce (PARTICLESINGLE_ID,0) ; 
 PARTICLESINGLE_setOriginRotationAngle (PARTICLESINGLE_ID,0) ; 
 PARTICLESINGLE_setOriginRotationAngleForce(PARTICLESINGLE_ID,0) ; 
 PARTICLESINGLE_setX (PARTICLESINGLE_ID , 0 ) ; 
 PARTICLESINGLE_setY (PARTICLESINGLE_ID , 0 ) ; 
 PARTICLESINGLE_setRadius (PARTICLESINGLE_ID , 10 ) ; 
 PARTICLESINGLE_syncLifeToLife (PARTICLESINGLE_ID); 
 PARTICLESINGLE_setAlpha (PARTICLESINGLE_ID,1); 
 PARTICLESINGLE_setIsCircleFill (PARTICLESINGLE_ID,false); 
 PARTICLESINGLE_setIsUseFadeInOutAlpha (PARTICLESINGLE_ID,false); 
 PARTICLESINGLE_setParticleDrawType (PARTICLESINGLE_ID,PARTICE_DRAW_TYPE_CIRCLE); 
); 
function PARTICLESINGLE_draw(PARTICLESINGLE_ID) 
 local (lastGfx_x,lastGfx_y,lastR,lastG,lastB,lastA,drawType) 
( 
 ( PARTICLESINGLE_isActive(PARTICLESINGLE_ID) ==true) ? 
 ( 
 lastGfx_x =gfx_x;lastGfx_y =gfx_y; 
 lastR = gfx_r;lastG = gfx_g;lastB = gfx_b;lastA = gfx_a; 
 gfx_r = 1;gfx_g = 1;gfx_b = 1; 
 ( PARTICLESINGLE_isUseFadeInOutAlpha(PARTICLESINGLE_ID) == true)? 
 ( 
 gfx_a = PARTICLESINGLE_getAlpha(PARTICLESINGLE_ID) * _PARTICLESINGLE_calcAlphaV(PARTICLESINGLE_ID); 
 ):( 
 gfx_a = PARTICLESINGLE_getAlpha(PARTICLESINGLE_ID) ; 
 ); 
 drawType = PARTICLESINGLE_getParticleDrawType(PARTICLESINGLE_ID); 
 ( drawType== PARTICE_DRAW_TYPE_CIRCLE )? 
 ( 
 gfx_circle( PARTICLESINGLE_getX(PARTICLESINGLE_ID) 
 , PARTICLESINGLE_getY(PARTICLESINGLE_ID) 
 , PARTICLESINGLE_getRadius(PARTICLESINGLE_ID) 
 , (PARTICLESINGLE_isCircleFill ( PARTICLESINGLE_ID) == true) 
 , true); 
 ):( drawType == PARTICE_DRAW_TYPE_HEX )? 
 ( 
 drawHex( PARTICLESINGLE_getX(PARTICLESINGLE_ID) 
 , PARTICLESINGLE_getY(PARTICLESINGLE_ID) 
 , PARTICLESINGLE_getRadius(PARTICLESINGLE_ID) 
 , PARTICLESINGLE_getRotationAngle(PARTICLESINGLE_ID) 
 , (PARTICLESINGLE_isCircleFill ( PARTICLESINGLE_ID) == true)); 
 ):( drawType == PARTICE_DRAW_TYPE_STAR )? 
 ( 
 drawStar( PARTICLESINGLE_getX(PARTICLESINGLE_ID) 
 , PARTICLESINGLE_getY(PARTICLESINGLE_ID) 
 , PARTICLESINGLE_getRadius(PARTICLESINGLE_ID) 
 , PARTICLESINGLE_getRotationAngle(PARTICLESINGLE_ID) 
 , (PARTICLESINGLE_isCircleFill ( PARTICLESINGLE_ID) == true)); 
 ):( drawType == PARTICE_DRAW_TYPE_TRI )? 
 ( 
 drawTriangle( PARTICLESINGLE_getX(PARTICLESINGLE_ID) 
 , PARTICLESINGLE_getY(PARTICLESINGLE_ID) 
 , PARTICLESINGLE_getRadius(PARTICLESINGLE_ID) 
 , PARTICLESINGLE_getRotationAngle(PARTICLESINGLE_ID) 
 , (PARTICLESINGLE_isCircleFill ( PARTICLESINGLE_ID) == true)); 
 ):( drawType == PARTICE_DRAW_TYPE_RECT )? 
 ( 
 drawRectangle( PARTICLESINGLE_getX(PARTICLESINGLE_ID) 
 , PARTICLESINGLE_getY(PARTICLESINGLE_ID) 
 , PARTICLESINGLE_getRadius(PARTICLESINGLE_ID) 
 , PARTICLESINGLE_getRotationAngle(PARTICLESINGLE_ID) 
 , (PARTICLESINGLE_isCircleFill ( PARTICLESINGLE_ID) == true)); 
 ); 
 gfx_x = lastGfx_x;gfx_y = lastGfx_y; 
 gfx_r = lastR;gfx_g = lastG;gfx_b = lastB;gfx_a = lastA; 
 ); 
); 
function PARTICLESINGLE_drawAndUpdate(PARTICLESINGLE_ID) 
( 
 PARTICLESINGLE_draw(PARTICLESINGLE_ID); 
 PARTICLESINGLE_update(PARTICLESINGLE_ID); 
); 
STATIC_MAX_PARTICLE_NUM= 300; 
function PARTICLE_CONTROLLER_create() 
 local ( PARTICLE_CONTROLLER_ID 
 , maxParticleNum 
 , count_Abc 
 , tempParticleElem 
 , _particleElementBuffer 
 ) 
( 
 maxParticleNum = STATIC_MAX_PARTICLE_NUM; 
 _particleElementBuffer = CIRCLEBUFFER_create(maxParticleNum); 
 PARTICLE_CONTROLLER_ID = STATIC_MASTER_BUFF_ID; 
 STATIC_MASTER_BUFF[PARTICLE_CONTROLLER_ID] = "PARTICLE_SINGLE"; 
 STATIC_MASTER_BUFF[PARTICLE_CONTROLLER_ID+1] = 5; 
 STATIC_MASTER_BUFF[PARTICLE_CONTROLLER_ID+2] = _particleElementBuffer; 
 STATIC_MASTER_BUFF[PARTICLE_CONTROLLER_ID+3] = STATIC_MASTER_BUFF[PARTICLE_CONTROLLER_ID+1]; 
 STATIC_MASTER_BUFF[PARTICLE_CONTROLLER_ID+4] = maxParticleNum; 
 STATIC_MASTER_BUFF[PARTICLE_CONTROLLER_ID+5] = 0; 
 STATIC_MASTER_BUFF_ID += STRUCT_getElementNum(PARTICLE_CONTROLLER_ID)+1; 
 count_Abc = 0; 
 while ( count_Abc < maxParticleNum ) 
 ( 
 tempParticleElem = PARTICLESINGLE_create(0,0,10); 
 PARTICLESINGLE_setToDie(tempParticleElem); 
 CIRCLEBUFFER_push_front(_particleElementBuffer,tempParticleElem); 
 count_Abc +=1; 
 ); 
 PARTICLE_CONTROLLER_ID; 
); 
function _PARTICLE_CONTROLLER_getElementNum (PARTICLE_CONTROLLER_ID) (STATIC_MASTER_BUFF[PARTICLE_CONTROLLER_ID+3];); 
function PARTICLE_CONTROLLER_getParticleElementBuffer(PARTICLE_CONTROLLER_ID) (STATIC_MASTER_BUFF[PARTICLE_CONTROLLER_ID+2] ;); 
function PARTICLE_CONTROLLER_getMaxParticleNum (PARTICLE_CONTROLLER_ID) (STATIC_MASTER_BUFF[PARTICLE_CONTROLLER_ID+4] ;); 
function _PARTICLE_CONTROLLER_getInsertCursolPos (PARTICLE_CONTROLLER_ID) (STATIC_MASTER_BUFF[PARTICLE_CONTROLLER_ID+5] ;); 
function _PARTICLE_CONTROLLER_setInsertCursolPos (PARTICLE_CONTROLLER_ID,v)(STATIC_MASTER_BUFF[PARTICLE_CONTROLLER_ID+5]= v;); 
function _PARTICLE_CONTROLLER_stepInsertCursolPos(PARTICLE_CONTROLLER_ID) 
 local ( newPos ) 
( 
 newPos = _PARTICLE_CONTROLLER_getInsertCursolPos(PARTICLE_CONTROLLER_ID) +1 ; 
 ( newPos > PARTICLE_CONTROLLER_getMaxParticleNum (PARTICLE_CONTROLLER_ID) ) ? 
 ( 
 _PARTICLE_CONTROLLER_setInsertCursolPos(PARTICLE_CONTROLLER_ID,0); 
 ):( 
 _PARTICLE_CONTROLLER_setInsertCursolPos(PARTICLE_CONTROLLER_ID,newPos); 
 ); 
); 
function PARTICLE_CONTROLLER_update(PARTICLE_CONTROLLER_ID) 
 local (elementBuff,count_1,buffSize,targetParticleElement,struct_Type) 
( 
 elementBuff = PARTICLE_CONTROLLER_getParticleElementBuffer(PARTICLE_CONTROLLER_ID); 
 buffSize = CIRCLEBUFFER_getBufferSize(elementBuff); 
 count_1 = 0; 
 while ( count_1 < buffSize) 
 ( 
 targetParticleElement = CIRCLEBUFFER_getAt(elementBuff,count_1); 
 struct_Type = STRUCT_getStructType( targetParticleElement ); 
 ( strcmp(struct_Type ,"PARTICLE_SINGLE")== 0 )? 
 ( 
 PARTICLESINGLE_drawAndUpdate(targetParticleElement); 
 ); 
 count_1 +=1; 
 ); 
); 
function PARTICLE_CONTROLLER_updateAndDraw(PARTICLE_CONTROLLER_ID) 
( 
 PARTICLE_CONTROLLER_update(PARTICLE_CONTROLLER_ID); 
); 
function PARTICLE_CONTROLLER_addParticleType1(PARTICLE_CONTROLLER_ID) 
 local (elementBuff,count_1,buffSize,targetParticleElement,force,radiusTemp,count_B,tempParticleElem) 
( 
 elementBuff = PARTICLE_CONTROLLER_getParticleElementBuffer(PARTICLE_CONTROLLER_ID); 
 count_B = 0; 
 while ( count_B < 6) 
 ( 
 force = 10; 
 radiusTemp = 4*rand(); 
 tempParticleElem = CIRCLEBUFFER_getAt( elementBuff 
 , _PARTICLE_CONTROLLER_getInsertCursolPos(PARTICLE_CONTROLLER_ID) 
 ); 
 PARTICLESINGLE_reset (tempParticleElem ); 
 PARTICLESINGLE_setX (tempParticleElem , mouse_x ) ; 
 PARTICLESINGLE_setY (tempParticleElem , mouse_y ) ; 
 PARTICLESINGLE_setRadius (tempParticleElem , radiusTemp ) ; 
 PARTICLESINGLE_setFourceX (tempParticleElem , force*rand()-force/2 ) ; 
 PARTICLESINGLE_setFourceY (tempParticleElem , force*rand()-force/2 ) ; 
 PARTICLESINGLE_setFourceRadius (tempParticleElem ,(force*rand()-force/2 ) * 0.3 ) ; 
 PARTICLESINGLE_setLife (tempParticleElem , 10+40*rand()-1) ; 
 PARTICLESINGLE_syncLifeToLife (tempParticleElem); 
 PARTICLESINGLE_setRotationAngleForce (tempParticleElem,rad(30*rand()-rad(15))); 
 PARTICLESINGLE_setParticleDrawType (tempParticleElem,PARTICE_DRAW_TYPE_RECT); 
 count_B +=1; 
 _PARTICLE_CONTROLLER_stepInsertCursolPos(PARTICLE_CONTROLLER_ID); 
 ); 
); 
function PARTICLE_CONTROLLER_addParticleType2(PARTICLE_CONTROLLER_ID) 
 local (elementBuff,count_1,buffSize,targetParticleElement,force,radiusTemp,count_B,tempParticleElem) 
( 
 elementBuff = PARTICLE_CONTROLLER_getParticleElementBuffer(PARTICLE_CONTROLLER_ID); 
 count_B = 0; 
 while ( count_B < 5) 
 ( 
 force = 10; 
 radiusTemp = 4*rand(); 
 tempParticleElem = CIRCLEBUFFER_getAt( elementBuff 
 , _PARTICLE_CONTROLLER_getInsertCursolPos(PARTICLE_CONTROLLER_ID) 
 ); 
 PARTICLESINGLE_reset (tempParticleElem ); 
 PARTICLESINGLE_setX (tempParticleElem , mouse_x ) ; 
 PARTICLESINGLE_setY (tempParticleElem , mouse_y ) ; 
 PARTICLESINGLE_setRadius (tempParticleElem , radiusTemp ) ; 
 PARTICLESINGLE_setFourceX (tempParticleElem ,(force*rand()-force/2 )* 3 ); 
 PARTICLESINGLE_setFourceY (tempParticleElem ,(force*rand()-force/2 )* 3 ); 
 PARTICLESINGLE_setFourceRadius (tempParticleElem , 0 ) ; 
 PARTICLESINGLE_setLife (tempParticleElem , 10+40*rand()-1) ; 
 PARTICLESINGLE_syncLifeToLife (tempParticleElem); 
 PARTICLESINGLE_setParticleDrawType (tempParticleElem,floor(rand()*4)); 
 count_B +=1; 
 _PARTICLE_CONTROLLER_stepInsertCursolPos(PARTICLE_CONTROLLER_ID); 
 ); 
); 
function PARTICLE_CONTROLLER_addParticleType3_XY(PARTICLE_CONTROLLER_ID,x_,y_,isCircleFill) 
 local (elementBuff,count_1,buffSize,targetParticleElement,force,radiusTemp,count_B,tempParticleElem) 
( 
 elementBuff = PARTICLE_CONTROLLER_getParticleElementBuffer(PARTICLE_CONTROLLER_ID); 
 count_B = 0; 
 while ( count_B < 3) 
 ( 
 force = 5; 
 radiusTemp = 2*rand(); 
 tempParticleElem = CIRCLEBUFFER_getAt( elementBuff 
 , _PARTICLE_CONTROLLER_getInsertCursolPos(PARTICLE_CONTROLLER_ID) 
 ); 
 PARTICLESINGLE_reset (tempParticleElem ); 
 PARTICLESINGLE_setX (tempParticleElem , x_ ) ; 
 PARTICLESINGLE_setY (tempParticleElem , y_ ) ; 
 PARTICLESINGLE_setRadius (tempParticleElem , radiusTemp ) ; 
 PARTICLESINGLE_setFourceX (tempParticleElem , force*rand()-force/2 ) ; 
 PARTICLESINGLE_setFourceY (tempParticleElem , force*rand()-force/2 ) ; 
 PARTICLESINGLE_setFourceRadius (tempParticleElem ,(force*rand()-force/2 ) * 0.3 ) ; 
 PARTICLESINGLE_setLife (tempParticleElem , 10+40*rand()-1) ; 
 PARTICLESINGLE_setIsCircleFill (tempParticleElem,isCircleFill); 
 PARTICLESINGLE_setRotationAngleForce (tempParticleElem,rad(30*rand())); 
 PARTICLESINGLE_syncLifeToLife (tempParticleElem); 
 PARTICLESINGLE_setParticleDrawType (tempParticleElem,PARTICE_DRAW_TYPE_TRI); 
 count_B +=1; 
 _PARTICLE_CONTROLLER_stepInsertCursolPos(PARTICLE_CONTROLLER_ID); 
 ); 
); 
function PARTICLE_CONTROLLER_addParticleType2_XY(PARTICLE_CONTROLLER_ID,x_,y_,isCircleFill) 
 local (elementBuff,count_1,buffSize,targetParticleElement,force,radiusTemp,count_B,tempParticleElem) 
( 
 elementBuff = PARTICLE_CONTROLLER_getParticleElementBuffer(PARTICLE_CONTROLLER_ID); 
 count_B = 0; 
 while ( count_B < 5) 
 ( 
 force = 10; 
 radiusTemp = 4*rand(); 
 tempParticleElem = CIRCLEBUFFER_getAt( elementBuff 
 , _PARTICLE_CONTROLLER_getInsertCursolPos(PARTICLE_CONTROLLER_ID) 
 ); 
 PARTICLESINGLE_reset (tempParticleElem ); 
 PARTICLESINGLE_setX (tempParticleElem , x_ ) ; 
 PARTICLESINGLE_setY (tempParticleElem , y_ ) ; 
 PARTICLESINGLE_setRadius (tempParticleElem , radiusTemp ) ; 
 PARTICLESINGLE_setFourceX (tempParticleElem , (force*rand()-force/2 )* 2 ); 
 PARTICLESINGLE_setFourceY (tempParticleElem , (force*rand()-force/2 )* 2 ); 
 PARTICLESINGLE_setFourceRadius (tempParticleElem , (force*rand()-force/2 ) * 0.3 ) ; 
 PARTICLESINGLE_setLife (tempParticleElem , 10+40*rand()-1) ; 
 PARTICLESINGLE_syncLifeToLife (tempParticleElem); 
 PARTICLESINGLE_setRotationAngleForce(tempParticleElem,rad(30*rand())); 
 PARTICLESINGLE_setIsCircleFill (tempParticleElem,isCircleFill); 
 PARTICLESINGLE_setAlpha (tempParticleElem,1); 
 PARTICLESINGLE_syncLifeToLife (tempParticleElem); 
 PARTICLESINGLE_setRotationAngleForce(tempParticleElem,rad(30*rand())-rad(15)); 
 PARTICLESINGLE_setParticleDrawType (tempParticleElem,PARTICE_DRAW_TYPE_HEX); 
 ( isCircleFill ==true)? 
 ( 
 PARTICLESINGLE_setAlpha (tempParticleElem,0.4); 
 ):( 
 PARTICLESINGLE_setAlpha (tempParticleElem,1); 
 ); 
 PARTICLESINGLE_setIsUseFadeInOutAlpha(tempParticleElem,true); 
 count_B +=1; 
 _PARTICLE_CONTROLLER_stepInsertCursolPos(PARTICLE_CONTROLLER_ID); 
 ); 
); 
function PARTICLE_CONTROLLER_addParticleType4(PARTICLE_CONTROLLER_ID,particleType) 
 local (elementBuff,count_1,buffSize,targetParticleElement,force,radiusTemp,count_B,tempParticleElem) 
( 
 elementBuff = PARTICLE_CONTROLLER_getParticleElementBuffer(PARTICLE_CONTROLLER_ID); 
 count_B = 0; 
 while ( count_B < 6) 
 ( 
 force = 10; 
 radiusTemp = 4*rand(); 
 tempParticleElem = CIRCLEBUFFER_getAt( elementBuff 
 , _PARTICLE_CONTROLLER_getInsertCursolPos(PARTICLE_CONTROLLER_ID) 
 ); 
 PARTICLESINGLE_reset (tempParticleElem ); 
 PARTICLESINGLE_setX (tempParticleElem , mouse_x ) ; 
 PARTICLESINGLE_setY (tempParticleElem , mouse_y ) ; 
 PARTICLESINGLE_setRadius (tempParticleElem , radiusTemp ) ; 
 PARTICLESINGLE_setFourceX (tempParticleElem , force*rand()-force/2 ) ; 
 PARTICLESINGLE_setFourceY (tempParticleElem , force*rand()-force/2 ) ; 
 PARTICLESINGLE_setFourceRadius (tempParticleElem ,(force*rand()-force/2 ) * 0.3 ) ; 
 PARTICLESINGLE_setLife (tempParticleElem , 10+40*rand()-1) ; 
 PARTICLESINGLE_syncLifeToLife (tempParticleElem); 
 PARTICLESINGLE_setRotationAngleForce (tempParticleElem,rad(30*rand()-rad(15))); 
 PARTICLESINGLE_setParticleDrawType (tempParticleElem,particleType); 
 count_B +=1; 
 _PARTICLE_CONTROLLER_stepInsertCursolPos(PARTICLE_CONTROLLER_ID); 
 ); 
); 
function BEZIERLINE_create(x1,y1,x2,y2,bX1,bY1,bX2,bY2) 
 local( BEZIERLINE_ID 
 , pointA 
 , pointB 
 , bezierPointA 
 , bezierPointB 
 ) 
( 
 pointA = POINT_create(x1,y1); 
 pointB = POINT_create(x2,y2); 
 bezierPointA = POINT_create(bX1,bY1); 
 bezierPointB = POINT_create(bX2,bY2); 
 bezieredPoint = POINT_create(x1,y1); 
 BEZIERLINE_ID = STATIC_MASTER_BUFF_ID; 
 STATIC_MASTER_BUFF[BEZIERLINE_ID] = "BEZIERLINE"; 
 STATIC_MASTER_BUFF[BEZIERLINE_ID+1] = 10; 
 STATIC_MASTER_BUFF[BEZIERLINE_ID+2] = STATIC_MASTER_BUFF[BEZIERLINE_ID+1]; 
 STATIC_MASTER_BUFF[BEZIERLINE_ID+3] = pointA; 
 STATIC_MASTER_BUFF[BEZIERLINE_ID+4] = pointB; 
 STATIC_MASTER_BUFF[BEZIERLINE_ID+5] = bezierPointA; 
 STATIC_MASTER_BUFF[BEZIERLINE_ID+6] = bezierPointB; 
 STATIC_MASTER_BUFF[BEZIERLINE_ID+7] = bezieredPoint; 
 STATIC_MASTER_BUFF_ID +=STRUCT_getElementNum(BEZIERLINE_ID)+1; 
 BEZIERLINE_ID; 
); 
function _BEZIERLINE_getElementNum ( BEZIERLINE_ID) ( STATIC_MASTER_BUFF[BEZIERLINE_ID + 2];); 
function BEZIERLINE_getPointA ( BEZIERLINE_ID) ( STATIC_MASTER_BUFF[BEZIERLINE_ID + 3];); 
function BEZIERLINE_getPointB ( BEZIERLINE_ID) ( STATIC_MASTER_BUFF[BEZIERLINE_ID + 4];); 
function BEZIERLINE_getBezierPointA ( BEZIERLINE_ID) ( STATIC_MASTER_BUFF[BEZIERLINE_ID + 5];); 
function BEZIERLINE_getBezierPointB ( BEZIERLINE_ID) ( STATIC_MASTER_BUFF[BEZIERLINE_ID + 6];); 
function _BEZIERLINE_getBezieredPoint ( BEZIERLINE_ID) ( STATIC_MASTER_BUFF[BEZIERLINE_ID + 7];); 
function BEZIERLINE_getPointA_X ( BEZIERLINE_ID) ( POINT_getX( BEZIERLINE_getPointA(BEZIERLINE_ID));); 
function BEZIERLINE_getPointA_Y ( BEZIERLINE_ID) ( POINT_getY( BEZIERLINE_getPointA(BEZIERLINE_ID));); 
function BEZIERLINE_getPointB_X ( BEZIERLINE_ID) ( POINT_getX( BEZIERLINE_getPointB(BEZIERLINE_ID));); 
function BEZIERLINE_getPointB_Y ( BEZIERLINE_ID) ( POINT_getY( BEZIERLINE_getPointB(BEZIERLINE_ID));); 
function BEZIERLINE_getBezierPointA_X ( BEZIERLINE_ID) ( POINT_getX( BEZIERLINE_getBezierPointA(BEZIERLINE_ID));); 
function BEZIERLINE_getBezierPointA_Y ( BEZIERLINE_ID) ( POINT_getY( BEZIERLINE_getBezierPointA(BEZIERLINE_ID));); 
function BEZIERLINE_getBezierPointB_X ( BEZIERLINE_ID) ( POINT_getX( BEZIERLINE_getBezierPointB(BEZIERLINE_ID));); 
function BEZIERLINE_getBezierPointB_Y ( BEZIERLINE_ID) ( POINT_getY( BEZIERLINE_getBezierPointB(BEZIERLINE_ID));); 
function BEZIERLINE_getDistancePOINT_AB_X (BEZIERLINE_ID ) 
( 
 BEZIERLINE_getPointB_X(BEZIERLINE_ID) - BEZIERLINE_getPointA_X(BEZIERLINE_ID); 
); 
function BEZIERLINE_getDistancePOINT_AB_Y (BEZIERLINE_ID ) 
( 
 BEZIERLINE_getPointB_Y(BEZIERLINE_ID) - BEZIERLINE_getPointA_Y(BEZIERLINE_ID); 
); 
function BEZIERLINE_setPointA (BEZIERLINE_ID,x_,y_) 
( 
 POINT_setX( BEZIERLINE_getPointA(BEZIERLINE_ID),x_); 
 POINT_setY( BEZIERLINE_getPointA(BEZIERLINE_ID),Y_); 
); 
function BEZIERLINE_setPointA_X (BEZIERLINE_ID,x_) 
( 
 POINT_setX( BEZIERLINE_getPointA(BEZIERLINE_ID),x_); 
); 
function BEZIERLINE_setPointA_Y (BEZIERLINE_ID,y_) 
( 
 POINT_setY( BEZIERLINE_getPointA(BEZIERLINE_ID),Y_); 
); 
function BEZIERLINE_setPointB (BEZIERLINE_ID,x_,y_) 
( 
 POINT_setX( BEZIERLINE_getPointB(BEZIERLINE_ID),x_); 
 POINT_setY( BEZIERLINE_getPointB(BEZIERLINE_ID),Y_); 
); 
function BEZIERLINE_setPointB_X (BEZIERLINE_ID,x_) 
( 
 POINT_setX( BEZIERLINE_getPointB(BEZIERLINE_ID),x_); 
); 
function BEZIERLINE_setPointB_Y (BEZIERLINE_ID,y_) 
( 
 POINT_setY( BEZIERLINE_getPointB(BEZIERLINE_ID),Y_); 
); 
function BEZIERLINE_setBezierPointA (BEZIERLINE_ID,x_,y_) 
( 
 POINT_setX( BEZIERLINE_getBezierPointA(BEZIERLINE_ID),x_); 
 POINT_setY( BEZIERLINE_getBezierPointA(BEZIERLINE_ID),Y_); 
); 
function BEZIERLINE_setBezierPointA_X (BEZIERLINE_ID,x_) 
( 
 POINT_setX( BEZIERLINE_getBezierPointA(BEZIERLINE_ID),x_); 
); 
function BEZIERLINE_setBezierPointA_Y (BEZIERLINE_ID,y_) 
( 
 POINT_setY( BEZIERLINE_getBezierPointA(BEZIERLINE_ID),Y_); 
); 
function BEZIERLINE_setBezierPointB(BEZIERLINE_ID,x_,y_) 
( 
 POINT_setX( BEZIERLINE_getBezierPointB(BEZIERLINE_ID),x_); 
 POINT_setY( BEZIERLINE_getBezierPointB(BEZIERLINE_ID),Y_); 
); 
function BEZIERLINE_setBezierPointB_X(BEZIERLINE_ID,x_) 
( 
 POINT_setX( BEZIERLINE_getBezierPointB(BEZIERLINE_ID),x_); 
); 
function BEZIERLINE_setBezierPointB_Y(BEZIERLINE_ID,y_) 
( 
 POINT_setY( BEZIERLINE_getBezierPointB(BEZIERLINE_ID),Y_); 
); 
function BEZIERLINE_getBezierLinePoint(BEZIERLINE_ID,time_) 
 local (t,tp,x1,y1,bX1,bY1,bX2,bY2,x2,y2,xOut,yOut) 
( 
 t = time_; 
 tp = 1 - t; 
 x1 = POINT_getX(BEZIERLINE_getPointA (BEZIERLINE_ID)); 
 y1 = POINT_getY(BEZIERLINE_getPointA (BEZIERLINE_ID)); 
 x2 = POINT_getX(BEZIERLINE_getPointB (BEZIERLINE_ID)); 
 y2 = POINT_getY(BEZIERLINE_getPointB (BEZIERLINE_ID)); 
 bX1 = POINT_getX(BEZIERLINE_getBezierPointA(BEZIERLINE_ID)); 
 bY1 = POINT_getY(BEZIERLINE_getBezierPointA(BEZIERLINE_ID)); 
 bX2 = POINT_getX(BEZIERLINE_getBezierPointB(BEZIERLINE_ID)); 
 bY2 = POINT_getY(BEZIERLINE_getBezierPointB(BEZIERLINE_ID)); 
 xOut = t*t*t*x2 + 3*t*t*tp*bX2 + 3*t*tp*tp*bX1 + tp*tp*tp*x1; 
 yOut = t*t*t*y2 + 3*t*t*tp*bY2 + 3*t*tp*tp*bY1 + tp*tp*tp*y1; 
 POINT_setX(_BEZIERLINE_getBezieredPoint(BEZIERLINE_ID),xOut); 
 POINT_setY(_BEZIERLINE_getBezieredPoint(BEZIERLINE_ID),yOut); 
 _BEZIERLINE_getBezieredPoint(BEZIERLINE_ID); 
); 
function BEZIERLINE_getBezierLineAngle(BEZIERLINE_ID,time_) 
 local (t,tp,x1,y1,bX1,bY1,bX2,bY2,x2,y2,dx,dy,angleRad) 
( 
 t = time_; 
 tp = 1 - t; 
 x1 = POINT_getX(BEZIERLINE_getPointA(BEZIERLINE_ID)); 
 y1 = POINT_getY(BEZIERLINE_getPointA(BEZIERLINE_ID)); 
 x2 = POINT_getX(BEZIERLINE_getPointB(BEZIERLINE_ID)); 
 y2 = POINT_getY(BEZIERLINE_getPointB(BEZIERLINE_ID)); 
 bX1 = POINT_getX(BEZIERLINE_getBezierPointA(BEZIERLINE_ID)); 
 bY1 = POINT_getY(BEZIERLINE_getBezierPointA(BEZIERLINE_ID)); 
 bX2 = POINT_getX(BEZIERLINE_getBezierPointB(BEZIERLINE_ID)); 
 bY2 = POINT_getY(BEZIERLINE_getBezierPointB(BEZIERLINE_ID)); 
 angleRad = getBezierAngleCB(t,x1,y1,bX1,bY1,bX2,bY2,x2,y2); 
 angleRad; 
); 
function BEZIERLINE_drawLine(BEZIERLINE_ID,divNum) 
 local (count_W,timeDelta,bezierP,lastX,lastY) 
( 
 count_W = 1; 
 timeDelta = 1/divNum; 
 lastX = POINT_getX(BEZIERLINE_getPointA(BEZIERLINE_ID)); 
 lastY = POINT_getY(BEZIERLINE_getPointA(BEZIERLINE_ID)); 
 while (count_W < divNum ) 
 ( 
 bezierP = BEZIERLINE_getBezierLinePoint(BEZIERLINE_ID,timeDelta *count_W ); 
 gfx_line( lastX 
 , lastY 
 , POINT_getX(bezierP) 
 , POINT_getY(bezierP) 
 , true 
 ); 
 lastX = POINT_getX(bezierP); 
 lastY = POINT_getY(bezierP); 
 count_W+=1; 
 ); 
); 
function BEZIERLINE_drawLineWithThickNess(BEZIERLINE_ID,divNum,thickness) 
 local ( count_W 
 , timeDelta 
 , bezierP 
 , lastX 
 , lastY 
 , lastX_L 
 , lastY_L 
 , lastX_R 
 , lastY_R 
 , newX_L 
 , newY_L 
 , newX_R 
 , newY_R 
 , angleRad 
 , thickness_ 
 , cX 
 , cY 
 ) 
( 
 count_W = 1; 
 timeDelta = 1/divNum; 
 lastX = POINT_getX(BEZIERLINE_getPointA(BEZIERLINE_ID)); 
 lastY = POINT_getY(BEZIERLINE_getPointA(BEZIERLINE_ID)); 
 thickness_ = thickness; 
 angleRad = BEZIERLINE_getBezierLineAngle(BEZIERLINE_ID,0); 
 lastX_L = rotPoint_X(lastX,lastY+thickness_/2,lastX,lastY,angleRad); 
 lastY_L = rotPoint_Y(lastX,lastY+thickness_/2,lastX,lastY,angleRad); 
 lastX_R = rotPoint_X(lastX,lastY-thickness_/2,lastX,lastY,angleRad); 
 lastY_R = rotPoint_Y(lastX,lastY-thickness_/2,lastX,lastY,angleRad); 
 while (count_W <= divNum ) 
 ( 
 bezierP = BEZIERLINE_getBezierLinePoint(BEZIERLINE_ID,timeDelta *count_W ); 
 angleRad = BEZIERLINE_getBezierLineAngle(BEZIERLINE_ID,timeDelta *count_W); 
 cX = POINT_getX(bezierP); 
 cY = POINT_getY(bezierP); 
 newX_L = rotPoint_X(cX,cY+thickness_/2,cX,cY,angleRad); 
 newY_L = rotPoint_Y(cX,cY+thickness_/2,cX,cY,angleRad); 
 newX_R = rotPoint_X(cX,cY-thickness_/2,cX,cY,angleRad); 
 newY_R = rotPoint_Y(cX,cY-thickness_/2,cX,cY,angleRad); 
 gfx_triangle( lastX_L,lastY_L 
 , lastX_R,lastY_R 
 , newX_L ,newY_L 
 , newX_R ,newY_R 
 ); 
 lastX_L = newX_L; 
 lastY_L = newY_L; 
 lastX_R = newX_R; 
 lastY_R = newY_R; 
 count_W+=1; 
 ); 
); 
function BEZIERLINE_drawLineWithThickNess_withRect(BEZIERLINE_ID,divNum,thickness,targetRect) 
 local ( count_W 
 , timeDelta 
 , bezierP 
 , lastX 
 , lastY 
 , lastX_L 
 , lastY_L 
 , lastX_R 
 , lastY_R 
 , newX_L 
 , newY_L 
 , newX_R 
 , newY_R 
 , angleRad 
 , thickness_ 
 , cX 
 , cY 
 , limit_X1 
 , limit_Y1 
 , limit_X2 
 , limit_Y2 
 ) 
( 
 count_W = 1; 
 timeDelta = 1/divNum; 
 lastX = POINT_getX(BEZIERLINE_getPointA(BEZIERLINE_ID)); 
 lastY = POINT_getY(BEZIERLINE_getPointA(BEZIERLINE_ID)); 
 thickness_ = thickness; 
 angleRad = BEZIERLINE_getBezierLineAngle(BEZIERLINE_ID,0); 
 limit_X1 = RECTANGLE_getX ( targetRect); 
 limit_Y1 = RECTANGLE_getY ( targetRect); 
 limit_X2 = RECTANGLE_getX2( targetRect); 
 limit_Y2 = RECTANGLE_getY2( targetRect); 
 lastX_L = rotPoint_X(lastX,lastY+thickness_/2,lastX,lastY,angleRad); 
 lastY_L = rotPoint_Y(lastX,lastY+thickness_/2,lastX,lastY,angleRad); 
 lastX_R = rotPoint_X(lastX,lastY-thickness_/2,lastX,lastY,angleRad); 
 lastY_R = rotPoint_Y(lastX,lastY-thickness_/2,lastX,lastY,angleRad); 
 lastX_L = max ( min ( lastX_L,limit_X2),limit_X1); 
 lastY_L = max ( min ( lastY_L,limit_Y2),limit_Y1); 
 lastX_R = max ( min ( lastX_R,limit_X2),limit_X1); 
 lastY_R = max ( min ( lastY_R,limit_Y2),limit_Y1); 
 while (count_W <= divNum ) 
 ( 
 bezierP = BEZIERLINE_getBezierLinePoint(BEZIERLINE_ID,timeDelta *count_W ); 
 angleRad = BEZIERLINE_getBezierLineAngle(BEZIERLINE_ID,timeDelta *count_W); 
 cX = POINT_getX(bezierP); 
 cY = POINT_getY(bezierP); 
 newX_L = rotPoint_X(cX,cY+thickness_/2,cX,cY,angleRad); 
 newY_L = rotPoint_Y(cX,cY+thickness_/2,cX,cY,angleRad); 
 newX_R = rotPoint_X(cX,cY-thickness_/2,cX,cY,angleRad); 
 newY_R = rotPoint_Y(cX,cY-thickness_/2,cX,cY,angleRad); 
 newX_L = max ( min ( newX_L,limit_X2),limit_X1); 
 newY_L = max ( min ( newY_L,limit_Y2),limit_Y1); 
 newX_R = max ( min ( newX_R,limit_X2),limit_X1); 
 newY_R = max ( min ( newY_R,limit_Y2),limit_Y1); 
 gfx_triangle( lastX_L,lastY_L 
 , lastX_R,lastY_R 
 , newX_L ,newY_L 
 , newX_R ,newY_R 
 ); 
 lastX_L = newX_L; 
 lastY_L = newY_L; 
 lastX_R = newX_R; 
 lastY_R = newY_R; 
 count_W+=1; 
 ); 
); 
function BEZIERLINE_drawPointCircle( BEZIERLINE_ID,radius,alpha,isDrawBezierControlPoint) 
 local (t,tp,x1,y1,bX1,bY1,bX2,bY2,x2,y2,xOut,yOut,radius_ 
 ,last_a,last_r,last_g,last_b 
 ) 
( 
 last_a=gfx_a;last_r=gfx_r;last_g=gfx_g;last_b=gfx_b; 
 x1 = POINT_getX(BEZIERLINE_getPointA (BEZIERLINE_ID)); 
 y1 = POINT_getY(BEZIERLINE_getPointA (BEZIERLINE_ID)); 
 x2 = POINT_getX(BEZIERLINE_getPointB (BEZIERLINE_ID)); 
 y2 = POINT_getY(BEZIERLINE_getPointB (BEZIERLINE_ID)); 
 bX1 = POINT_getX(BEZIERLINE_getBezierPointA(BEZIERLINE_ID)); 
 bY1 = POINT_getY(BEZIERLINE_getBezierPointA(BEZIERLINE_ID)); 
 bX2 = POINT_getX(BEZIERLINE_getBezierPointB(BEZIERLINE_ID)); 
 bY2 = POINT_getY(BEZIERLINE_getBezierPointB(BEZIERLINE_ID)); 
 radius_ = radius; 
 ( isDrawBezierControlPoint== true)? 
 ( 
 gfx_r =0;gfx_g=0;gfx_b=0;gfx_a=1; 
 gfx_line(x1,y1,bX1,bY1 ); 
 gfx_line(x2,y2,bX2,bY2 ); 
 gfx_r=0.2;gfx_b=0.2;gfx_g =0.2;gfx_a =alpha; 
 gfx_circle(bX1,bY1,radius+3,true); 
 gfx_r=0;gfx_b=1;gfx_g =0;gfx_a =alpha; 
 gfx_circle(bX1,bY1,radius,true); 
 gfx_r=0.2;gfx_b=0.2;gfx_g =0.2;gfx_a =alpha; 
 gfx_circle(bX2,bY2,radius+3,true); 
 gfx_r=0;gfx_b=1;gfx_g =0;gfx_a =alpha; 
 gfx_circle(bX2,bY2,radius,true); 
 ); 
 gfx_r=0.2;gfx_b=0.2;gfx_g =0.2;gfx_a =alpha; 
 gfx_circle(x1,y1,radius_+3,true); 
 gfx_r=1;gfx_b=0;gfx_g =0;gfx_a =alpha; 
 gfx_circle(x1,y1,radius_,true); 
 gfx_r=0.2;gfx_b=0.2;gfx_g =0.2;gfx_a =alpha; 
 gfx_circle(x2,y2,radius_+3,true); 
 gfx_r=1;gfx_b=0;gfx_g =0;gfx_a =alpha; 
 gfx_circle(x2,y2,radius_,true); 
 gfx_a=last_a;gfx_r=last_r;gfx_g=last_g;gfx_b=last_b; 
); 
function BEZIERLINE_drawPointCircle_withRect( BEZIERLINE_ID,radius,alpha,isDrawBezierControlPoint,targetRect) 
 local ( t,tp,x1,y1,bX1,bY1,bX2,bY2,x2,y2,xOut,yOut,radius_ 
 , last_a,last_r,last_g,last_b 
 , limit_X1 
 , limit_Y1 
 , limit_X2 
 , limit_Y2 
 ) 
( 
 last_a=gfx_a;last_r=gfx_r;last_g=gfx_g;last_b=gfx_b; 
 x1 = POINT_getX(BEZIERLINE_getPointA (BEZIERLINE_ID)); 
 y1 = POINT_getY(BEZIERLINE_getPointA (BEZIERLINE_ID)); 
 x2 = POINT_getX(BEZIERLINE_getPointB (BEZIERLINE_ID)); 
 y2 = POINT_getY(BEZIERLINE_getPointB (BEZIERLINE_ID)); 
 bX1 = POINT_getX(BEZIERLINE_getBezierPointA(BEZIERLINE_ID)); 
 bY1 = POINT_getY(BEZIERLINE_getBezierPointA(BEZIERLINE_ID)); 
 bX2 = POINT_getX(BEZIERLINE_getBezierPointB(BEZIERLINE_ID)); 
 bY2 = POINT_getY(BEZIERLINE_getBezierPointB(BEZIERLINE_ID)); 
 limit_X1 = RECTANGLE_getX ( targetRect); 
 limit_Y1 = RECTANGLE_getY ( targetRect); 
 limit_X2 = RECTANGLE_getX2( targetRect); 
 limit_Y2 = RECTANGLE_getY2( targetRect); 
 x1 = max ( min ( x1,limit_X2) ,limit_X1 ); 
 y1 = max ( min ( y1,limit_Y2) ,limit_Y1 ); 
 x2 = max ( min ( x2,limit_X2) ,limit_X1 ); 
 y2 = max ( min ( y2,limit_Y2) ,limit_Y1 ); 
 bX1 = max ( min ( bX1,limit_X2),limit_X1 ); 
 bY1 = max ( min ( bY1,limit_Y2),limit_Y1 ); 
 bX2 = max ( min ( bX2,limit_X2),limit_X1 ); 
 bY2 = max ( min ( bY2,limit_Y2),limit_Y1 ); 
 radius_ = radius; 
 ( isDrawBezierControlPoint== true)? 
 ( 
 gfx_r =0;gfx_g=0;gfx_b=0;gfx_a=1; 
 gfx_line(x1,y1,bX1,bY1 ); 
 gfx_line(x2,y2,bX2,bY2 ); 
 gfx_r=0.2;gfx_b=0.2;gfx_g =0.2;gfx_a =alpha; 
 gfx_circle(bX1,bY1,radius+3,true); 
 gfx_r=0;gfx_b=1;gfx_g =0;gfx_a =alpha; 
 gfx_circle(bX1,bY1,radius,true); 
 gfx_r=0.2;gfx_b=0.2;gfx_g =0.2;gfx_a =alpha; 
 gfx_circle(bX2,bY2,radius+3,true); 
 gfx_r=0;gfx_b=1;gfx_g =0;gfx_a =alpha; 
 gfx_circle(bX2,bY2,radius,true); 
 ); 
 gfx_r=0.2;gfx_b=0.2;gfx_g =0.2;gfx_a =alpha; 
 gfx_circle(x1,y1,radius_+3,true); 
 gfx_r=1;gfx_b=0;gfx_g =0;gfx_a =alpha; 
 gfx_circle(x1,y1,radius_,true); 
 gfx_r=0.2;gfx_b=0.2;gfx_g =0.2;gfx_a =alpha; 
 gfx_circle(x2,y2,radius_+3,true); 
 gfx_r=1;gfx_b=0;gfx_g =0;gfx_a =alpha; 
 gfx_circle(x2,y2,radius_,true); 
 gfx_a=last_a;gfx_r=last_r;gfx_g=last_g;gfx_b=last_b; 
); 
function BEZIERLINEGROUP_create() 
 local( BEZIERLINEGROUP_ID 
 , childLinesArray 
 , childLinesArray_temp 
 ) 
( 
 childLinesArray = ARRAY_create(300); 
 childLinesArray_temp = ARRAY_create(300); 
 BEZIERLINEGROUP_ID = STATIC_MASTER_BUFF_ID; 
 STATIC_MASTER_BUFF[BEZIERLINEGROUP_ID] = "BEZIERLINEGROUP"; 
 STATIC_MASTER_BUFF[BEZIERLINEGROUP_ID+1] = 5; 
 STATIC_MASTER_BUFF[BEZIERLINEGROUP_ID+2] = STATIC_MASTER_BUFF[BEZIERLINEGROUP_ID+1]; 
 STATIC_MASTER_BUFF[BEZIERLINEGROUP_ID+3] = childLinesArray; 
 STATIC_MASTER_BUFF[BEZIERLINEGROUP_ID+4] = childLinesArray_temp; 
 STATIC_MASTER_BUFF_ID +=STRUCT_getElementNum(BEZIERLINEGROUP_ID)+1; 
 BEZIERLINEGROUP_ID; 
); 
function _BEZIERLINEGROUP_getElementNum ( BEZIERLINEGROUP_ID) ( STATIC_MASTER_BUFF[BEZIERLINEGROUP_ID + 2];); 
function BEZIERLINEGROUP_getChildPointsArray ( BEZIERLINEGROUP_ID) ( STATIC_MASTER_BUFF[BEZIERLINEGROUP_ID + 3];); 
function _BEZIERLINEGROUP_getChildPointsArray_temp( BEZIERLINEGROUP_ID) ( STATIC_MASTER_BUFF[BEZIERLINEGROUP_ID + 4];); 
function BEZIERLINEGROUP_getChildPointsNum(BEZIERLINEGROUP_ID) 
( 
 ARRAY_getBufferSize(BEZIERLINEGROUP_getChildPointsArray( BEZIERLINEGROUP_ID)); 
); 
function _BEZIERLINEGROUP_getMinX(BEZIERLINEGROUP_ID) 
 local (count_A,childPointsArray,out) 
( 
 pointNum = BEZIERLINEGROUP_getChildPointsNum(BEZIERLINEGROUP_ID); 
 childPointsArray = BEZIERLINEGROUP_getChildPointsArray( BEZIERLINEGROUP_ID); 
 count_A =0; 
 while( count_A < pointNum ) 
 ( 
 targetPoint = ARRAY_getAt(childPointsArray,count_A); 
 targetX = BEZIERLINE_getPointA_X(target) ; 
 out =( out==0 ) ? targetX : min( out,targetX); 
 count_A +=1; 
 ); 
 out; 
); 
function _BEZIERLINEGROUP_getMaxX(BEZIERLINEGROUP_ID) 
 local (count_A,childPointsArray,out) 
( 
 pointNum = BEZIERLINEGROUP_getChildPointsNum(BEZIERLINEGROUP_ID); 
 childPointsArray = BEZIERLINEGROUP_getChildPointsArray( BEZIERLINEGROUP_ID); 
 count_A =0; 
 while( count_A < pointNum ) 
 ( 
 targetPoint = ARRAY_getAt(childPointsArray,count_A); 
 targetX = BEZIERLINE_getPointA_X(target) ; 
 out =( out==0 ) ? targetX : max( out,targetX); 
 count_A +=1; 
 ); 
 out; 
); 
function BEZIERLINEGROUP_addBezierLine(BEZIERLINEGROUP_ID,bezierLine_ID_) 
( 
 ARRAY_push_back( BEZIERLINEGROUP_getChildPointsArray( BEZIERLINEGROUP_ID) 
 , bezierLine_ID_); 
); 
function BEZIERLINEGROUP_addBezierLine_(BEZIERLINEGROUP_ID,x1,y1,x2,y2,bX1,bY1,bX2,bY2) 
 local (bezierLine_ID_) 
( 
 bezierLine_ID_ = BEZIERLINE_create(x1,y1,x2,y2,bX1,bY1,bX2,bY2); 
 ARRAY_push_back( BEZIERLINEGROUP_getChildPointsArray( BEZIERLINEGROUP_ID) 
 , bezierLine_ID_); 
 bezierLine_ID_; 
); 
function BEZIERLINEGROUP_drawAll(BEZIERLINEGROUP_ID,divNum) 
 local (count_A,pointNum,childPointsArray) 
( 
 childPointsArray = BEZIERLINEGROUP_getChildPointsArray( BEZIERLINEGROUP_ID); 
 pointNum = BEZIERLINEGROUP_getChildPointsNum(BEZIERLINEGROUP_ID); 
 count_A =0; 
 while( count_A < pointNum ) 
 ( 
 targetPoint = ARRAY_getAt(childPointsArray,count_A); 
 BEZIERLINE_drawLineWithThickNess(targetPoint,divNum,4); 
 count_A +=1; 
 ); 
); 
function BEZIERLINEGROUP_drawAllWithReq(BEZIERLINEGROUP_ID,divNum,reqestNum,pointRadius) 
 local (count_A,pointNum,childPointsArray) 
( 
 childPointsArray = BEZIERLINEGROUP_getChildPointsArray( BEZIERLINEGROUP_ID); 
 count_A =0; 
 while( count_A < reqestNum ) 
 ( 
 targetPoint = ARRAY_getAt(childPointsArray,count_A); 
 BEZIERLINE_drawLineWithThickNess(targetPoint,divNum,2); 
 count_A +=1; 
 ); 
 count_A =0; 
 while( count_A < reqestNum ) 
 ( 
 targetPoint = ARRAY_getAt(childPointsArray,count_A); 
 BEZIERLINE_drawPointCircle( targetPoint,pointRadius,1,false); 
 count_A +=1; 
 ); 
); 
function BEZIERLINEGROUP_drawAllWithReq_WithRect(BEZIERLINEGROUP_ID,divNum,reqestNum,pointRadius,targetRect) 
 local (count_A,pointNum,childPointsArray) 
( 
 childPointsArray = BEZIERLINEGROUP_getChildPointsArray( BEZIERLINEGROUP_ID); 
 count_A =0; 
 while( count_A < reqestNum ) 
 ( 
 targetPoint = ARRAY_getAt(childPointsArray,count_A); 
 BEZIERLINE_drawLineWithThickNess_withRect(targetPoint,divNum,2,targetRect); 
 count_A +=1; 
 ); 
 count_A =0; 
 while( count_A < reqestNum ) 
 ( 
 targetPoint = ARRAY_getAt(childPointsArray,count_A); 
 count_A +=1; 
 ); 
); 
function COMPONENT_INDEXER_create()local(COMPONENT_INDEXR_ID) 
( 
 COMPONENT_INDEXR_ID = STATIC_MASTER_BUFF_ID; 
 STATIC_MASTER_BUFF[COMPONENT_INDEXR_ID] = "COMPONENT_INDEXER"; 
 STATIC_MASTER_BUFF[COMPONENT_INDEXR_ID+1] = 10; 
 STATIC_MASTER_BUFF[COMPONENT_INDEXR_ID+2] = 0; 
 STATIC_MASTER_BUFF[COMPONENT_INDEXR_ID+3] = 0; 
 STATIC_MASTER_BUFF[COMPONENT_INDEXR_ID+4] = 0; 
 STATIC_MASTER_BUFF[COMPONENT_INDEXR_ID+5] = 0; 
 STATIC_MASTER_BUFF[COMPONENT_INDEXR_ID+6] = 0; 
 STATIC_MASTER_BUFF[COMPONENT_INDEXR_ID+7] = STATIC_MASTER_BUFF[COMPONENT_INDEXR_ID+1]; 
 STATIC_MASTER_BUFF_ID +=STRUCT_getElementNum(COMPONENT_INDEXR_ID)+1; 
 COMPONENT_INDEXR_ID; 
); 
function _COMPONENT_INDEXER_getElementNum (COMPONENT_INDEXR_ID) ( STATIC_MASTER_BUFF[COMPONENT_INDEXR_ID + 7];); 
function COMPONENT_INDEXER_getLastEventedComponent (COMPONENT_INDEXR_ID) ( STATIC_MASTER_BUFF[COMPONENT_INDEXR_ID + 5];); 
function _COMPONENT_INDEXER_setLastEventedComponent (COMPONENT_INDEXR_ID,v) ( STATIC_MASTER_BUFF[COMPONENT_INDEXR_ID + 5]=v;); 
function COMPONENT_INDEXER_getLastTouchedComponent (COMPONENT_INDEXR_ID) ( STATIC_MASTER_BUFF[COMPONENT_INDEXR_ID + 6];); 
function _COMPONENT_INDEXER_setLastTouchedComponent (COMPONENT_INDEXR_ID,v) ( STATIC_MASTER_BUFF[COMPONENT_INDEXR_ID + 6]=v;); 
function COMPONENT_INDEXER_getLastMousePressedComponent (COMPONENT_INDEXR_ID) ( STATIC_MASTER_BUFF[COMPONENT_INDEXR_ID + 2];); 
function COMPONENT_INDEXER_getLastMouseReleasedComponent (COMPONENT_INDEXR_ID) ( STATIC_MASTER_BUFF[COMPONENT_INDEXR_ID + 3];); 
function COMPONENT_INDEXER_getLastMouseWheeledComponent (COMPONENT_INDEXR_ID) ( STATIC_MASTER_BUFF[COMPONENT_INDEXR_ID + 4];); 
function COMPONENT_INDEXER_setLastMousePressedComponent (COMPONENT_INDEXR_ID,v) 
( 
 STATIC_MASTER_BUFF[COMPONENT_INDEXR_ID + 2]=v; 
 _COMPONENT_INDEXER_setLastEventedComponent(COMPONENT_INDEXR_ID,v); 
 _COMPONENT_INDEXER_setLastTouchedComponent(COMPONENT_INDEXR_ID,v); 
); 
function COMPONENT_INDEXER_setLastMouseReleasedComponent (COMPONENT_INDEXR_ID,v) 
( 
 STATIC_MASTER_BUFF[COMPONENT_INDEXR_ID + 3]=v; 
 _COMPONENT_INDEXER_setLastEventedComponent(COMPONENT_INDEXR_ID,v); 
 _COMPONENT_INDEXER_setLastTouchedComponent(COMPONENT_INDEXR_ID,v); 
); 
function COMPONENT_INDEXER_setLastMouseWheeledComponent (COMPONENT_INDEXR_ID,v) 
( 
 STATIC_MASTER_BUFF[COMPONENT_INDEXR_ID + 4]=v; 
 _COMPONENT_INDEXER_setLastEventedComponent(COMPONENT_INDEXR_ID,v); 
 _COMPONENT_INDEXER_setLastTouchedComponent(COMPONENT_INDEXR_ID,v); 
); 
STATIC_COMPONENT_INDEXER = COMPONENT_INDEXER_create(); 
function GetLastMousePressdComponent() 
( 
 COMPONENT_INDEXER_getLastMousePressedComponent(STATIC_COMPONENT_INDEXER); 
); 
function GetLastMouseReleasedComponent() 
( 
 COMPONENT_INDEXER_getLastMouseReleasedComponent(STATIC_COMPONENT_INDEXER); 
); 
function GetLastMouseWheeledComponent() 
( 
 COMPONENT_INDEXER_getLastMouseWheeledComponent(STATIC_COMPONENT_INDEXER); 
); 
function GetLastLastEventedComponent() 
( 
 COMPONENT_INDEXER_getLastEventedComponent(STATIC_COMPONENT_INDEXER); 
); 
function GetLastTouchedComponent() 
( 
 COMPONENT_INDEXER_getLastTouchedComponent(STATIC_COMPONENT_INDEXER); 
); 
function SetLastMousePressdComponent(v) 
( 
 COMPONENT_INDEXER_setLastMousePressedComponent(STATIC_COMPONENT_INDEXER,v); 
); 
function SetLastMouseReleasedComponent(v) 
( 
 COMPONENT_INDEXER_setLastMouseReleasedComponent(STATIC_COMPONENT_INDEXER,v); 
); 
function SetLastMouseWheeledComponent(v) 
( 
 COMPONENT_INDEXER_setLastMouseWheeledComponent(STATIC_COMPONENT_INDEXER,v); 
); 
function createDefaultColorMAP()local (out_c ) 
( 
 out_c = MAP_create(); 
 MAP_setValue( out_c,"bakcground",COLOR_create(1,0.4,0.4,1)); 
 MAP_setValue( out_c,"bakcground_mouseon",COLOR_create(1,1,0,1)); 
 MAP_setValue( out_c,"black" ,COLOR_create(0,0,0,1)); 
 MAP_setValue( out_c,"white" ,COLOR_create(1,1,1,1)); 
 MAP_setValue( out_c,"red" ,COLOR_create(1,0,0,1)); 
 MAP_setValue( out_c,"yellow" ,COLOR_create(1,1,0,1)); 
 MAP_setValue( out_c,"blue" ,COLOR_create(0,0,1,1)); 
 MAP_setValue( out_c,"green" ,COLOR_create(0,1,0,1)); 
 out_c; 
); 
function COMPONENT_create(name) 
 local (COMPONENT_ID,name_,color_Map_ID,componentInfoMap,baseClassElementNum,lastRectangle) 
( 
 color_Map_ID = createDefaultColorMAP(); 
 componentInfoMap = MAP_create(); 
 lastRectangle = RECTANGLE_create(-1000,-1000,gfx_w,gfx_h); 
 COMPONENT_ID = RECTANGLE_create(-1000,-1000,gfx_w,gfx_h); 
 baseClassElementNum =_RECTANGLE_getElementNum(COMPONENT_ID); 
 STATIC_MASTER_BUFF[COMPONENT_ID ] = "COMPONENT"; 
 STATIC_MASTER_BUFF[COMPONENT_ID + 1] = baseClassElementNum + 20; 
 STATIC_MASTER_BUFF[COMPONENT_ID + baseClassElementNum + 1] = 0 ; 
 STATIC_MASTER_BUFF[COMPONENT_ID + baseClassElementNum + 2] = name; 
 STATIC_MASTER_BUFF[COMPONENT_ID + baseClassElementNum + 3] = false; 
 STATIC_MASTER_BUFF[COMPONENT_ID + baseClassElementNum + 4] = 0; 
 STATIC_MASTER_BUFF[COMPONENT_ID + baseClassElementNum + 5] = 1; 
 STATIC_MASTER_BUFF[COMPONENT_ID + baseClassElementNum + 6] = color_Map_ID; 
 STATIC_MASTER_BUFF[COMPONENT_ID + baseClassElementNum + 7] = -123456; 
 STATIC_MASTER_BUFF[COMPONENT_ID + baseClassElementNum + 8] = true; 
 STATIC_MASTER_BUFF[COMPONENT_ID + baseClassElementNum + 9] = 0; 
 STATIC_MASTER_BUFF[COMPONENT_ID + baseClassElementNum + 10] = 1.0; 
 STATIC_MASTER_BUFF[COMPONENT_ID + baseClassElementNum + 11] = componentInfoMap; 
 STATIC_MASTER_BUFF[COMPONENT_ID + baseClassElementNum + 12] = 0; 
 STATIC_MASTER_BUFF[COMPONENT_ID + baseClassElementNum + 13] = STATIC_MASTER_BUFF[COMPONENT_ID + 1]; 
 STATIC_MASTER_BUFF[COMPONENT_ID + baseClassElementNum + 14] = 0; 
 STATIC_MASTER_BUFF[COMPONENT_ID + baseClassElementNum + 15] = lastRectangle; 
 STATIC_MASTER_BUFF_ID +=STRUCT_getElementNum (COMPONENT_ID)+1; 
 COMPONENT_ID; 
); 
function _COMPONENT_getElementNum(COMPONENT_ID) ( STATIC_MASTER_BUFF[COMPONENT_ID+_RECTANGLE_getElementNum(COMPONENT_ID)+13];); 
function COMPONENT_getLastRectAngle( COMPONENT_ID) ( STATIC_MASTER_BUFF[ COMPONENT_ID+_RECTANGLE_getElementNum(COMPONENT_ID)+15];); 
function COMPONENT_storeLastRectAngle( COMPONENT_ID) ( RECTANGLE_copyTo ( COMPONENT_getLastRectAngle( COMPONENT_ID),COMPONENT_ID);); 
function COMPONENT_isSizeChanged(COMPONENT_ID) ( (RECTANGLE_compare ( COMPONENT_getLastRectAngle( COMPONENT_ID),COMPONENT_ID)==false );); 
function COMPONENT_getLastValue( COMPONENT_ID) ( STATIC_MASTER_BUFF[COMPONENT_ID+_RECTANGLE_getElementNum(COMPONENT_ID)+14];); 
function COMPONENT_setLastValue( COMPONENT_ID,v) ( STATIC_MASTER_BUFF[COMPONENT_ID+_RECTANGLE_getElementNum(COMPONENT_ID)+14]=v;); 
function COMPONENT_getSliderindex( COMPONENT_ID) ( STATIC_MASTER_BUFF[COMPONENT_ID+_RECTANGLE_getElementNum(COMPONENT_ID)+12];); 
function COMPONENT_setSliderindex( COMPONENT_ID,idx) ( STATIC_MASTER_BUFF[COMPONENT_ID+_RECTANGLE_getElementNum(COMPONENT_ID)+12]=idx;); 
function COMPONENT_getComponentInfoMap ( COMPONENT_ID) ( STATIC_MASTER_BUFF[COMPONENT_ID+_RECTANGLE_getElementNum(COMPONENT_ID)+11];); 
function COMPONENT_getComponentInfoValue( COMPONENT_ID,keyName) 
( 
 MAP_getValue ( COMPONENT_getComponentInfoMap( COMPONENT_ID) 
 , keyName); 
); 
function COMPONENT_setComponentInfoValue( COMPONENT_ID,keyName,value) 
( 
 MAP_setValue ( COMPONENT_getComponentInfoMap( COMPONENT_ID) 
 , keyName 
 , value); 
); 
function COMPONENT_isParrentLayerResized( COMPONENT_ID) 
( 
 COMPONENT_getComponentInfoValue( COMPONENT_ID,"parrentLayer_Resized"); 
); 
function COMPONENT_getMinValue(COMPONENT_ID) ( STATIC_MASTER_BUFF[COMPONENT_ID+_RECTANGLE_getElementNum(COMPONENT_ID)+9];); 
function COMPONENT_setMinValue(COMPONENT_ID,v) ( STATIC_MASTER_BUFF[COMPONENT_ID+_RECTANGLE_getElementNum(COMPONENT_ID)+9]=v;); 
function COMPONENT_getMaxValue(COMPONENT_ID) ( STATIC_MASTER_BUFF[COMPONENT_ID+_RECTANGLE_getElementNum(COMPONENT_ID)+10];); 
function COMPONENT_setMaxValue(COMPONENT_ID,v) ( STATIC_MASTER_BUFF[COMPONENT_ID+_RECTANGLE_getElementNum(COMPONENT_ID)+10]=v;); 
function COMPONENT_isActive(COMPONENT_ID) ( STATIC_MASTER_BUFF[COMPONENT_ID+_RECTANGLE_getElementNum(COMPONENT_ID)+8];); 
function COMPONENT_getIsActive(COMPONENT_ID) ( STATIC_MASTER_BUFF[COMPONENT_ID+_RECTANGLE_getElementNum(COMPONENT_ID)+8];); 
function COMPONENT_setIsActive(COMPONENT_ID,v) ( STATIC_MASTER_BUFF[COMPONENT_ID+_RECTANGLE_getElementNum(COMPONENT_ID)+8]=v;); 
function COMPONENT_setActive(COMPONENT_ID,v) ( COMPONENT_setIsActive(COMPONENT_ID,v); ); 
function COMPONENT_toggleIsActive( COMPONENT_ID) 
( 
 COMPONENT_setIsActive( COMPONENT_ID 
 ,(COMPONENT_getIsActive(COMPONENT_ID) == false) 
 ); 
); 
function COMPONENT_getParrentLAYRE(COMPONENT_ID) ( STATIC_MASTER_BUFF[COMPONENT_ID +_RECTANGLE_getElementNum(COMPONENT_ID)+7];); 
function COMPONENT_setParrentLAYRE(COMPONENT_ID,p) ( STATIC_MASTER_BUFF[COMPONENT_ID +_RECTANGLE_getElementNum(COMPONENT_ID)+7] = p;); 
function COMPONENT_isExistParrentLAYRE(COMPONENT_ID) ( ( STATIC_MASTER_BUFF[COMPONENT_ID +_RECTANGLE_getElementNum(COMPONENT_ID)+7] != -123456); ); 
function COMPONENT_getValue(COMPONENT_ID) 
( 
 STATIC_MASTER_BUFF[COMPONENT_ID +_RECTANGLE_getElementNum(COMPONENT_ID)+4]; 
); 
function COMPONENT_getParameteredValue(COMPONENT_ID) local (minV,maxV,value,out) 
( 
 minV = COMPONENT_getMinValue(COMPONENT_ID); 
 maxV = COMPONENT_getMaxValue(COMPONENT_ID); 
 value = STATIC_MASTER_BUFF[COMPONENT_ID +_RECTANGLE_getElementNum(COMPONENT_ID)+4]; 
 out = minV+ ( maxV-minV) * value; 
 out; 
); 
function COMPONENT_setValue(COMPONENT_ID,value,isSendReaper) 
( 
 STATIC_MASTER_BUFF[ COMPONENT_ID 
 + _RECTANGLE_getElementNum(COMPONENT_ID) 
 + 4 
 ] = min( max( value,0),1); 
 (isSendReaper ==true)? 
 ( 
 slider( COMPONENT_getSliderIndex(COMPONENT_ID) ) = COMPONENT_getValue(COMPONENT_ID);; 
 slider_automate(2 ^ COMPONENT_getSliderIndex(COMPONENT_ID) -1 ); 
 DBG("value Changed, in setValue"); 
 DBG_float( COMPONENT_getValue(COMPONENT_ID)); 
 ); 
); 
function COMPONENT_getValueString( COMPONENT_ID) local ( out ) 
( 
 out =#; 
 sprintf ("%f",COMPONENT_getValue(COMPONENT_ID ) ); 
 out; 
); 
function COMPONENT_getName(COMPONENT_ID) ( STATIC_MASTER_BUFF[COMPONENT_ID +_RECTANGLE_getElementNum(COMPONENT_ID)+ 2];); 
function COMPONENT_setName(COMPONENT_ID,name) ( STATIC_MASTER_BUFF[COMPONENT_ID +_RECTANGLE_getElementNum(COMPONENT_ID)+ 2]=name;); 
function COMPONENT_isMousePressStartedInThisComp(COMPONENT_ID) ( STATIC_MASTER_BUFF[COMPONENT_ID +_RECTANGLE_getElementNum(COMPONENT_ID)+ 3];); 
function COMPONENT_setIsMousePressStartedInThisComp(COMPONENT_ID,bool)( STATIC_MASTER_BUFF[COMPONENT_ID +_RECTANGLE_getElementNum(COMPONENT_ID)+ 3] = bool;); 
function COMPONENT_getComponentAlpha(COMPONENT_ID) ( STATIC_MASTER_BUFF[COMPONENT_ID +_RECTANGLE_getElementNum(COMPONENT_ID)+ 5];); 
function COMPONENT_setComponentAlpha(COMPONENT_ID,a) ( STATIC_MASTER_BUFF[COMPONENT_ID +_RECTANGLE_getElementNum(COMPONENT_ID)+ 5] = a;); 
function COMPONENT_getColorMap(COMPONENT_ID) ( STATIC_MASTER_BUFF[COMPONENT_ID +_RECTANGLE_getElementNum(COMPONENT_ID)+ 6];); 
function COMPONENT_getColor(COMPONENT_ID,colorKeyName) local (outColor_ID) 
( 
 outColor_ID = MAP_getValue( COMPONENT_getColorMap(COMPONENT_ID) 
 , colorKeyName); 
 outColor_ID; 
); 
function COMPONENT_addColor(COMPONENT_ID,colorKeyName,color_ID_) 
( 
 MAP_setValue( COMPONENT_getColorMap(COMPONENT_ID) 
 , colorKeyName 
 , color_ID_ ); 
); 
function COMPONENT_changeColor(COMPONENT_ID,colorKeyName,r,g,b,a) local (colorID) 
( 
 colorID = MAP_getValue( COMPONENT_getColorMap(COMPONENT_ID) 
 , colorKeyName); 
 COLOR_setR(colorID,r) ; 
 COLOR_setG(colorID,g) ; 
 COLOR_setB(colorID,b) ; 
 COLOR_setA(colorID,a) ; 
); 
function COMPONENT_changeColorGfx( COMPONENT_ID,colorKeyName)local (COLOR_ID_2) 
( 
 COLOR_ID_2 = COMPONENT_getColor(COMPONENT_ID,colorKeyName); 
 gfx_r = COLOR_getR(COLOR_ID_2); 
 gfx_g = COLOR_getG(COLOR_ID_2); 
 gfx_b = COLOR_getB(COLOR_ID_2); 
 gfx_a = COLOR_getA(COLOR_ID_2)*COMPONENT_getComponentAlpha(COMPONENT_ID); 
); 
function COMPONENT_getDBGText(COMPONENT_ID,optMsG) local (out) 
( 
 out =#; 
 out = stringCat(STRUCT_getStructType(COMPONENT_ID),COMPONENT_getName(COMPONENT_ID)); 
 stringCat(out,optMsG); 
 out; 
); 
function COMPONENT_isValueChanged( COMPONENT_ID) 
( 
 ( COMPONENT_getLastValue( COMPONENT_ID) != COMPONENT_getValue(COMPONENT_ID)); 
); 
function COMPONENT_update(COMPONENT_ID) 
( 
 COMPONENT_setLastValue( COMPONENT_ID 
 , COMPONENT_getValue( COMPONENT_ID)); 
); 
function COMPONENT_resized(COMPONENT_ID,parrentLeyerRect) 
( 
 0; 
 DBG("COMPO_Resized"); 
); 
function COMPONENT_draw(COMPONENT_ID)local (radius,lineH,x,y,w,h,circle_Area_ID) 
( 
 x = RECTANGLE_getX(COMPONENT_ID); 
 y = RECTANGLE_getY(COMPONENT_ID); 
 w = RECTANGLE_getWidth(COMPONENT_ID); 
 h = RECTANGLE_getHeight(COMPONENT_ID); 
 ( RECTANGLE_isContainMouse(COMPONENT_ID) ==true) ? 
 ( 
 COMPONENT_changeColorGfx( COMPONENT_ID,"bakcground_mouseon"); 
 ):( 
 COMPONENT_changeColorGfx( COMPONENT_ID,"bakcground"); 
 ); 
 RECTANGLE_drawFill(COMPONENT_ID,true); 
 gfx_rect( x , y , w, h,true); 
); 
function COMPONENT_mouseMoved(COMPONENT_ID,MOUSEINFO_ID) 
( 
 ( RECTANGLE_isContainMouse(COMPONENT_ID) ==true) ? 
 ( 
 DBG("COMPO_MOUSE_MOVE"); 
 ); 
); 
function COMPONENT_mouseButtonPressd(COMPONENT_ID,MOUSEINFO_ID )local(circle_Area_ID) 
( 
 ( RECTANGLE_isContainMouse(COMPONENT_ID) ==true) ? 
 ( 
 DBG("COMPO_MOUSE_BUTTON_PRESS_IN"); 
 SetLastMousePressdComponent(XYSLIDER_ID); 
 COMPONENT_setIsMousePressStartedInThisComp(COMPONENT_ID,true); 
 ):( 
 COMPONENT_setIsMousePressStartedInThisComp(COMPONENT_ID,false); 
 ); 
); 
function COMPONENT_mouseButtonReleased( COMPONENT_ID,MOUSEINFO_ID ) 
( 
 ( RECTANGLE_isContainMouse(COMPONENT_ID) ==true) ? 
 ( 
 DBG("COMPO_MOUSE_BUTTON_RELEASE"); 
 SetLastMouseReleasedComponent(COMPONENT_ID); 
 ); 
); 
function COMPONENT_mouseWheeled(COMPONENT_ID,MOUSEINFO_ID ) 
( 
 ( RECTANGLE_isContainMouse(COMPONENT_ID) ==true) ? 
 ( 
 DBG("COMPO_MOUSE_WHEELD"); 
 SetLastMouseWheeledComponent(COMPONENT_ID); 
 ); 
); 
function BUTTON_create(name) local (BUTTON_ID,baseClassElementNum) 
( 
 BUTTON_ID = COMPONENT_create(name); 
 STATIC_MASTER_BUFF[BUTTON_ID ] = "BUTTON"; 
 baseClassElementNum =_COMPONENT_getElementNum(BUTTON_ID); 
 STATIC_MASTER_BUFF[BUTTON_ID + 1] = baseClassElementNum +1; 
 STATIC_MASTER_BUFF[BUTTON_ID + baseClassElementNum + 1] = STATIC_MASTER_BUFF[BUTTON_ID + 1]; 
 STATIC_MASTER_BUFF_ID += STRUCT_getElementNum (BUTTON_ID)+1; 
 COMPONENT_addColor( BUTTON_ID 
 ,"textColor" 
 , COLOR_create(0,0,0,1)); 
 COMPONENT_addColor( BUTTON_ID 
 ,"textColor_mouseon" 
 , COLOR_create(0,1,1,1)); 
 COMPONENT_addColor( BUTTON_ID 
 ,"butonOnBackGroundColor" 
 , COLOR_create(0,0,1,1)); 
 COMPONENT_setComponentInfoValue( BUTTON_ID,"buttonOnText_Post" ,":ON ") ; 
 COMPONENT_setComponentInfoValue( BUTTON_ID,"buttonOffText_Post",":OFF") ; 
 BUTTON_ID; 
); 
function _BUTTON_getElementNum(BUTTON_ID) ( STATIC_MASTER_BUFF[BUTTON_ID + _COMPONENT_getElementNum(BUTTON_ID)+1];); 
function BUTTON_getOnTextPostFix(BUTTON_ID) ( COMPONENT_getComponentInfoValue(BUTTON_ID,"buttonOnText_Post");); 
function BUTTON_getOffTextPostFix(BUTTON_ID) ( COMPONENT_getComponentInfoValue(BUTTON_ID,"buttonOffText_Post");); 
function BUTTON_setOnTextPostFix(BUTTON_ID,str) ( COMPONENT_setComponentInfoValue(BUTTON_ID,"buttonOnText_Post",str);); 
function BUTTON_setOffTextPostFix(BUTTON_ID,str) ( COMPONENT_setComponentInfoValue(BUTTON_ID,"buttonOffText_Post",str);); 
function BUTTON_isON(BUTTON_ID) ( (COMPONENT_getValue(BUTTON_ID) > 0);); 
function BUTTON_isOFF(BUTTON_ID) ( (BUTTON_isON(BUTTON_ID) == false );); 
function BUTTON_setON(BUTTON_ID,isSedeReaper) ( COMPONENT_setValue(BUTTON_ID,1,isSedeReaper);); 
function BUTTON_ON(BUTTON_ID,isSedeReaper) ( COMPONENT_setValue(BUTTON_ID,1,isSedeReaper);); 
function BUTTON_setOFF(BUTTON_ID,isSedeReaper) ( COMPONENT_setValue(BUTTON_ID,0,isSedeReaper);); 
function BUTTON_OFF(BUTTON_ID,isSedeReaper) ( COMPONENT_setValue(BUTTON_ID,0,isSedeReaper);); 
function BUTTON_toggleOnOff(BUTTON_ID,isSedeReaper)( COMPONENT_setValue(BUTTON_ID,(BUTTON_isON(BUTTON_ID)==false),isSedeReaper); ); 
function BUTTON_update(BUTTON_ID) 
( 
 COMPONENT_update( BUTTON_ID); 
); 
function BUTTON_resized(BUTTON_ID,parrentRECT ) 
( 
 0; 
); 
function BUTTON_draw(BUTTON_ID)local (tempText) 
( 
 ( RECTANGLE_isContainMouse(BUTTON_ID) ==true ) ? 
 ( 
 COMPONENT_changeColorGfx( BUTTON_ID,"bakcground_mouseon"); 
 ):( BUTTON_isON(BUTTON_ID) == true ) ? 
 ( 
 COMPONENT_changeColorGfx( BUTTON_ID,"butonOnBackGroundColor"); 
 ):( 
 COMPONENT_changeColorGfx( BUTTON_ID,"bakcground"); 
 ); 
 RECTANGLE_drawFill(BUTTON_ID,true); 
 ( RECTANGLE_isContainMouse(BUTTON_ID) ==true) ? 
 ( 
 COMPONENT_changeColorGfx( BUTTON_ID,"textColor_mouseon"); 
 ):( 
 COMPONENT_changeColorGfx( BUTTON_ID,"textColor"); 
 ); 
 tempText = #; 
 sprintf( tempText ,COMPONENT_getName(BUTTON_ID) ); 
 (BUTTON_isON(BUTTON_ID) ==true)? 
 ( 
 strcat(tempText, BUTTON_getOnTextPostFix(BUTTON_ID)); 
 COMPONENT_changeColorGfx( BUTTON_ID,"textColor_mouseon"); 
 ):( 
 strcat(tempText, BUTTON_getOffTextPostFix(BUTTON_ID)); 
 ); 
 RECTANGLE_drawStrInCenterFitFont(BUTTON_ID,tempText); 
); 
function BUTTON_mouseMoved(BUTTON_ID,MOUSEINFO_ID) 
( 
 ( RECTANGLE_isContainMouse(BUTTON_ID) ==true) ? 
 ( 
 DBG(" BUTTON Mouse Moved"); 
 ); 
); 
function BUTTON_mouseButtonPressd(BUTTON_ID,MOUSEINFO_ID )local(circle_Area_ID) 
( 
 ( RECTANGLE_isContainMouse(BUTTON_ID) ==true) ? 
 ( 
 SetLastMousePressdComponent(BUTTON_ID); 
 DBG(" BUTTON Mouse Button Press IN"); 
 COMPONENT_setIsMousePressStartedInThisComp(BUTTON_ID,true); 
 ):( 
 COMPONENT_setIsMousePressStartedInThisComp(BUTTON_ID,false); 
 ); 
); 
function BUTTON_mouseButtonReleased( BUTTON_ID,MOUSEINFO_ID )local (tempstr) 
( 
 ( RECTANGLE_isContainMouse(BUTTON_ID) ==true) ? 
 ( 
 DBG(" BUTTON Mouse Button Released"); 
 SetLastMouseReleasedComponent(BUTTON_ID); 
 (COMPONENT_isMousePressStartedInThisComp(BUTTON_ID) ==true)? 
 ( 
 BUTTON_toggleOnOff(BUTTON_ID,true); 
 ); 
 ); 
); 
function BUTTON_mouseWheeled(BUTTON_ID,MOUSEINFO_ID ) 
( 
 ( RECTANGLE_isContainMouse(BUTTON_ID) ==true) ? 
 ( 
 DBG(" BUTTON Mouse Wheeld"); 
 SetLastMouseWheeledComponent(BUTTON_ID); 
 ); 
); 
function BUTTONGROUP_create(name) 
 local (BUTTONGROUP_ID,baseClassElementNum,childButtons) 
( 
 childButtons = ARRAY_create(100); 
 BUTTONGROUP_ID = COMPONENT_create(name); 
 STATIC_MASTER_BUFF[BUTTONGROUP_ID ] = "BUTTONGROUP"; 
 baseClassElementNum =_COMPONENT_getElementNum(BUTTONGROUP_ID); 
 STATIC_MASTER_BUFF[BUTTONGROUP_ID + 1] = baseClassElementNum +7; 
 STATIC_MASTER_BUFF[BUTTONGROUP_ID + baseClassElementNum + 1] = STATIC_MASTER_BUFF[BUTTONGROUP_ID + 1]; 
 STATIC_MASTER_BUFF[BUTTONGROUP_ID + baseClassElementNum + 2] = childButtons; 
 STATIC_MASTER_BUFF[BUTTONGROUP_ID + baseClassElementNum + 3] = 0; 
 STATIC_MASTER_BUFF[BUTTONGROUP_ID + baseClassElementNum + 4] = true; 
 STATIC_MASTER_BUFF[BUTTONGROUP_ID + baseClassElementNum + 5] = 1; 
 STATIC_MASTER_BUFF[BUTTONGROUP_ID + baseClassElementNum + 6] = false; 
 STATIC_MASTER_BUFF_ID += STRUCT_getElementNum (BUTTONGROUP_ID)+1; 
 BUTTONGROUP_ID; 
); 
function _BUTTONGROUP_getElementNum (BUTTONGROUP_ID) ( STATIC_MASTER_BUFF[BUTTONGROUP_ID + _COMPONENT_getElementNum(BUTTONGROUP_ID)+1];); 
function _BUTTONGROUP_getChildButtonArray (BUTTONGROUP_ID) ( STATIC_MASTER_BUFF[BUTTONGROUP_ID + _COMPONENT_getElementNum(BUTTONGROUP_ID)+2];); 
function _BUTTONGROUP_getCurrentButtonIndex (BUTTONGROUP_ID) ( STATIC_MASTER_BUFF[BUTTONGROUP_ID + _COMPONENT_getElementNum(BUTTONGROUP_ID)+3];); 
function _BUTTONGROUP_setCurrentButtonIndex (BUTTONGROUP_ID,v) ( STATIC_MASTER_BUFF[BUTTONGROUP_ID + _COMPONENT_getElementNum(BUTTONGROUP_ID)+3] = v;); 
function _BUTTONGROUP_getNeedResized (BUTTONGROUP_ID) ( STATIC_MASTER_BUFF[BUTTONGROUP_ID + _COMPONENT_getElementNum(BUTTONGROUP_ID)+4];); 
function _BUTTONGROUP_setNeedResized (BUTTONGROUP_ID,v) ( STATIC_MASTER_BUFF[BUTTONGROUP_ID + _COMPONENT_getElementNum(BUTTONGROUP_ID)+4] = v;); 
function _BUTTONGROUP_getLastIndex (BUTTONGROUP_ID) ( STATIC_MASTER_BUFF[BUTTONGROUP_ID + _COMPONENT_getElementNum(BUTTONGROUP_ID)+5];); 
function _BUTTONGROUP_setLastIndex (BUTTONGROUP_ID,v) ( STATIC_MASTER_BUFF[BUTTONGROUP_ID + _COMPONENT_getElementNum(BUTTONGROUP_ID)+5] = v;); 
function _BUTTONGROUP_getIsCurrentIndexChanged(BUTTONGROUP_ID) ( STATIC_MASTER_BUFF[BUTTONGROUP_ID + _COMPONENT_getElementNum(BUTTONGROUP_ID)+6];); 
function _BUTTONGROUP_setIsCurrentIndexChanged(BUTTONGROUP_ID,v) ( STATIC_MASTER_BUFF[BUTTONGROUP_ID + _COMPONENT_getElementNum(BUTTONGROUP_ID)+6]=v;); 
function BUTTONGROUP_isIndexChanged (BUTTONGROUP_ID ) ( _BUTTONGROUP_getIsCurrentIndexChanged(BUTTONGROUP_ID); ); 
function BUTTONGROUP_getButtonNum (BUTTONGROUP_ID) 
 local (buttonArray) 
( 
 buttonArray = _BUTTONGROUP_getChildButtonArray(BUTTONGROUP_ID); 
 ARRAY_getBufferSize(buttonArray); 
); 
function BUTTONGROUP_getCurrentButtonComponent(BUTTONGROUP_ID) 
( 
 ARRAY_getAt( _BUTTONGROUP_getChildButtonArray (BUTTONGROUP_ID) 
 , _BUTTONGROUP_getCurrentButtonIndex (BUTTONGROUP_ID) ); 
); 
function BUTTONGROUP_getCurrentButtonName(BUTTONGROUP_ID) 
( 
 COMPONENT_getName (BUTTONGROUP_getCurrentButtonComponent(BUTTONGROUP_ID)); 
); 
function BUTTONGROUP_setCurrentButtonComponentByComponent(BUTTONGROUP_ID,btComp) 
 local (buttonArray,count_A,targetComp,targetIdx) 
( 
 buttonArray = _BUTTONGROUP_getChildButtonArray(BUTTONGROUP_ID); 
 count_A = 0; 
 targetIdx = _BUTTONGROUP_getCurrentButtonIndex (BUTTONGROUP_ID); 
 targetComp = BUTTONGROUP_getCurrentButtonComponent(BUTTONGROUP_ID); 
 while ( count_A < ARRAY_getBufferSize(buttonArray) ) 
 ( 
 BUTTON_Off ( ARRAY_getAt(buttonArray,count_A),true); 
 ( ARRAY_getAt(buttonArray,count_A) == btComp)? 
 ( 
 targetIdx = count_A; 
 targetComp = ARRAY_getAt(buttonArray,count_A); 
 ); 
 count_A +=1; 
 ); 
 _BUTTONGROUP_setCurrentButtonIndex (BUTTONGROUP_ID,targetIdx); 
 BUTTON_ON ( targetComp ,true); 
 _BUTTONGROUP_setNeedResized(BUTTONGROUP_ID,true); 
); 
function BUTTONGROUP_setCurrentButtonComponentByName(BUTTONGROUP_ID,buttonName) 
 local (buttonArray,count_A,button_,targetComp,targetIdx) 
( 
 buttonArray = _BUTTONGROUP_getChildButtonArray(BUTTONGROUP_ID); 
 count_A = 0; 
 targetIdx = _BUTTONGROUP_getCurrentButtonIndex (BUTTONGROUP_ID); 
 targetComp = BUTTONGROUP_getCurrentButtonComponent(BUTTONGROUP_ID); 
 while ( count_A < ARRAY_getBufferSize(buttonArray) ) 
 ( 
 button_ = ARRAY_getAt(buttonArray,count_A); 
 BUTTON_Off ( button_ ,true); 
 ( stringCompareFromNum( COMPONENT_getName(button_), buttonName) == 0 )? 
 ( 
 targetIdx = count_A; 
 targetComp = button_; 
 ); 
 count_A +=1; 
 ); 
 _BUTTONGROUP_setCurrentButtonIndex (BUTTONGROUP_ID,targetIdx); 
 BUTTON_ON ( targetComp ,true); 
 _BUTTONGROUP_setNeedResized(BUTTONGROUP_ID,true); 
 slider( COMPONENT_getSliderIndex(BUTTONGROUP_ID) ) 
 = _BUTTONGROUP_getCurrentButtonIndex (BUTTONGROUP_ID);; 
); 
function BUTTONGROUP_setCurrentButtonComponentByIndex(BUTTONGROUP_ID,indexNum) 
 local (buttonArray,count_A,button_) 
( 
 buttonArray = _BUTTONGROUP_getChildButtonArray(BUTTONGROUP_ID); 
 ( indexNum >= 0 
 && indexNum < ARRAY_getBufferSize(buttonArray) )? 
 ( 
 button_ = ARRAY_getAt(buttonArray,indexNum); 
 BUTTONGROUP_setCurrentButtonComponentByComponent(BUTTONGROUP_ID,button_); 
 ); 
 slider( COMPONENT_getSliderIndex(BUTTONGROUP_ID) ) 
 = _BUTTONGROUP_getCurrentButtonIndex (BUTTONGROUP_ID);; 
); 
function BUTTONGROUP_stepCurrentButtonIndex(BUTTONGROUP_ID,stepNum ) 
 local (buttonArray, newIndex, currentIdx ,btNum ) 
( 
 currentIdx = _BUTTONGROUP_getCurrentButtonIndex (BUTTONGROUP_ID); 
 buttonArray = _BUTTONGROUP_getChildButtonArray(BUTTONGROUP_ID); 
 btNum = ARRAY_getBufferSize(buttonArray); 
 newIndex = currentIdx +stepNum; 
 (newIndex >= btNum )? ( newIndex = 0); 
 (newIndex < 0 )? ( newIndex = btNum-1); 
 BUTTONGROUP_setCurrentButtonComponentByIndex(BUTTONGROUP_ID,newIndex); 
 slider( COMPONENT_getSliderIndex(BUTTONGROUP_ID) ) 
 = _BUTTONGROUP_getCurrentButtonIndex (BUTTONGROUP_ID);; 
); 
function BUTTONGROUP_resized(BUTTONGROUP_ID,parrentRECT ) 
 local (buttonArray,count_A,oneBtWidth,oneBtHeight,buttonNum,bt ) 
( 
 buttonArray = _BUTTONGROUP_getChildButtonArray(BUTTONGROUP_ID); 
 buttonNum = ARRAY_getBufferSize(buttonArray); 
 oneBtWidth = RECTANGLE_getWidth(BUTTONGROUP_ID)/buttonNum; 
 oneBtHeight = RECTANGLE_getHeight(BUTTONGROUP_ID); 
 count_A = 0; 
 while ( count_A < ARRAY_getBufferSize(buttonArray) ) 
 ( 
 bt = ARRAY_getAt(buttonArray,count_A); 
 RECTANGLE_setX(bt,RECTANGLE_getX(BUTTONGROUP_ID) + oneBtWidth*count_A ); 
 RECTANGLE_setY(bt,RECTANGLE_getY(BUTTONGROUP_ID) ); 
 RECTANGLE_setWidth (bt,oneBtWidth ); 
 RECTANGLE_setHeight(bt,oneBtHeight ); 
 RECTANGLE_reduce( bt,1,1); 
 count_A +=1; 
 ); 
 _BUTTONGROUP_setNeedResized(BUTTONGROUP_ID,true); 
); 
function BUTTONGROUP_update(BUTTONGROUP_ID) 
 local (buttonArray,count_A,targetBtComp,bt) 
( 
 COMPONENT_update( BUTTONGROUP_ID); 
 ( _BUTTONGROUP_getNeedResized(BUTTONGROUP_ID) ==true 
 && RECTANGLE_getWidth (BUTTONGROUP_ID ) != 0 
 && RECTANGLE_getHeight(BUTTONGROUP_ID ) != 0 
 || COMPONENT_isParrentLayerResized( BUTTONGROUP_ID) ==true 
 )? 
 ( 
 BUTTONGROUP_resized( BUTTONGROUP_ID 
 , COMPONENT_getParrentLAYRE(BUTTONGROUP_ID)); 
 _BUTTONGROUP_setNeedResized(BUTTONGROUP_ID,false); 
 ); 
 buttonArray = _BUTTONGROUP_getChildButtonArray(BUTTONGROUP_ID); 
 count_A = 0; 
 while ( count_A < ARRAY_getBufferSize(buttonArray) ) 
 ( 
 bt = ARRAY_getAt(buttonArray,count_A); 
 BUTTON_update( bt ); 
 ( BUTTON_isON( bt ) ==true 
 && _BUTTONGROUP_getCurrentButtonIndex (BUTTONGROUP_ID) != count_A ) ? 
 ( 
 BUTTONGROUP_setCurrentButtonComponentByComponent(BUTTONGROUP_ID,bt); 
 slider( COMPONENT_getSliderIndex(BUTTONGROUP_ID) ) 
 = _BUTTONGROUP_getCurrentButtonIndex (BUTTONGROUP_ID);; 
 slider_automate(2 ^ COMPONENT_getSliderIndex(BUTTONGROUP_ID) -1 ); 
 ); 
 count_A +=1; 
 ); 
 _BUTTONGROUP_setIsCurrentIndexChanged( BUTTONGROUP_ID 
 , _BUTTONGROUP_getLastIndex( BUTTONGROUP_ID)!= _BUTTONGROUP_getCurrentButtonIndex(BUTTONGROUP_ID) 
 ); 
 _BUTTONGROUP_setLastIndex( BUTTONGROUP_ID 
 , _BUTTONGROUP_getCurrentButtonIndex(BUTTONGROUP_ID)); 
); 
function BUTTONGROUP_draw(BUTTONGROUP_ID) 
 local (buttonArray,count_A) 
( 
 buttonArray = _BUTTONGROUP_getChildButtonArray(BUTTONGROUP_ID); 
 count_A = 0; 
 while ( count_A < ARRAY_getBufferSize(buttonArray) ) 
 ( 
 BUTTON_draw( ARRAY_getAt(buttonArray,count_A)); 
 count_A +=1; 
 ); 
); 
function BUTTONGROUP_mouseMoved(BUTTONGROUP_ID,MOUSEINFO_ID) 
 local (buttonArray,count_A) 
( 
 buttonArray = _BUTTONGROUP_getChildButtonArray(BUTTONGROUP_ID); 
 count_A = 0; 
 while ( count_A < ARRAY_getBufferSize(buttonArray) ) 
 ( 
 BUTTON_mouseMoved( ARRAY_getAt(buttonArray,count_A) 
 , MOUSEINFO_ID); 
 count_A +=1; 
 ); 
); 
function BUTTONGROUP_mouseButtonPressd(BUTTONGROUP_ID,MOUSEINFO_ID ) 
 local (buttonArray,count_A) 
( 
 buttonArray = _BUTTONGROUP_getChildButtonArray(BUTTONGROUP_ID); 
 count_A = 0; 
 while ( count_A < ARRAY_getBufferSize(buttonArray) ) 
 ( 
 ( BUTTON_isOFF( ARRAY_getAt(buttonArray,count_A)) ==true )? 
 ( 
 BUTTON_mouseButtonPressd( ARRAY_getAt(buttonArray,count_A) 
 , MOUSEINFO_ID); 
 ); 
 (RECTANGLE_isContainMouse(BUTTONGROUP_ID) == true) ? 
 ( 
 slider_automate(2 ^ COMPONENT_getSliderIndex(BUTTONGROUP_ID) -1 ); 
 SetLastMousePressdComponent(BUTTONGROUP_ID); 
 ); 
 count_A +=1; 
 ); 
); 
function BUTTONGROUP_mouseButtonReleased( BUTTONGROUP_ID,MOUSEINFO_ID ) 
 local (buttonArray,count_A) 
( 
 buttonArray = _BUTTONGROUP_getChildButtonArray(BUTTONGROUP_ID); 
 count_A = 0; 
 while ( count_A < ARRAY_getBufferSize(buttonArray) ) 
 ( 
 ( BUTTON_isOFF( ARRAY_getAt(buttonArray,count_A)) ==true )? 
 ( 
 BUTTON_mouseButtonReleased( ARRAY_getAt(buttonArray,count_A) 
 , MOUSEINFO_ID); 
 ); 
 ( RECTANGLE_isContainMouse(BUTTONGROUP_ID) == true 
 && RECTANGLE_isContainMouse(ARRAY_getAt(buttonArray,count_A)) == true 
 ) ? 
 ( 
 _BUTTONGROUP_setLastIndex( BUTTONGROUP_ID 
 , _BUTTONGROUP_getCurrentButtonIndex(BUTTONGROUP_ID)); 
 BUTTONGROUP_setCurrentButtonComponentByIndex(BUTTONGROUP_ID,count_A); 
 slider_automate(2 ^ COMPONENT_getSliderIndex(BUTTONGROUP_ID) -1 ); 
 SetLastMouseReleasedComponent(BUTTONGROUP_ID); 
 ); 
 count_A +=1; 
 ); 
); 
function BUTTONGROUP_mouseWheeled(BUTTONGROUP_ID,MOUSEINFO_ID ) 
 local (buttonArray,count_A) 
( 
 buttonArray = _BUTTONGROUP_getChildButtonArray(BUTTONGROUP_ID); 
 count_A = 0; 
 while ( count_A < ARRAY_getBufferSize(buttonArray) ) 
 ( 
 BUTTON_mouseWheeled( ARRAY_getAt(buttonArray,count_A) 
 , MOUSEINFO_ID); 
 count_A +=1; 
 ); 
 (RECTANGLE_isContainMouse(BUTTONGROUP_ID) == true) ? 
 ( 
 BUTTONGROUP_stepCurrentButtonIndex( BUTTONGROUP_ID 
 , MOUSEINFO_getMouseWheelDiffV_ABS (MOUSEINFO_ID) ); 
 slider_automate(2 ^ COMPONENT_getSliderIndex(BUTTONGROUP_ID) -1 ); 
 SetLastMouseWheeledComponent(BUTTONGROUP_ID); 
 ); 
); 
function BUTTONGROUP_addButton(BUTTONGROUP_ID,buttonComponent) 
 local (buttonArray,count_A,check_) 
( 
 buttonArray = _BUTTONGROUP_getChildButtonArray(BUTTONGROUP_ID); 
 count_A = 0; 
 check_ = false; 
 while ( count_A < ARRAY_getBufferSize(buttonArray) ) 
 ( 
 ( ARRAY_getAt(buttonArray,count_A) == buttonComponent)? 
 ( 
 check_ =true; 
 count_A = ARRAY_getBufferSize(buttonArray) +10; 
 ); 
 count_A +=1; 
 ); 
 (check_ == false)? 
 ( 
 ARRAY_push_back( buttonArray ,buttonComponent); 
 BUTTONGROUP_resized(BUTTONGROUP_ID,COMPONENT_getParrentLAYRE(BUTTONGROUP_ID)); 
 (ARRAY_getBufferSize(buttonArray) ==1)? 
 ( 
 BUTTONGROUP_setCurrentButtonComponentByComponent(BUTTONGROUP_ID,buttonComponent); 
 ); 
 ); 
 _BUTTONGROUP_setNeedResized(BUTTONGROUP_ID,true); 
); 
function BUTTONGROUP_removeButton(BUTTONGROUP_ID,buttonComponent) 
 local (buttonArray,count_A) 
( 
 buttonArray = _BUTTONGROUP_getChildButtonArray(BUTTONGROUP_ID); 
 count_A = 0; 
 check_ = false; 
 while ( count_A < ARRAY_getBufferSize(buttonArray) ) 
 ( 
 ( ARRAY_getAt(buttonArray,count_A) == buttonComponent)? 
 ( 
 ARRAY_removeAt(buttonArray,count_A); 
 BUTTONGROUP_resized(BUTTONGROUP_ID,COMPONENT_getParrentLAYRE(BUTTONGROUP_ID)); 
 count_A = ARRAY_getBufferSize(buttonArray) +10; 
 ); 
 count_A +=1; 
 ); 
 ( ARRAY_getBufferSize(buttonArray) < _BUTTONGROUP_getCurrentButtonIndex (BUTTONGROUP_ID) )? 
 ( 
 _BUTTONGROUP_setCurrentButtonIndex ( BUTTONGROUP_ID 
 , ARRAY_getBufferSize(buttonArray)); 
 ); 
 _BUTTONGROUP_setNeedResized(BUTTONGROUP_ID,true); 
); 
function SLIDER_create(name) 
local (SLIDER_ID,circle_Area_ID,baseClassElementNum ) 
( 
 circle_Area_ID = CIRCLE_create(0,0,10); 
 SLIDER_ID = COMPONENT_create(name); 
 baseClassElementNum = _COMPONENT_getElementNum(SLIDER_ID); 
 STATIC_MASTER_BUFF[SLIDER_ID ] = "SLIDER"; 
 STATIC_MASTER_BUFF[SLIDER_ID + 1] = baseClassElementNum + 3; 
 STATIC_MASTER_BUFF[SLIDER_ID + baseClassElementNum + 1] = circle_Area_ID; 
 STATIC_MASTER_BUFF[SLIDER_ID + baseClassElementNum + 2] = false; 
 STATIC_MASTER_BUFF[SLIDER_ID + baseClassElementNum + 3] = STATIC_MASTER_BUFF[SLIDER_ID + 1]; 
 STATIC_MASTER_BUFF_ID += STRUCT_getElementNum (SLIDER_ID)+1; 
 MAP_setValue( COMPONENT_getColorMap(SLIDER_ID) 
 ,"background_mouseon" 
 , COLOR_create(0,1,1,1)); 
 SLIDER_ID; 
); 
function _SLIDER_getElementNum(SLIDER_ID) ( STATIC_MASTER_BUFF[SLIDER_ID+_COMPONENT_getElementNum(SLIDER_ID)+3];); 
function SLIDER_getCircleArea(SLIDER_ID) ( STATIC_MASTER_BUFF[SLIDER_ID+_COMPONENT_getElementNum(SLIDER_ID)+1];); 
function SLIDER_isCircleAreaPressed(SLIDER_ID) ( STATIC_MASTER_BUFF[SLIDER_ID+_COMPONENT_getElementNum(SLIDER_ID)+2];); 
function _SLIDER_setIsCircleAreaPressed(SLIDER_ID,v) ( STATIC_MASTER_BUFF[SLIDER_ID+_COMPONENT_getElementNum(SLIDER_ID)+2] =v;); 
function _SLIDER_getMeterWidth(SLIDER_ID)local (circle_Pointer_ID,x,y,w,h,radius,out) 
( 
 x = RECTANGLE_getX(SLIDER_ID); 
 y = RECTANGLE_getY(SLIDER_ID); 
 w = RECTANGLE_getWidth(SLIDER_ID); 
 h = RECTANGLE_getHeight(SLIDER_ID); 
 circle_Pointer_ID = SLIDER_getCircleArea(SLIDER_ID); 
 radius = CIRCLE_getRadius(circle_Pointer_ID); 
 out = w -radius*2; 
); 
function _SLIDER_positionToValue(SLIDER_ID,x_,y_) local (out,meterWidth,x,radius) 
( 
 meterWidth = _SLIDER_getMeterWidth(SLIDER_ID); 
 x = RECTANGLE_getX(SLIDER_ID); 
 out = max( 0,min( (x_-x)/(meterWidth) ,1)); 
); 
function SLIDER_update(SLIDER_ID) 
( 
 COMPONENT_update( SLIDER_ID); 
); 
function SLIDER_resized(SLIDER_ID,parrentRECT ) 
( 
 0; 
); 
function SLIDER_draw(SLIDER_ID)local (radius,lineH,x,y,w,h,circle_Area_ID) 
( 
 x = RECTANGLE_getX(SLIDER_ID); 
 y = RECTANGLE_getY(SLIDER_ID); 
 w = RECTANGLE_getWidth(SLIDER_ID); 
 h = RECTANGLE_getHeight(SLIDER_ID); 
 radius = 10; 
 lineH = 1; 
 ( RECTANGLE_isContainMouse(SLIDER_ID) ==true) ? 
 ( 
 COMPONENT_changeColorGfx( SLIDER_ID,"background_mouseon"); 
 gfx_rect( x, y, w, h,true); 
 ); 
 gfx_r =0.3;gfx_g =0.3;gfx_b =0.3; gfx_a =1; 
 gfx_rect( x -2 +radius 
 , y+h/2 -lineH/2-2 
 , w+4 -radius*2 
 , lineH+4,true); 
 gfx_r =0.8;gfx_g =0.8;gfx_b =0.8; gfx_a =1; 
 gfx_rect( x +radius 
 , y+h/2 -lineH/2 
 , w -radius*2 
 , lineH,true); 
 circle_Area_ID = SLIDER_getCircleArea(SLIDER_ID); 
 CIRCLE_setCX(circle_Area_ID,(x+radius+4)+ (w-radius*2 -8)*COMPONENT_getValue(SLIDER_ID) ); 
 CIRCLE_setCY(circle_Area_ID,y+h/2); 
 CIRCLE_setRadius(circle_Area_ID,radius); 
 ( SLIDER_isCircleAreaPressed(SLIDER_ID) ==true 
 || CIRCLE_isContainMouse( circle_Area_ID ) == true 
 ) ? 
 ( 
 gfx_r =1;gfx_g =0;gfx_b =0;gfx_a =1; 
 ):( 
 gfx_r =1;gfx_g =1;gfx_b =1;gfx_a =1; 
 ); 
 gfx_circle( (x+radius+4)+ (w-radius*2 -8)*COMPONENT_getValue(SLIDER_ID) 
 , y+h/2 
 , radius ,true); 
); 
function SLIDER_mouseMoved(SLIDER_ID,MOUSEINFO_ID)local(XXX) 
( 
 ( RECTANGLE_isContainMouse(SLIDER_ID) ==true) ? 
 ( 
 DBG(" SLIDER Mouse Moved"); 
 ); 
 ( COMPONENT_isMousePressStartedInThisComp(SLIDER_ID) ==true 
 && SLIDER_isCircleAreaPressed(SLIDER_ID) ==false 
 && COMPONENT_isParrentLayerResized( SLIDER_ID) ==false 
 )? 
 ( 
 RECTANGLE_setX( SLIDER_ID 
 , RECTANGLE_getX(SLIDER_ID) 
 + MOUSEINFO_getMouseXDiff(MOUSEINFO_ID) ); 
 RECTANGLE_setY( SLIDER_ID 
 , RECTANGLE_getY(SLIDER_ID) 
 + MOUSEINFO_getMouseYDiff(MOUSEINFO_ID) ); 
 ); 
 ( SLIDER_isCircleAreaPressed(SLIDER_ID) ==true )? 
 ( 
 XXX = _SLIDER_positionToValue( SLIDER_ID 
 , MOUSEINFO_getMouseX(MOUSEINFO_ID) 
 , MOUSEINFO_getMouseY(MOUSEINFO_ID)); 
 COMPONENT_setValue(SLIDER_ID,XXX,true); 
 ); 
); 
function SLIDER_mouseButtonPressd(SLIDER_ID,MOUSEINFO_ID )local(circle_Area_ID) 
( 
 ( RECTANGLE_isContainMouse(SLIDER_ID) ==true) ? 
 ( 
 SetLastMousePressdComponent(SLIDER_ID); 
 DBG(" SLIDER Mouse Button Press IN"); 
 COMPONENT_setIsMousePressStartedInThisComp(SLIDER_ID,true); 
 ):( 
 COMPONENT_setIsMousePressStartedInThisComp(SLIDER_ID,false); 
 ); 
 circle_Area_ID = SLIDER_getCircleArea(SLIDER_ID); 
 ( CIRCLE_isContainMouse(circle_Area_ID) == true)? 
 ( 
 DBG(" SLIDER Mouse Button Press IN Circle"); 
 _SLIDER_setIsCircleAreaPressed(SLIDER_ID,true); 
 ); 
); 
function SLIDER_mouseButtonReleased( SLIDER_ID,MOUSEINFO_ID )local (tempstr) 
( 
 ( RECTANGLE_isContainMouse(SLIDER_ID) ==true) ? 
 ( 
 DBG(" SLIDER Mouse Button Released"); 
 SetLastMouseReleasedComponent(SLIDER_ID); 
 ); 
 _SLIDER_setIsCircleAreaPressed(SLIDER_ID,false); 
); 
function SLIDER_mouseWheeled(SLIDER_ID,MOUSEINFO_ID ) 
( 
 ( RECTANGLE_isContainMouse(SLIDER_ID) ==true) ? 
 ( 
 DBG(" SLIDER Mouse Wheeld"); 
 COMPONENT_setValue( SLIDER_ID 
 , COMPONENT_getValue(SLIDER_ID) 
 + MOUSEINFO_getMouseWheelDiffV_ABS(MOUSEINFO_ID)/30 
 , true); 
 SetLastMouseWheeledComponent(SLIDER_ID); 
 ); 
); 
SLIDERTYPE2_TEXT_TYPE_RAW = "RAW"; 
SLIDERTYPE2_TEXT_TYPE_PER = "PERCENT"; 
SLIDERTYPE2_TEXT_TYPE_DB = "DB"; 
SLIDERTYPE2_TEXT_TYPE_PAN = "PAN"; 
function SLIDERTYPE2_create(name) 
 local (SLIDERTYPE2_ID,circle_Area_ID,baseClassElementNum) 
( 
 SLIDERTYPE2_ID = COMPONENT_create(name); 
 baseClassElementNum =_COMPONENT_getElementNum(SLIDERTYPE2_ID); 
 STATIC_MASTER_BUFF[SLIDERTYPE2_ID ] = "SLIDERTYPE2"; 
 STATIC_MASTER_BUFF[SLIDERTYPE2_ID + 1] = baseClassElementNum + 5; 
 STATIC_MASTER_BUFF[SLIDERTYPE2_ID + baseClassElementNum + 1] = 0; 
 STATIC_MASTER_BUFF[SLIDERTYPE2_ID + baseClassElementNum + 2] = 0; 
 STATIC_MASTER_BUFF[SLIDERTYPE2_ID + baseClassElementNum + 3] = 0; 
 STATIC_MASTER_BUFF[SLIDERTYPE2_ID + baseClassElementNum + 4] = STATIC_MASTER_BUFF[SLIDERTYPE2_ID + 1] ; 
 STATIC_MASTER_BUFF[SLIDERTYPE2_ID + baseClassElementNum + 5] = SLIDERTYPE2_TEXT_TYPE_RAW; 
 STATIC_MASTER_BUFF_ID += STRUCT_getElementNum (SLIDERTYPE2_ID)+1; 
 MAP_setValue( COMPONENT_getColorMap(SLIDERTYPE2_ID) 
 ,"bakcground_mouseon" 
 , COLOR_create(0,1,1,1)); 
 MAP_setValue( COMPONENT_getColorMap(SLIDERTYPE2_ID) 
 ,"bakcground" 
 , COLOR_create(1,1,1,1)); 
 SLIDERTYPE2_ID; 
); 
function _SLIDERTYPE2_getElementNum(SLIDERTYPE2_ID) ( STATIC_MASTER_BUFF[SLIDERTYPE2_ID + _COMPONENT_getElementNum(SLIDERTYPE2_ID)+ 4];); 
function SLIDERTYPE2_getParameterDrawType(SLIDERTYPE2_ID) ( STATIC_MASTER_BUFF[SLIDERTYPE2_ID + _COMPONENT_getElementNum(SLIDERTYPE2_ID)+ 5];); 
function SLIDERTYPE2_setParameterDrawType(SLIDERTYPE2_ID,v) ( STATIC_MASTER_BUFF[SLIDERTYPE2_ID + _COMPONENT_getElementNum(SLIDERTYPE2_ID)+ 5] = v;); 
function SLIDERTYPE2_getValueViaParameterDrawType(SLIDERTYPE2_ID) 
 local (parameterType,outText,tempvalue,tempvalue2,countB) 
( 
 outText = #; 
 parameterType = SLIDERTYPE2_getParameterDrawType(SLIDERTYPE2_ID); 
 ( parameterType == SLIDERTYPE2_TEXT_TYPE_RAW)? 
 ( 
 sprintf( outText ,"%f",COMPONENT_getValue( SLIDERTYPE2_ID)); 
 ):( parameterType == SLIDERTYPE2_TEXT_TYPE_PER)? 
 ( 
 sprintf( outText ,"%.2f%%",COMPONENT_getValue( SLIDERTYPE2_ID)*100); 
 countB = strlen (outText); 
 while( countB <= 7)? 
 ( 
 strcat (outText," "); 
 countB = strlen (outText); 
 ); 
 ):( parameterType == SLIDERTYPE2_TEXT_TYPE_DB)? 
 ( 
 sprintf( outText ,"%+.2fdB",valueToDecivel( COMPONENT_getValue( SLIDERTYPE2_ID)) ); 
 ):( parameterType == SLIDERTYPE2_TEXT_TYPE_PAN)? 
 ( 
 tempvalue = COMPONENT_getValue( SLIDERTYPE2_ID); 
 (tempvalue == 0.0)? 
 ( 
 sprintf( outText ," L 100.00%%"); 
 ):(tempvalue == 0.5)? 
 ( 
 sprintf( outText ," Centor "); 
 ):(tempvalue == 1.0)? 
 ( 
 sprintf( outText ," R 100.00%%"); 
 ):(tempvalue < 0.5)? 
 ( 
 tempvalue2 = abs( (tempvalue-0.5)/0.5 ); 
 sprintf( outText ," L %2.2f%%",tempvalue2*100); 
 ):(tempvalue > 0.5)? 
 ( 
 tempvalue2 = abs( (tempvalue-0.5)/0.5 ); 
 sprintf( outText ," R %2.2f%%",tempvalue2*100); 
 ); 
 ); 
 outText; 
); 
function _SLIDERTYPE2_getInnerMargin(SLIDERTYPE2_ID) local (out) 
( 
 out = min ( RECTANGLE_getWidth(SLIDERTYPE2_ID),RECTANGLE_getHeight(SLIDERTYPE2_ID)) *0.1; 
 out =floor( min(max(out,2),5) ); 
 ( out % 2 == 0 )? ( out +=1 ;); 
 out; 
); 
function _SLIDERTYPE2_getMeterWidth(SLIDERTYPE2_ID)local (out,margin) 
( 
 margin = _SLIDERTYPE2_getInnerMargin(SLIDERTYPE2_ID); 
 out = RECTANGLE_getWidth(SLIDERTYPE2_ID) -margin*2; 
); 
function _SLIDERTYPE2_positionToValue(SLIDERTYPE2_ID,x_,y_) local (out,meterWidth,x) 
( 
 meterWidth = _SLIDER_getMeterWidth(SLIDERTYPE2_ID); 
 x = RECTANGLE_getX(SLIDERTYPE2_ID); 
 out = max( 0,min( (x_-x)/(meterWidth) ,1)); 
); 
function SLIDERTYPE2_update(SLIDERTYPE2_ID) 
( 
 COMPONENT_setLastValue( SLIDERTYPE2_ID 
 , COMPONENT_getValue( SLIDERTYPE2_ID)); 
); 
function SLIDERTYPE2_resized(SLIDERTYPE2_ID,parrentRECT ) 
( 
 0; 
); 
function SLIDERTYPE2_draw(SLIDERTYPE2_ID)local (x,y,w,h,margin,tempText) 
( 
 margin = _SLIDERTYPE2_getInnerMargin(SLIDERTYPE2_ID); 
 x = RECTANGLE_getX(SLIDERTYPE2_ID); 
 y = RECTANGLE_getY(SLIDERTYPE2_ID); 
 w = RECTANGLE_getWidth(SLIDERTYPE2_ID); 
 h = RECTANGLE_getHeight(SLIDERTYPE2_ID); 
 ( RECTANGLE_isContainMouse(SLIDERTYPE2_ID) ==true) ? 
 ( 
 COMPONENT_changeColorGfx( SLIDERTYPE2_ID,"bakcground_mouseon"); 
 ):( 
 COMPONENT_changeColorGfx( SLIDERTYPE2_ID,"bakcground"); 
 ); 
 gfx_rect( x, y, w, h,true); 
 COMPONENT_changeColorGfx( SLIDERTYPE2_ID,"red"); 
 gfx_rect( x+margin 
 , y+margin 
 , ( w-margin*2 ) * COMPONENT_getValue(SLIDERTYPE2_ID) 
 , h-margin*2 
 , true); 
 tempText = SLIDERTYPE2_getValueViaParameterDrawType(SLIDERTYPE2_ID); 
 COMPONENT_changeColorGfx( SLIDERTYPE2_ID,"black"); 
 RECTANGLE_drawStrInCenterFitFont(SLIDERTYPE2_ID,tempText); 
 RECTANGLE_drawBottomRightText2 (SLIDERTYPE2_ID ,COMPONENT_getName(SLIDERTYPE2_ID)); 
); 
function SLIDERTYPE2_mouseMoved(SLIDERTYPE2_ID,MOUSEINFO_ID)local(XXX) 
( 
 ( RECTANGLE_isContainMouse(SLIDERTYPE2_ID) ==true) ? 
 ( 
 DBG(" SLIDER Mouse Moved"); 
 ); 
 ( COMPONENT_isMousePressStartedInThisComp(SLIDERTYPE2_ID) ==true )? 
 ( 
 XXX = _SLIDERTYPE2_positionToValue( SLIDERTYPE2_ID 
 , MOUSEINFO_getMouseX(MOUSEINFO_ID) 
 , MOUSEINFO_getMouseY(MOUSEINFO_ID)); 
 COMPONENT_setValue(SLIDERTYPE2_ID, XXX,true); 
 ); 
); 
function SLIDERTYPE2_mouseButtonPressd(SLIDERTYPE2_ID,MOUSEINFO_ID )local(circle_Area_ID) 
( 
 ( RECTANGLE_isContainMouse(SLIDERTYPE2_ID) ==true) ? 
 ( 
 DBG(" SLIDER Mouse Button Press IN"); 
 SetLastMousePressdComponent(SLIDERTYPE2_ID); 
 COMPONENT_setIsMousePressStartedInThisComp(SLIDERTYPE2_ID,true); 
 ):( 
 COMPONENT_setIsMousePressStartedInThisComp(SLIDERTYPE2_ID,false); 
 ); 
); 
function SLIDERTYPE2_mouseButtonReleased( SLIDERTYPE2_ID,MOUSEINFO_ID )local (tempstr) 
( 
 ( RECTANGLE_isContainMouse(SLIDERTYPE2_ID) ==true) ? 
 ( 
 DBG(" SLIDER Mouse Button Released"); 
 SetLastMouseReleasedComponent(SLIDERTYPE2_ID); 
 ); 
); 
function SLIDERTYPE2_mouseWheeled(SLIDERTYPE2_ID,MOUSEINFO_ID ) 
( 
 ( RECTANGLE_isContainMouse(SLIDERTYPE2_ID) ==true) ? 
 ( 
 DBG(" SLIDER Mouse Wheeld"); 
 COMPONENT_setValue( SLIDERTYPE2_ID 
 , COMPONENT_getValue(SLIDERTYPE2_ID) 
 + MOUSEINFO_getMouseWheelDiffV_ABS(MOUSEINFO_ID)/30 
 ,true 
 ); 
 SetLastMouseWheeledComponent(SLIDERTYPE2_ID); 
 ); 
); 
function TEXT_create(name) 
 local (TEXT_ID,baseClassElementNum) 
( 
 TEXT_ID = COMPONENT_create(name); 
 baseClassElementNum =_COMPONENT_getElementNum(TEXT_ID); 
 STATIC_MASTER_BUFF[TEXT_ID ] = "TEXT"; 
 STATIC_MASTER_BUFF[TEXT_ID + 1] = baseClassElementNum + 4; 
 STATIC_MASTER_BUFF[TEXT_ID + baseClassElementNum + 1] = false; 
 STATIC_MASTER_BUFF[TEXT_ID + baseClassElementNum + 2] = ""; 
 STATIC_MASTER_BUFF[TEXT_ID + baseClassElementNum + 3] = ""; 
 STATIC_MASTER_BUFF[TEXT_ID + baseClassElementNum + 4] = STATIC_MASTER_BUFF[TEXT_ID + 1] ; 
 STATIC_MASTER_BUFF_ID += STRUCT_getElementNum (TEXT_ID)+1; 
 MAP_setValue( COMPONENT_getColorMap(TEXT_ID) 
 ,"textColor" 
 , COLOR_create(1,0,0,1)); 
 MAP_setValue( COMPONENT_getColorMap(TEXT_ID) 
 ,"textColor_mouseon" 
 , COLOR_create(1,1,0,1)); 
 TEXT_ID; 
); 
function _TEXT_getElementNum(TEXT_ID) (STATIC_MASTER_BUFF[TEXT_ID + _COMPONENT_getElementNum(TEXT_ID)+ 4];); 
function TEXT_getIsDBValueMode( TEXT_ID) (STATIC_MASTER_BUFF[TEXT_ID + _COMPONENT_getElementNum(TEXT_ID)+ 1]; ); 
function TEXT_setIsDBValueMode( TEXT_ID,b) (STATIC_MASTER_BUFF[TEXT_ID + _COMPONENT_getElementNum(TEXT_ID)+ 1]=b; ); 
function TEXT_IsDBValueMode( TEXT_ID) (TEXT_getIsDBValueMode( TEXT_ID) ); 
function TEXT_getDBValueModeTextPreFix( TEXT_ID) (STATIC_MASTER_BUFF[TEXT_ID + _COMPONENT_getElementNum(TEXT_ID)+ 2]; ); 
function TEXT_setDBValueModeTextPreFix( TEXT_ID,s) (STATIC_MASTER_BUFF[TEXT_ID + _COMPONENT_getElementNum(TEXT_ID)+ 2]=s; ); 
function TEXT_getDBValueModeTextPostFix( TEXT_ID) (STATIC_MASTER_BUFF[TEXT_ID + _COMPONENT_getElementNum(TEXT_ID)+ 3]; ); 
function TEXT_setDBValueModeTextPostFix( TEXT_ID,s) (STATIC_MASTER_BUFF[TEXT_ID + _COMPONENT_getElementNum(TEXT_ID)+ 3]=s; ); 
function TEXT_drawDBValueModeText( TEXT_ID)local(tempstr,decibels) 
( 
 tempstr =#; 
 sprintf ( tempStr,"%s %+01.2fdB",TEXT_getDBValueModeTextPreFix(TEXT_ID) 
 ,valueToDecivel( COMPONENT_getValue(TEXT_ID) ) ); 
 strcat ( tempStr,TEXT_getDBValueModeTextPostFix(TEXT_ID) ) ; 
 RECTANGLE_drawStrInCenterFitFont(TEXT_ID,tempStr); 
); 
function TEXT_update(TEXT_ID) 
( 
 COMPONENT_update( TEXT_ID); 
); 
function TEXT_resized(TEXT_ID,parrentRECT ) 
( 
 0; 
); 
function TEXT_draw(TEXT_ID)local (tempText) 
( 
 ( RECTANGLE_isContainMouse(TEXT_ID) ==true) ? 
 ( 
 COMPONENT_changeColorGfx( TEXT_ID,"textColor_mouseon"); 
 ):( 
 COMPONENT_changeColorGfx( TEXT_ID,"textColor"); 
 ); 
 ( TEXT_IsDBValueMode( TEXT_ID) ==true)? 
 ( 
 TEXT_drawDBValueModeText( TEXT_ID); 
 ):( 
 RECTANGLE_drawStrInCenterFitFont(TEXT_ID,COMPONENT_getName(TEXT_ID)); 
 ); 
); 
function TEXT_mouseMoved(TEXT_ID,MOUSEINFO_ID) 
( 
 ( RECTANGLE_isContainMouse(TEXT_ID) ==true) ? 
 ( 
 DBG(" TEXT Mouse Moved"); 
 ); 
); 
function TEXT_mouseButtonPressd(TEXT_ID,MOUSEINFO_ID )local(circle_Area_ID) 
( 
 ( RECTANGLE_isContainMouse(TEXT_ID) ==true) ? 
 ( 
 DBG(" TEXT Mouse Button Press IN"); 
 SetLastMousePressdComponent(TEXT_ID); 
 COMPONENT_setIsMousePressStartedInThisComp(TEXT_ID,true); 
 ; 
 ):( 
 COMPONENT_setIsMousePressStartedInThisComp(TEXT_ID,false); 
 ); 
); 
function TEXT_mouseButtonReleased( TEXT_ID,MOUSEINFO_ID )local (tempstr) 
( 
 ( RECTANGLE_isContainMouse(TEXT_ID) ==true) ? 
 ( 
 DBG(" TEXT Mouse Button Released"); 
 SetLastMouseReleasedComponent(TEXT_ID); 
 ); 
); 
function TEXT_mouseWheeled(TEXT_ID,MOUSEINFO_ID ) 
( 
 ( RECTANGLE_isContainMouse(TEXT_ID) ==true) ? 
 ( 
 DBG(" TEXT Mouse Wheeld"); 
 SetLastMouseWheeledComponent(TEXT_ID); 
 ); 
); 
function KNOB_create(name) 
 local (KNOB_ID,textArea_Rect,baseClassElementNum) 
( 
 textArea_Rect =RECTANGLE_create(0,0,0,0); 
 KNOB_ID = COMPONENT_create(name); 
 baseClassElementNum =_COMPONENT_getElementNum(KNOB_ID); 
 STATIC_MASTER_BUFF[KNOB_ID ] = "KNOB"; 
 STATIC_MASTER_BUFF[KNOB_ID + 1] = baseClassElementNum+ 3; 
 STATIC_MASTER_BUFF[KNOB_ID + baseClassElementNum + 1] = textArea_Rect; 
 STATIC_MASTER_BUFF[KNOB_ID + baseClassElementNum + 2] = STATIC_MASTER_BUFF[KNOB_ID + 1]; 
 STATIC_MASTER_BUFF[KNOB_ID + baseClassElementNum + 3] = false; 
 STATIC_MASTER_BUFF_ID += STRUCT_getElementNum (KNOB_ID)+1; 
 MAP_setValue( COMPONENT_getColorMap(KNOB_ID) 
 ,"bakcground_mouseon" 
 , COLOR_create(0,1,1,1)); 
 MAP_setValue( COMPONENT_getColorMap(KNOB_ID) 
 ,"bakcground" 
 , COLOR_create(1,1,1,1)); 
 MAP_setValue( COMPONENT_getColorMap(KNOB_ID) 
 ,"textColor" 
 , COLOR_create(0,0,0,1)); 
 MAP_setValue( COMPONENT_getColorMap(KNOB_ID ) 
 ,"textColor_mouseon" 
 , COLOR_create(1,1,0,1)); 
 KNOB_ID; 
); 
function _KNOB_getElementNum(KNOB_ID) (STATIC_MASTER_BUFF[KNOB_ID + _COMPONENT_getElementNum(KNOB_ID)+ 2];); 
function KNOB_getDBTextMode(KNOB_ID) (STATIC_MASTER_BUFF[KNOB_ID + _COMPONENT_getElementNum(KNOB_ID)+ 3];); 
function KNOB_setDBTextMode(KNOB_ID,v) (STATIC_MASTER_BUFF[KNOB_ID + _COMPONENT_getElementNum(KNOB_ID)+ 3]=v;); 
function KNOB_getTextAreaRect(KNOB_ID) (STATIC_MASTER_BUFF[KNOB_ID + _COMPONENT_getElementNum(KNOB_ID)+ 1];); 
function _KNOB_getInnerMargin(KNOB_ID) local (out) 
( 
 out = min ( RECTANGLE_getWidth(KNOB_ID),RECTANGLE_getHeight(KNOB_ID)) *0.1; 
 out =floor( min(max(out,2),5) ); 
 ( out % 2 == 0 )? ( out +=1 ;); 
 out; 
); 
function KNOB_update(KNOB_ID) 
( 
 COMPONENT_update( KNOB_ID); 
); 
function KNOB_resized(KNOB_ID,parrentRECT ) 
( 
 0; 
); 
function KNOB_draw(KNOB_ID)local (x,y,w,h,margin,tempText,radius) 
( 
 margin = _KNOB_getInnerMargin(KNOB_ID); 
 x = RECTANGLE_getX(KNOB_ID) ; y = RECTANGLE_getY(KNOB_ID); 
 w = RECTANGLE_getWidth(KNOB_ID); h = RECTANGLE_getHeight(KNOB_ID); 
 ( RECTANGLE_isContainMouse(KNOB_ID) ==true) ? 
 ( 
 COMPONENT_changeColorGfx( KNOB_ID,"bakcground_mouseon"); 
 ):( 
 COMPONENT_changeColorGfx( KNOB_ID,"bakcground"); 
 ); 
 radius = min(w,h)/2; 
 drawFillArc2( x+w/2 
 , y+h/2 
 , radius 
 , radius*0.6 
 , rad(220) 
 , rad(500) 
 , 64); 
 COMPONENT_changeColorGfx( KNOB_ID,"red"); 
 drawFillArc2( x+w/2 
 , y+h/2 
 , radius +1 
 , radius*0.6 -1 
 , rad(219) 
 , rad(219+ (500-215) * COMPONENT_getValue( KNOB_ID) ) 
 , 64); 
 RECTANGLE_copyTO( KNOB_getTextAreaRect(KNOB_ID),KNOB_ID); 
 COMPONENT_changeColorGfx( KNOB_ID,"black"); 
 RECTANGLE_removeFromTopP(KNOB_getTextAreaRect(KNOB_ID),0.7); 
 RECTANGLE_reduceP(KNOB_getTextAreaRect(KNOB_ID),0.1,0.1); 
 RECTANGLE_drawFill( KNOB_getTextAreaRect(KNOB_ID),true); 
 COMPONENT_changeColorGfx(KNOB_ID,"white"); 
 RECTANGLE_drawStrInCenterFitFont(KNOB_getTextAreaRect(KNOB_ID) 
 ,COMPONENT_getName(KNOB_ID)); 
 ( RECTANGLE_isContainMouse(KNOB_ID) ==true) ? 
 ( 
 COMPONENT_changeColorGfx( KNOB_ID,"textColor_mouseon"); 
 ):( 
 COMPONENT_changeColorGfx( KNOB_ID ,"textColor"); 
 ); 
 tempText =#; 
 ( KNOB_getDBTextMode(KNOB_ID) ==true )? 
 ( 
 sprintf(tempText,"%+2.2fdB",valueToDecivel( COMPONENT_getParameteredValue(KNOB_ID) ));; 
 ): 
 ( 
 sprintf(tempText,"%2.2f",COMPONENT_getParameteredValue(KNOB_ID)); 
 ); 
 RECTANGLE_drawStrInCenterFitFont(KNOB_ID,tempText); 
); 
function KNOB_mouseMoved(KNOB_ID,MOUSEINFO_ID)local(XXX) 
( 
 ( RECTANGLE_isContainMouse(KNOB_ID) ==true) ? 
 ( 
 DBG(" SLIDER Mouse Moved"); 
 ); 
 ( COMPONENT_isMousePressStartedInThisComp(KNOB_ID) ==true )? 
 ( 
 COMPONENT_setValue( KNOB_ID 
 , COMPONENT_getValue(KNOB_ID) 
 + MOUSEINFO_getMouseXDiff(MOUSEINFO_ID)/400 
 + MOUSEINFO_getMouseYDiff(MOUSEINFO_ID)/400*-1 
 , true 
 ); 
 ); 
); 
function KNOB_mouseButtonPressd(KNOB_ID,MOUSEINFO_ID )local(circle_Area_ID) 
( 
 ( RECTANGLE_isContainMouse(KNOB_ID) ==true) ? 
 ( 
 SetLastMousePressdComponent(KNOB_ID); 
 DBG(" KNOB Mouse Button Press IN"); 
 COMPONENT_setIsMousePressStartedInThisComp(KNOB_ID,true); 
 ):( 
 COMPONENT_setIsMousePressStartedInThisComp(KNOB_ID,false); 
 ); 
); 
function KNOB_mouseButtonReleased( KNOB_ID,MOUSEINFO_ID )local (tempstr) 
( 
 ( RECTANGLE_isContainMouse(KNOB_ID) ==true) ? 
 ( 
 DBG(" KNOB Mouse Button Released"); 
 SetLastMouseReleasedComponent(KNOB_ID); 
 ); 
); 
function KNOB_mouseWheeled(KNOB_ID,MOUSEINFO_ID ) 
( 
 ( RECTANGLE_isContainMouse(KNOB_ID) ==true) ? 
 ( 
 DBG(" KNOB Mouse Wheeld"); 
 COMPONENT_setValue( KNOB_ID 
 , COMPONENT_getValue(KNOB_ID) 
 + MOUSEINFO_getMouseWheelDiffV_ABS(MOUSEINFO_ID)/30 
 , true 
 ); 
 SetLastMouseWheeledComponent(KNOB_ID); 
 ); 
); 
DEFINE_XYSLIDER_DISTANCE_DRAWMODE_NONE = 0; 
DEFINE_XYSLIDER_DISTANCE_DRAWMODE_CENTER = 1; 
DEFINE_XYSLIDER_DISTANCE_DRAWMODE_CENTER_ANGLE = 2; 
function XYSLIDER_create(name) 
 local (XYSLIDER_ID,circle_Area_ID,baseClassElementNum) 
( 
 circle_Area_ID = CIRCLE_create(0,0,10); 
 XYSLIDER_ID = COMPONENT_create(name); 
 baseClassElementNum =_COMPONENT_getElementNum(XYSLIDER_ID); 
 STATIC_MASTER_BUFF[XYSLIDER_ID ] = "XYSLIDER"; 
 STATIC_MASTER_BUFF[XYSLIDER_ID + 1] = baseClassElementNum + 20; 
 STATIC_MASTER_BUFF[XYSLIDER_ID + baseClassElementNum + 1] = circle_Area_ID; 
 STATIC_MASTER_BUFF[XYSLIDER_ID + baseClassElementNum + 2] = false; 
 STATIC_MASTER_BUFF[XYSLIDER_ID + baseClassElementNum + 3] = -1; 
 STATIC_MASTER_BUFF[XYSLIDER_ID + baseClassElementNum + 4] = -1; 
 STATIC_MASTER_BUFF[XYSLIDER_ID + baseClassElementNum + 5] = 0.5; 
 STATIC_MASTER_BUFF[XYSLIDER_ID + baseClassElementNum + 6] = 0.5; 
 STATIC_MASTER_BUFF[XYSLIDER_ID + baseClassElementNum + 7] = STATIC_MASTER_BUFF[XYSLIDER_ID + 1] ; 
 STATIC_MASTER_BUFF[XYSLIDER_ID + baseClassElementNum + 8] = 0 ; 
 STATIC_MASTER_BUFF[XYSLIDER_ID + baseClassElementNum + 9] = 0 ; 
 STATIC_MASTER_BUFF[XYSLIDER_ID + baseClassElementNum + 10] = 0 ; 
 STATIC_MASTER_BUFF[XYSLIDER_ID + baseClassElementNum + 11] = DEFINE_XYSLIDER_DISTANCE_DRAWMODE_NONE ; 
 STATIC_MASTER_BUFF[XYSLIDER_ID + baseClassElementNum + 12] = 0 ; 
 STATIC_MASTER_BUFF[XYSLIDER_ID + baseClassElementNum + 13] = false ; 
 STATIC_MASTER_BUFF[XYSLIDER_ID + baseClassElementNum + 14] = false ; 
 STATIC_MASTER_BUFF[XYSLIDER_ID + baseClassElementNum + 15] = 0.1 ; 
 STATIC_MASTER_BUFF[XYSLIDER_ID + baseClassElementNum + 16] = 0.1 ; 
 STATIC_MASTER_BUFF[XYSLIDER_ID + baseClassElementNum + 17] = "x:" ; 
 STATIC_MASTER_BUFF[XYSLIDER_ID + baseClassElementNum + 18] = "y:" ; 
 STATIC_MASTER_BUFF[XYSLIDER_ID + baseClassElementNum + 19] = false ; 
 STATIC_MASTER_BUFF_ID += STRUCT_getElementNum (XYSLIDER_ID)+1; 
 MAP_setValue( COMPONENT_getColorMap(XYSLIDER_ID) 
 ,"background_mouseon" 
 , COLOR_create(0,1,1,1)); 
 XYSLIDER_ID; 
); 
function _XYSLIDER_getElementNum(XYSLIDER_ID) ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 7];); 
function XYSLIDER_getXValue(XYSLIDER_ID) ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 5];); 
function XYSLIDER_getYValue(XYSLIDER_ID) ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 6];); 
function _XYSLIDER_setXValue(XYSLIDER_ID,v) ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 5]=v;); 
function _XYSLIDER_setYValue(XYSLIDER_ID,v) ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 6]=v;); 
function XYSLIDER_getSliderIndexX(XYSLIDER_ID) ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 3];); 
function XYSLIDER_getSliderIndexY(XYSLIDER_ID) ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 4];); 
function XYSLIDER_setSliderIndexX(XYSLIDER_ID,idx)( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 3]=idx;); 
function XYSLIDER_setSliderIndexY(XYSLIDER_ID,idx)( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 4]=idx;); 
function XYSLIDER_getLastValueX(XYSLIDER_ID) ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 8];); 
function XYSLIDER_getLastValueY(XYSLIDER_ID) ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 9];); 
function XYSLIDER_setLastValueX(XYSLIDER_ID,v) ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 8]=v;); 
function XYSLIDER_setLastValueY(XYSLIDER_ID,v) ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 9]=v;); 
function XYSLIDER_getXYDistanceFromCenter ( XYSLIDER_ID) ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 10];); 
function XYSLIDER_setXYDistanceFromCenter ( XYSLIDER_ID,v) ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 10]=v;); 
function XYSLIDER_getXYDistanceDrawMode ( XYSLIDER_ID) ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 11];); 
function XYSLIDER_setXYDistanceDrawMode ( XYSLIDER_ID,v) ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 11]=v;); 
function XYSLIDER_getXYAngleFromCenter ( XYSLIDER_ID) ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 12];); 
function XYSLIDER_setXYAngleFromCenter ( XYSLIDER_ID,v) ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 12]=v;); 
function XYSLIDER_getIsNeedCrossCursolLine ( XYSLIDER_ID) ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 13];); 
function XYSLIDER_setIsNeedCrossCursolLine ( XYSLIDER_ID,v) ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 13]=v;); 
function XYSLIDER_getIsDrawGrid ( XYSLIDER_ID) ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 14];); 
function XYSLIDER_setIsDrawGrid ( XYSLIDER_ID,v) ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 14]=v;); 
function XYSLIDER_getXGridParam ( XYSLIDER_ID) ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 15];); 
function XYSLIDER_setXGridParam ( XYSLIDER_ID,v) ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 15]=v;); 
function XYSLIDER_getYGridParam ( XYSLIDER_ID) ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 16];); 
function XYSLIDER_setYGridParam ( XYSLIDER_ID,v) ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 16]=v;); 
function XYSLIDER_getXGridParamName ( XYSLIDER_ID) ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 17];); 
function XYSLIDER_setXGridParamName ( XYSLIDER_ID,v) ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 17]=v;); 
function XYSLIDER_getYGridParamName ( XYSLIDER_ID) ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 18];); 
function XYSLIDER_setYGridParamName ( XYSLIDER_ID,v) ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 18]=v;); 
function XYSLIDER_getIsUseGridParamerOnMousePt ( XYSLIDER_ID) ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 19];); 
function XYSLIDER_setIsUseGridParamerOnMousePt ( XYSLIDER_ID,v) ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+ 19] = v;); 
function _XYSLIDER_updateXyValueAngleFromCentero(XYSLIDER_ID) 
 local (xx_,yy_ ,angle) 
( 
 xx_ = XYSLIDER_getXValue(XYSLIDER_ID) ; 
 yy_ = XYSLIDER_getYValue(XYSLIDER_ID) ; 
 angle = atan2( 0.5 -yy_ 
 , 0.5 -xx_ ); 
 XYSLIDER_setXYAngleFromCenter ( XYSLIDER_ID,angle); 
); 
function _XYSLIDER_updateXyValueDistanceFromCentero(XYSLIDER_ID) 
 local ( distanceFromCenter,distanceTarget) 
( 
 distanceFromCenter = getManhattanDist( 0.5 
 , 0.5 
 , XYSLIDER_getXValue (XYSLIDER_ID) 
 , XYSLIDER_getYValue (XYSLIDER_ID) 
 ); 
 distanceTarget = getManhattanDist( 0.5,0.5,0.0,0.0); 
 XYSLIDER_setXYDistanceFromCenter(XYSLIDER_ID,distanceFromCenter); 
); 
function XYSLIDER_setXValue(XYSLIDER_ID,v,isSendReaper) 
( 
 _XYSLIDER_setXValue(XYSLIDER_ID,v); 
 (isSendReaper == true)? 
 ( 
 slider( XYSLIDER_getSliderIndexX(XYSLIDER_ID) ) = v; 
 slider_automate(2 ^ XYSLIDER_getSliderIndexX(XYSLIDER_ID)-1); 
 ); 
 _XYSLIDER_updateXyValueDistanceFromCentero(XYSLIDER_ID); 
 _XYSLIDER_updateXyValueAngleFromCentero(XYSLIDER_ID); 
); 
function XYSLIDER_setYValue(XYSLIDER_ID,v,isSendReaper) 
( 
 _XYSLIDER_setYValue(XYSLIDER_ID,v); 
 (isSendReaper == true)? 
 ( 
 slider( XYSLIDER_getSliderIndexY(XYSLIDER_ID) ) = v; 
 slider_automate(2 ^ XYSLIDER_getSliderIndexY(XYSLIDER_ID)-1); 
 ); 
 _XYSLIDER_updateXyValueDistanceFromCentero(XYSLIDER_ID); 
 _XYSLIDER_updateXyValueAngleFromCentero(XYSLIDER_ID); 
); 
function XYSLIDER_getCircleArea(XYSLIDER_ID) ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+1];); 
function XYSLIDER_isCircleAreaPressed(XYSLIDER_ID) ( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+2];); 
function _XYSLIDER_setIsCircleAreaPressed(XYSLIDER_ID,v)( STATIC_MASTER_BUFF[XYSLIDER_ID + _COMPONENT_getElementNum(XYSLIDER_ID)+2]=v;); 
function XYSLIDER_getCircleAreaCX(XYSLIDER_ID) 
( 
 CIRCLE_getCX ( XYSLIDER_getCircleArea(XYSLIDER_ID)); 
); 
function XYSLIDER_getCircleAreaCY(XYSLIDER_ID) 
( 
 CIRCLE_getCY ( XYSLIDER_getCircleArea(XYSLIDER_ID)); 
); 
function _XYSLIDER_getMeterWidth(XYSLIDER_ID) 
 local (circle_Pointer_ID,x,w,radius,out) 
( 
 x = RECTANGLE_getX(XYSLIDER_ID); 
 w = RECTANGLE_getWidth(XYSLIDER_ID); 
 circle_Pointer_ID = XYSLIDER_getCircleArea(XYSLIDER_ID); 
 radius = CIRCLE_getRadius(circle_Pointer_ID); 
 out = w -radius*2; 
); 
function _XYSLIDER_getMeterHeight(XYSLIDER_ID) 
 local (circle_Pointer_ID,y,h,radius,out) 
( 
 y = RECTANGLE_getY(XYSLIDER_ID); 
 h = RECTANGLE_getHeight(XYSLIDER_ID); 
 circle_Pointer_ID = XYSLIDER_getCircleArea(XYSLIDER_ID); 
 radius = CIRCLE_getRadius(circle_Pointer_ID); 
 out = h -radius*2; 
); 
function _XYSLIDER_positionToXValue(XYSLIDER_ID,x_) 
local (out,meterWidth,tempX,radius) 
( 
 meterWidth = _XYSLIDER_getMeterWidth(XYSLIDER_ID); 
 tempX = RECTANGLE_getX(XYSLIDER_ID); 
 radius = CIRCLE_getRadius(XYSLIDER_getCircleArea(XYSLIDER_ID)); 
 out = max( 0,min( (x_- tempX -radius)/(meterWidth) ,1)); 
); 
function _XYSLIDER_positionToYValue(XYSLIDER_ID,y_) local (out,meterHeight,tempY,radius) 
( 
 meterHeight = _XYSLIDER_getMeterHeight(XYSLIDER_ID); 
 tempY = RECTANGLE_getY(XYSLIDER_ID); 
 radius = CIRCLE_getRadius(XYSLIDER_getCircleArea(XYSLIDER_ID)); 
 out = max( 0,min( (y_- tempY-radius )/(meterHeight) ,1)); 
); 
function XYSLIDER_isXValueChanged( XYSLIDER_ID)local ( out ) 
( 
 out = false; 
 ( XYSLIDER_getLastValueX( XYSLIDER_ID) != XYSLIDER_getXValue(XYSLIDER_ID) )? 
 ( 
 out =true; 
 ); 
 out; 
); 
function XYSLIDER_isYValueChanged( XYSLIDER_ID)local ( out ) 
( 
 out = false; 
 ( XYSLIDER_getLastValueY( XYSLIDER_ID) != XYSLIDER_getYValue(XYSLIDER_ID))? 
 ( 
 out =true; 
 ); 
 out; 
); 
function XYSLIDER_getGridValueParameter_X(XYSLIDER_ID) 
 local (x_GridDelta,xValue,out) 
( 
 x_GridDelta =XYSLIDER_getXGridParam(XYSLIDER_ID); 
 xValue = XYSLIDER_getXValue(XYSLIDER_ID); 
 out = xValue / x_GridDelta; 
 out; 
); 
function XYSLIDER_getGridValueParameter_Y(XYSLIDER_ID) 
 local (y_GridDelta,yValue,out) 
( 
 y_GridDelta =XYSLIDER_getYGridParam(XYSLIDER_ID); 
 yValue = XYSLIDER_getYValue(XYSLIDER_ID); 
 out = yValue / y_GridDelta; 
 out; 
); 
function XYSLIDER_update(XYSLIDER_ID) 
( 
 COMPONENT_update( XYSLIDER_ID); 
 XYSLIDER_setLastValueX( XYSLIDER_ID 
 , XYSLIDER_getXValue( XYSLIDER_ID)); 
 XYSLIDER_setLastValueY( XYSLIDER_ID 
 , XYSLIDER_getYValue( XYSLIDER_ID)); 
); 
function XYSLIDER_resized(XYSLIDER_ID,parrentRECT ) 
( 
 0; 
); 
function _XYSLIDER_drawXYDistance(XYSLIDER_ID,XXXX,YYYY) 
 local ( radius 
 , lineH 
 , cx 
 , cy 
 , x,y,w,h,xx_,yy_ 
 , angle 
 , thicknes 
 , drawStr_dist 
 , str_W 
 , str_H 
 , marginX 
 , marginY 
 ) 
( 
 cx = RECTANGLE_getCenterX(XYSLIDER_ID); 
 cy = RECTANGLE_getCenterY(XYSLIDER_ID); 
 x = RECTANGLE_getX(XYSLIDER_ID); 
 y = RECTANGLE_getY(XYSLIDER_ID); 
 w = RECTANGLE_getWidth(XYSLIDER_ID); 
 h = RECTANGLE_getHeight(XYSLIDER_ID); 
 xx_ = XYSLIDER_getXValue(XYSLIDER_ID) ; 
 yy_ = XYSLIDER_getYValue(XYSLIDER_ID) ; 
 COMPONENT_changeColorGfx( XYSLIDER_ID,"blue"); 
 angle = atan2( cy -YYYY 
 , cx -XXXX ); 
 radius = (min(w,h)-15)/2 * XYSLIDER_getXYDistanceFromCenter(XYSLIDER_ID); 
 gfx_circle( cx,cy,radius,true); 
 thicknes = 2; 
 DrawLine_WithThickNess(cx,cy,XXXX,YYYY,thicknes); 
 gfx_a = 1.0; 
 drawStr_dist = #; 
 sprintf ( drawStr_dist,"Distance: %.2f %% " ,XYSLIDER_getXYDistanceFromCenter(XYSLIDER_ID) *100); 
 gfx_measurestr(drawStr_dist,str_W,str_H); 
 marginX =5; 
 marginY =5; 
 COMPONENT_changeColorGfx( XYSLIDER_ID,"black"); 
 gfx_rect( cx - str_W/2 - marginX 
 ,cy - str_H/2 - marginY 
 ,str_W + marginX*2 
 ,str_H + marginY*2 
 ); 
 gfx_x = cx - str_W/2; 
 gfx_y = cy - str_H/2; 
 COMPONENT_changeColorGfx( XYSLIDER_ID,"white"); 
 gfx_drawstr(drawStr_dist); 
); 
function _XYSLIDER_drawXYAngleFromCenter(XYSLIDER_ID,XXXX,YYYY) 
 local ( radius 
 , lineH 
 , cx 
 , cy 
 , x,y,w,h,xx_,yy_ 
 , angle 
 , thicknes 
 , drawStr_dist 
 , str_W 
 , str_H 
 , marginX 
 , marginY 
 ) 
( 
 cx = RECTANGLE_getCenterX(XYSLIDER_ID); 
 cy = RECTANGLE_getCenterY(XYSLIDER_ID); 
 x = RECTANGLE_getX(XYSLIDER_ID); 
 y = RECTANGLE_getY(XYSLIDER_ID); 
 w = RECTANGLE_getWidth(XYSLIDER_ID); 
 h = RECTANGLE_getHeight(XYSLIDER_ID); 
 xx_ = XYSLIDER_getXValue(XYSLIDER_ID) ; 
 yy_ = XYSLIDER_getYValue(XYSLIDER_ID) ; 
 COMPONENT_changeColorGfx( XYSLIDER_ID,"blue"); 
 angle = atan2( cy -YYYY 
 , cx -XXXX ); 
 radius = (min(w,h))/4 ; 
 COMPONENT_changeColorGfx( XYSLIDER_ID,"green"); 
 gfx_circle ( cx,cy,radius/2,true); 
 COMPONENT_changeColorGfx( XYSLIDER_ID,"blue"); 
 drawFillArc(cx,cy,radius,$pi/2,angle-$pi/2,32); 
 thicknes = 2; 
 DrawLine_WithThickNess(cx,cy,XXXX,YYYY,thicknes); 
 drawStr_dist = #; 
 sprintf ( drawStr_dist,"Angle: %.2f Deg " ,360 -deg(angle+$pi )); 
 gfx_measurestr(drawStr_dist,str_W,str_H); 
 marginX =5; 
 marginY =5; 
 COMPONENT_changeColorGfx( XYSLIDER_ID,"black"); 
 gfx_rect( cx - str_W/2 - marginX 
 ,cy - str_H/2 - marginY 
 ,str_W + marginX*2 
 ,str_H + marginY*2 
 ); 
 gfx_x = cx - str_W/2; 
 gfx_y = cy - str_H/2; 
 COMPONENT_changeColorGfx( XYSLIDER_ID,"white"); 
 gfx_drawstr(drawStr_dist); 
); 
function _XYSLIDER_drawGrid(XYSLIDER_ID,pointerRadius) 
 local( , x,y,w,h,xx_,yy_ 
 , x_GridDelta 
 , y_GridDelta 
 , _cc_X_fPos 
 , _cc_Y_fPos 
 , _Y_drawX1,_Y_drawY1, _Y_drawX2,_Y_drawY2 
 , _X_drawX1,_X_drawY1, _X_drawX2,_X_drawY2 
 , _saftyCountX 
 , _saftyCountY 
 , _saftyCount_Check 
 , _cc_X_count 
 , _cc_Y_count 
 , _cc_X_Norm 
 , _cc_Y_Norm 
 , _radius 
 , _X_TotalGrid_Num 
 , _Y_TotalGrid_Num 
 , _temp_Alpha 
 , _targetAlpha 
 , _radiusPoint 
 ) 
( 
 _radiusPoint = pointerRadius; 
 x = RECTANGLE_getX(XYSLIDER_ID) + _radiusPoint; 
 y = RECTANGLE_getY(XYSLIDER_ID) + _radiusPoint; 
 w = RECTANGLE_getWidth(XYSLIDER_ID) - _radiusPoint*2; 
 h = RECTANGLE_getHeight(XYSLIDER_ID)- _radiusPoint*2; 
 x_GridDelta =XYSLIDER_getXGridParam(XYSLIDER_ID); 
 y_GridDelta =XYSLIDER_getYGridParam(XYSLIDER_ID); 
 _saftyCountX = 0; 
 _saftyCountY = 0; 
 _saftyCount_Check = 30; 
 _cc_X_count = 0; 
 _cc_Y_count = 0; 
 _cc_X_Norm = 0; 
 _cc_Y_Norm = 0; 
 _radius = 2.5; 
 _X_TotalGrid_Num = 1.0 /x_GridDelta ; 
 _Y_TotalGrid_Num = 1.0 /y_GridDelta ; 
 _temp_Alpha =COMPONENT_getComponentAlpha (XYSLIDER_ID); 
 _targetAlpha = _temp_Alpha *0.7; 
 _cc_X_count = 0; 
 _saftyCountX = 0; 
 while ( _cc_X_count < _X_TotalGrid_Num +1) 
 ( 
 ( _saftyCountX > _saftyCount_Check)?(_cc_X_count = 100; ); 
 _cc_X_Norm = x_GridDelta* _cc_X_count; 
 _X_drawX1 = floor( x + w *_cc_X_Norm); 
 _X_drawY1 = floor( y ) - _radiusPoint;; 
 _X_drawX2 = _X_drawX1; 
 _X_drawY2 = floor( y + h )+ _radiusPoint;; 
 (_X_drawX1 <=x+ w )? 
 ( 
 ( _cc_X_count % 2 == 1 
 && _X_TotalGrid_Num > 2 ) ? 
 ( 
 gfx_a = _targetAlpha*0.6; ; 
 ):( 
 gfx_a = _targetAlpha; 
 ); 
 ( _cc_X_Norm != 0.5) ? 
 gfx_line (_X_drawX1,_X_drawY1, _X_drawX2,_X_drawY2,true); 
 ):( 
 _cc_X_count = 100; 
 ); 
 _cc_X_count +=1; 
 _saftyCountX +=1; 
 ); 
 _cc_Y_count = 0; 
 _saftyCountY = 0; 
 while ( _cc_Y_count < _Y_TotalGrid_Num +1) 
 ( 
 ( _saftyCountY > _saftyCount_Check)?(_cc_Y_count = 100; ); 
 _cc_Y_Norm = y_GridDelta* _cc_Y_count; 
 _cc_Y_Norm = y_GridDelta* _cc_Y_count; 
 _Y_drawX1 = floor( x ) - _radiusPoint; 
 _Y_drawY1 = floor( y + h *_cc_Y_Norm); 
 _Y_drawX2 = floor( x + w ) + _radiusPoint; 
 _Y_drawY2 = _Y_drawY1 ; 
 ( _Y_drawY1 <= y +h 
 ) ? 
 ( 
 ( _cc_Y_count % 2 == 1 
 && _Y_TotalGrid_Num > 2 )? 
 ( 
 gfx_a =_targetAlpha*0.6; 
 ):( 
 gfx_a = _targetAlpha; 
 ); 
 (_cc_Y_Norm != 0.5) ? 
 gfx_line (_Y_drawX1,_Y_drawY1, _Y_drawX2,_Y_drawY2); 
 ):( 
 _cc_Y_count = 100; 
 ); 
 gfx_a =_targetAlpha; 
 _cc_X_count = 0; 
 _saftyCountX = 0; 
 while ( _cc_X_count < _X_TotalGrid_Num +1) 
 ( 
 ( _saftyCountX > _saftyCount_Check)?(_cc_X_count = 100; ); 
 _cc_X_Norm = x_GridDelta* _cc_X_count; 
 _X_drawX1 = floor( x + w *_cc_X_Norm); 
 _X_drawY1 = floor( y ) - _radiusPoint;; 
 _X_drawX2 = _X_drawX1; 
 _X_drawY2 = floor( y + h )+ _radiusPoint;; 
 (_X_drawX1 <=x+ w )? 
 ( 
 ( _cc_X_count % 2 == 0 
 && _cc_Y_count % 2 == 0 
 )? 
 ( 
 gfx_a = _targetAlpha; 
 gfx_circle ( floor( x + w *x_GridDelta* ( _cc_X_count) ) 
 , floor( y + h *y_GridDelta* ( _cc_Y_count) ) 
 , _radius,true ); 
 ); 
 ):( 
 _cc_X_count = 100; 
 ); 
 _cc_X_count +=1; 
 _saftyCountX +=1; 
 ); 
 _saftyCountY += 1; 
 _cc_Y_count+=1; 
 ); 
 gfx_a = _temp_Alpha; 
); 
function _XYSLIDER_draw_GridValue ( XYSLIDER_ID,xx_,yy_) 
 local (x ,y,w ,h 
 ,cx ,cy 
 ,_x_tl 
 ,_y_tl 
 ,_marginX 
 ,_marginY 
 ,drawStr_dist 
 ,str_W 
 ,str_H 
 ,str_H 
 ) 
( 
 x = RECTANGLE_getX(XYSLIDER_ID); 
 y = RECTANGLE_getY(XYSLIDER_ID); 
 w = RECTANGLE_getWidth(XYSLIDER_ID); 
 h = RECTANGLE_getHeight(XYSLIDER_ID); 
 cx = RECTANGLE_getCenterX(XYSLIDER_ID); 
 cy = RECTANGLE_getCenterY(XYSLIDER_ID); 
 _gridXValue = XYSLIDER_getGridValueParameter_X (XYSLIDER_ID); 
 _gridYValue = XYSLIDER_getGridValueParameter_Y (XYSLIDER_ID); 
 _x_tl = xx_; 
 _y_tl = cy-gfx_texth*2; 
 _marginX =5; 
 _marginY =5; 
 drawStr_dist = #; 
 sprintf ( drawStr_dist,"32th x %.2f" ,_gridXValue); 
 gfx_measurestr(drawStr_dist,str_W,str_H); 
 COMPONENT_changeColorGfx( XYSLIDER_ID,"black"); 
 gfx_rect( _x_tl 
 , _y_tl 
 ,str_W + _marginX*2 
 ,str_H + _marginY*2 
 ); 
 gfx_x = _x_tl + _marginX; 
 gfx_y = _y_tl + _marginY; 
 COMPONENT_changeColorGfx( XYSLIDER_ID,"white"); 
 gfx_drawstr(drawStr_dist); 
); 
function _XYSLIDER_drawCrossCursol(XYSLIDER_ID,XXXX,YYYY) 
 local (x,y,w,h 
 , cx,cy 
 ,_triangle_WidthV 
 ,_triangle_WidthT 
 ,tempStr 
 ,tempStrW 
 ,tempStrH) 
( 
 x = RECTANGLE_getX(XYSLIDER_ID); 
 y = RECTANGLE_getY(XYSLIDER_ID); 
 w = RECTANGLE_getWidth(XYSLIDER_ID); 
 h = RECTANGLE_getHeight(XYSLIDER_ID); 
 cx =RECTANGLE_getCenterX(XYSLIDER_ID); 
 cy =RECTANGLE_getCenterY(XYSLIDER_ID); 
 gfx_line ( x , YYYY,x+w,YYYY); 
 gfx_line ( XXXX , y,XXXX,y+h); 
 _triangle_WidthV = 5; 
 _triangle_WidthT = 5; 
 gfx_triangle( x,YYYY-_triangle_WidthV 
 , x,YYYY+_triangle_WidthV 
 , x+_triangle_WidthT,YYYY 
 ); 
 gfx_triangle( x+w,YYYY-_triangle_WidthV 
 , x+w,YYYY+_triangle_WidthV 
 , x+w-_triangle_WidthT,YYYY 
 ); 
 gfx_triangle( XXXX-_triangle_WidthV,y 
 , XXXX+_triangle_WidthV,y 
 , XXXX,y+_triangle_WidthT 
 ); 
 gfx_triangle( XXXX-_triangle_WidthV,y+h 
 , XXXX+_triangle_WidthV,y+h 
 , XXXX,y+h-_triangle_WidthT 
 ); 
 _triangle_WidthV = 3; 
 _triangle_WidthT = 3; 
 gfx_triangle( XXXX-_triangle_WidthV,cy 
 , XXXX,cy-_triangle_WidthT 
 , XXXX+_triangle_WidthV,cy 
 , XXXX,cy+_triangle_WidthT 
 ); 
 gfx_triangle( cx,YYYY-_triangle_WidthV 
 , cx-_triangle_WidthT,YYYY 
 , cx,YYYY+_triangle_WidthV 
 , cx+_triangle_WidthT,YYYY 
 ); 
 tempStr = #; 
 (XYSLIDER_getIsUseGridParamerOnMousePt(XYSLIDER_ID) == true)? 
 ( 
 sprintf( tempStr,"%.2f",XYSLIDER_getGridValueParameter_Y(XYSLIDER_ID) ); 
 ):( 
 sprintf( tempStr,"%.2f",XYSLIDER_getYValue(XYSLIDER_ID) ); 
 ); 
 gfx_measurestr(tempStr,tempStrW,tempStrH); 
 gfx_x = x-tempStrW-1; 
 gfx_y = YYYY-gfx_texth/2; 
 gfx_drawstr(tempStr); 
 (XYSLIDER_getIsUseGridParamerOnMousePt(XYSLIDER_ID) == true)? 
 ( 
 sprintf( tempStr,"%.2f",XYSLIDER_getGridValueParameter_X(XYSLIDER_ID) ); 
 ):( 
 sprintf( tempStr,"%.2f",XYSLIDER_getXValue(XYSLIDER_ID) ); 
 ); 
 gfx_measurestr(tempStr,tempStrW,tempStrH); 
 gfx_x = XXXX-tempStrW/2; 
 gfx_y = y+h+gfx_texth/2; 
 gfx_drawstr(tempStr); 
); 
function XYSLIDER_draw(XYSLIDER_ID) 
local ( radius,lineH,x,y,w,h,cx,cy,circle_Area_ID 
 , tempStr,tempStrW,tempStrH,XXXX,YYYY,margin,temp_Alpha 
 , _onMouseX_Offset 
 , _onMouseY_Offset 
 ) 
( 
 x = RECTANGLE_getX(XYSLIDER_ID); 
 y = RECTANGLE_getY(XYSLIDER_ID); 
 w = RECTANGLE_getWidth(XYSLIDER_ID); 
 h = RECTANGLE_getHeight(XYSLIDER_ID); 
 cx =RECTANGLE_getCenterX(XYSLIDER_ID); 
 cy =RECTANGLE_getCenterY(XYSLIDER_ID); 
 radius = 12; 
 lineH = 1; 
 COMPONENT_changeColorGfx( XYSLIDER_ID,"white"); 
 gfx_a = 0.5 *COMPONENT_getComponentAlpha(XYSLIDER_ID); 
 gfx_rect( x, y, w, h,true); 
 COMPONENT_changeColorGfx( XYSLIDER_ID,"black"); 
 gfx_line( x +w/2 ,y 
 , x +w/2 ,y+h); 
 gfx_line( x ,y+h/2 
 ,x+w ,y+h/2); 
 (XYSLIDER_getIsDrawGrid(XYSLIDER_ID) == true)? 
 ( 
 COMPONENT_changeColorGfx( XYSLIDER_ID,"white"); 
 _XYSLIDER_drawGrid(XYSLIDER_ID,radius); 
 ); 
 COMPONENT_changeColorGfx( XYSLIDER_ID,"black"); 
 gfx_rect( x, y, w+1, h+1,false); 
 circle_Area_ID = XYSLIDER_getCircleArea(XYSLIDER_ID); 
 XXXX = (x+radius)+ (w-radius*2 ) * XYSLIDER_getXValue(XYSLIDER_ID) ; 
 YYYY = (y+radius)+ (h-radius*2 ) * XYSLIDER_getYValue(XYSLIDER_ID) ; 
 COMPONENT_changeColorGfx( XYSLIDER_ID,"black"); 
 ( XYSLIDER_getIsNeedCrossCursolLine(XYSLIDER_ID)==true)? 
 ( 
 _XYSLIDER_drawCrossCursol(XYSLIDER_ID,XXXX,YYYY); 
 ); 
 CIRCLE_setCX(circle_Area_ID,XXXX ); 
 CIRCLE_setCY(circle_Area_ID,YYYY); 
 CIRCLE_setRadius(circle_Area_ID,radius); 
 tempStr = "X 0.0 : Y 0.0"; 
 gfx_measurestr(tempStr,tempStrW,tempStrH); 
 margin =3; 
 ( XYSLIDER_getXYDistanceDrawMode( XYSLIDER_ID) == DEFINE_XYSLIDER_DISTANCE_DRAWMODE_NONE)? 
 ( 
 COMPONENT_changeColorGfx( XYSLIDER_ID,"black"); 
 gfx_rect(x+w/2 
 ,y+h/2 
 ,tempStrW+margin*2 
 ,tempStrH+margin*2,true); 
 COMPONENT_changeColorGfx( XYSLIDER_ID,"white"); 
 gfx_x = x+w/2+margin; 
 gfx_y = y+h/2+margin; 
 gfx_drawstr( "X 0.5 : Y 0.5"); 
 ):( XYSLIDER_getXYDistanceDrawMode( XYSLIDER_ID) == DEFINE_XYSLIDER_DISTANCE_DRAWMODE_CENTER)? 
 ( 
 COMPONENT_changeColorGfx( XYSLIDER_ID,"white"); 
 gfx_x = x+w/2+margin; 
 gfx_y = y+h/2+margin; 
 _XYSLIDER_drawXYDistance(XYSLIDER_ID,XXXX,YYYY); 
 ):( XYSLIDER_getXYDistanceDrawMode( XYSLIDER_ID) == DEFINE_XYSLIDER_DISTANCE_DRAWMODE_CENTER_ANGLE)? 
 ( 
 COMPONENT_changeColorGfx( XYSLIDER_ID,"white"); 
 gfx_x = x+w/2+margin; 
 gfx_y = y+h/2+margin; 
 _XYSLIDER_drawXYAngleFromCenter(XYSLIDER_ID,XXXX,YYYY); 
 ); 
 COMPONENT_changeColorGfx( XYSLIDER_ID,"black"); 
 gfx_rect(x 
 ,y 
 ,tempStrW+margin*2 
 ,tempStrH+margin*2,true); 
 COMPONENT_changeColorGfx( XYSLIDER_ID,"white"); 
 gfx_x = x+margin; 
 gfx_y = y+margin; 
 gfx_drawstr( "X 0.0 : Y 0.0"); 
 COMPONENT_changeColorGfx( XYSLIDER_ID,"black"); 
 gfx_rect(x+w-margin*2 -tempStrW 
 ,y 
 ,tempStrW+margin*2 
 ,tempStrH+margin*2,true); 
 COMPONENT_changeColorGfx( XYSLIDER_ID,"white"); 
 gfx_x = x+w-margin-tempStrW; 
 gfx_y = y+margin; 
 gfx_drawstr( "X 1.0 : Y 0.0"); 
 COMPONENT_changeColorGfx( XYSLIDER_ID,"black"); 
 gfx_rect(x+w-margin*2 -tempStrW 
 ,y+h-margin*2 -tempStrH 
 ,tempStrW+margin*2 
 ,tempStrH+margin*2,true); 
 COMPONENT_changeColorGfx( XYSLIDER_ID,"white"); 
 gfx_x = x+w-margin-tempStrW; 
 gfx_y = y+h-margin-tempStrH; 
 gfx_drawstr( "X 1.0 : Y 1.0"); 
 COMPONENT_changeColorGfx( XYSLIDER_ID,"black"); 
 gfx_rect(x 
 ,y+h-margin*2 -tempStrH 
 ,tempStrW+margin*2 
 ,tempStrH+margin*2,true); 
 COMPONENT_changeColorGfx( XYSLIDER_ID,"white"); 
 gfx_x = x+margin; 
 gfx_y = y+h-margin-tempStrH; 
 gfx_drawstr( "X 0.0 : Y 1.0"); 
 COMPONENT_changeColorGfx( XYSLIDER_ID,"black"); 
 gfx_circle( floor(XXXX),floor(YYYY) , radius ,true); 
 ( XYSLIDER_isCircleAreaPressed(XYSLIDER_ID) ==true 
 || CIRCLE_isContainMouse( circle_Area_ID ) == true 
 ) ? 
 ( 
 COMPONENT_changeColorGfx( XYSLIDER_ID,"red"); 
 gfx_circle( floor(XXXX),floor(YYYY) , radius -4 ,true); 
 tempStr =#; 
 (XYSLIDER_getIsUseGridParamerOnMousePt(XYSLIDER_ID) == true)? 
 ( 
 sprintf( tempStr 
 ,"%s%1.2f\n%s%1.2f" 
 , XYSLIDER_getXGridParamName(XYSLIDER_ID) 
 , XYSLIDER_getGridValueParameter_X(XYSLIDER_ID) 
 , XYSLIDER_getYGridParamName(XYSLIDER_ID) 
 , XYSLIDER_getGridValueParameter_Y(XYSLIDER_ID) 
 ); 
 ):( 
 sprintf( tempStr 
 ,"x %1.2f :y %1.2f " 
 , XYSLIDER_getXValue(XYSLIDER_ID) 
 , XYSLIDER_getYValue(XYSLIDER_ID) 
 ); 
 ); 
 gfx_measurestr(tempStr,tempStrW,tempStrH); 
 COMPONENT_changeColorGfx( XYSLIDER_ID,"black"); 
 _onMouseX_Offset = 1; 
 _onMouseY_Offset = 1; 
 gfx_rect(max(x,min(XXXX,x+w-(tempStrW+margin*2)-radius -_onMouseX_Offset)) +radius +_onMouseX_Offset 
 ,max(y,min(YYYY,y+h-(tempStrH+margin*2)-radius -_onMouseY_Offset)) +radius +_onMouseY_Offset 
 ,tempStrW+margin*2 
 ,tempStrH+margin*2,true); 
 COMPONENT_changeColorGfx( XYSLIDER_ID,"white"); 
 gfx_x = max(x,min(XXXX,x+w-(tempStrW+margin*2)-radius -_onMouseX_Offset))+margin +radius +_onMouseX_Offset; 
 gfx_y = max(y,min(YYYY,y+h-(tempStrH+margin*2)-radius -_onMouseY_Offset))+margin +radius +_onMouseY_Offset; 
 gfx_drawstr( tempStr); 
 ):( 
 COMPONENT_changeColorGfx( XYSLIDER_ID,"yellow"); 
 gfx_circle( floor(XXXX),floor(YYYY) , radius -4 ,true); 
 ); 
 COMPONENT_changeColorGfx( XYSLIDER_ID,"black"); 
); 
function XYSLIDER_mouseMoved(XYSLIDER_ID,MOUSEINFO_ID)local(XXX,YYY) 
( 
 ( RECTANGLE_isContainMouse(XYSLIDER_ID) ==true) ? 
 ( 
 DBG(" SLIDER Mouse Moved"); 
 ); 
 ( XYSLIDER_isCircleAreaPressed(XYSLIDER_ID) ==true )? 
 ( 
 XXX = _XYSLIDER_positionToXValue( XYSLIDER_ID 
 , MOUSEINFO_getMouseX(MOUSEINFO_ID)); 
 YYY = _XYSLIDER_positionToYValue( XYSLIDER_ID 
 , MOUSEINFO_getMouseY(MOUSEINFO_ID)); 
 XYSLIDER_setXValue(XYSLIDER_ID,XXX,true) ; 
 XYSLIDER_setYValue(XYSLIDER_ID,YYY,true) ; 
 DBG(" XY SLIDER -- X Changed"); 
 DBG_FLOAT(XYSLIDER_getXValue(XYSLIDER_ID) ); 
 DBG(" XY SLIDER -- Y Changed"); 
 DBG_FLOAT(XYSLIDER_getYValue(XYSLIDER_ID) ); 
 ); 
); 
function XYSLIDER_mouseButtonPressd(XYSLIDER_ID,MOUSEINFO_ID )local(circle_Area_ID) 
( 
 ( RECTANGLE_isContainMouse(XYSLIDER_ID) ==true) ? 
 ( 
 DBG(" SLIDER Mouse Button Press IN"); 
 SetLastMousePressdComponent(XYSLIDER_ID); 
 COMPONENT_setIsMousePressStartedInThisComp(XYSLIDER_ID,true); 
 ):( 
 COMPONENT_setIsMousePressStartedInThisComp(XYSLIDER_ID,false); 
 ); 
 circle_Area_ID = XYSLIDER_getCircleArea(XYSLIDER_ID); 
 ( CIRCLE_isContainMouse(circle_Area_ID) == true)? 
 ( 
 DBG(" SLIDER Mouse Button Press IN Circle"); 
 _XYSLIDER_setIsCircleAreaPressed(XYSLIDER_ID,true); 
 ); 
); 
function XYSLIDER_mouseButtonReleased( XYSLIDER_ID,MOUSEINFO_ID )local (tempstr) 
( 
 ( RECTANGLE_isContainMouse(XYSLIDER_ID) ==true) ? 
 ( 
 DBG(" SLIDER Mouse Button Released"); 
 SetLastMouseReleasedComponent(XYSLIDER_ID); 
 ); 
 _XYSLIDER_setIsCircleAreaPressed(XYSLIDER_ID,false); 
); 
function XYSLIDER_mouseWheeled(XYSLIDER_ID,MOUSEINFO_ID ) 
( 
 ( RECTANGLE_isContainMouse(XYSLIDER_ID) ==true) ? 
 ( 
 DBG(" SLIDER Mouse Wheeld"); 
 COMPONENT_setValue( XYSLIDER_ID 
 , COMPONENT_getValue(XYSLIDER_ID) 
 + MOUSEINFO_getMouseWheelDiffV_ABS(MOUSEINFO_ID)/30 
 , true 
 ); 
 DBG_FLOAT(COMPONENT_getValue(XYSLIDER_ID) ); 
 SetLastMouseWheeledComponent(XYSLIDER_ID); 
 ); 
); 
function _FREQUENCY_getElementNum (FREQUENCY_ID) ( STATIC_MASTER_BUFF[FREQUENCY_ID + _COMPONENT_getElementNum(FREQUENCY_ID)+1];); 
function FREQUENCY_getChildRbjFilterLineArray (FREQUENCY_ID) ( STATIC_MASTER_BUFF[FREQUENCY_ID + _COMPONENT_getElementNum(FREQUENCY_ID)+2];); 
function FREQUENCY_getLinePointArray (FREQUENCY_ID) ( STATIC_MASTER_BUFF[FREQUENCY_ID + _COMPONENT_getElementNum(FREQUENCY_ID)+3];); 
function FREQUENCY_getFftSize (FREQUENCY_ID) ( STATIC_MASTER_BUFF[FREQUENCY_ID + _COMPONENT_getElementNum(FREQUENCY_ID)+4];); 
function FREQUENCY_getFftSampleBuffer (FREQUENCY_ID) ( STATIC_MASTER_BUFF[FREQUENCY_ID + _COMPONENT_getElementNum(FREQUENCY_ID)+6];); 
function FREQUENCY_getWindowArray (FREQUENCY_ID) ( STATIC_MASTER_BUFF[FREQUENCY_ID + _COMPONENT_getElementNum(FREQUENCY_ID)+7];); 
function FREQUENCY_getFftWorkSpaceArray (FREQUENCY_ID) ( STATIC_MASTER_BUFF[FREQUENCY_ID + _COMPONENT_getElementNum(FREQUENCY_ID)+8];); 
function FREQUENCY_getFftAnalizeLinePointArray(FREQUENCY_ID) ( STATIC_MASTER_BUFF[FREQUENCY_ID + _COMPONENT_getElementNum(FREQUENCY_ID)+9];); 
function FREQUENCY_freqToX(FREQUENCY_ID,freq ) local (out,wsc,wws,freq_,sampleRate_) 
( 
 sampleRate_ = (srate != 0) ? srate:44100; 
 freq_ = max ( 12, min( sampleRate_/2,freq)); 
 wws = sampleRate_/25; 
 wsc = RECTANGLE_getWidth( FREQUENCY_ID)/log(wws); 
 out = log((freq_/sampleRate_*2)*wws)*wsc; 
 out; 
); 
function FREQUENCY_XtoFreq(FREQUENCY_ID,x_ ) local (out,wsc,localX_,wws,sampleRate_) 
( 
 sampleRate_ = (srate != 0) ? srate:44100; 
 wws = sampleRate_/25; 
 wsc = RECTANGLE_getWidth( FREQUENCY_ID)/log(wws); 
 localX_ = x_-RECTANGLE_getX(FREQUENCY_ID); 
 out = exp((localX_)/(wsc) + log(sampleRate_/2)-log(wws) ); 
 out; 
); 
function FREQUENCY_dBToY(FREQUENCY_ID,dB ) local (out,cY,maxDb,halfHeight) 
( 
 cY = RECTANGLE_getCenterY(FREQUENCY_ID); 
 halfHeight = RECTANGLE_getHeight(FREQUENCY_ID)/2; 
 maxDb = 12; 
 out =cY+ halfHeight/maxDb * -dB; 
); 
function FREQUENCY_YtoDB(FREQUENCY_ID,y_ ) local (out,cY,maxDb,halfHeight) 
( 
 cY = RECTANGLE_getCenterY(FREQUENCY_ID); 
 halfHeight = RECTANGLE_getHeight(FREQUENCY_ID)/2; 
 maxDb = 12; 
 out = - (y_ -cY)/(halfHeight/maxDb ); 
 out; 
); 
function _FREQUENCY_buildWindowArray(FREQUENCY_ID ) 
 local(windowArray,deltaPos,fftSize ,count_QQ,pwr,windowpos,value) 
( 
 fftSize = FREQUENCY_getFftSize(FREQUENCY_ID); 
 windowArray = FREQUENCY_getWindowArray(FREQUENCY_ID); 
 ARRAY_clear(windowArray); 
 deltaPos = $pi*2/fftsize; 
 count_QQ = 0; 
 pwr = 0; 
 while(count_QQ< fftsize/2 ) 
 ( 
 windowpos=count_QQ*deltaPos; 
 value = 0.35875 - 0.48829 * cos(windowpos) + 0.14128 * cos(2*windowpos) - 0.01168 * cos(3*windowpos); 
 ARRAY_push_back(windowArray,value); 
 pwr +=value; 
 count_QQ += 1; 
 ); 
 pwr = 1/(pwr*2-ARRAY_getAt(windowArray,count_QQ-1)); 
 count_QQ = 0; 
 while(count_QQ < fftsize/2 ) 
 ( 
 ARRAY_changeValueAt (windowArray,count_QQ,ARRAY_getAt(windowArray,count_QQ)*pwr); 
 ARRAY_push_back(windowArray,value); 
 pwr +=value; 
 count_QQ += 1; 
 ); 
); 
function _FREQUENCY_prepareFFTAnalizeLinePoint( FREQUENCY_ID) 
 local (fftSize,fftAnalyzeFFTArray,count_RR,x_,y_) 
( 
 fftSize = FREQUENCY_getFftSize(FREQUENCY_ID); 
 fftAnalyzeFFTArray = FREQUENCY_getFftAnalizeLinePointArray(FREQUENCY_ID); 
 ARRAY_clear( fftAnalyzeFFTArray); 
 count_RR = 0; 
 while(count_RR < fftSize/2) 
 ( 
 ARRAY_push_back(fftAnalyzeFFTArray,POINT_create(0,0)); 
 count_RR +=1; 
 ); 
); 
function _FREQUENCY_buildFftAnalyzeLinePoint(FREQUENCY_ID ) 
 local ( fftSize,fftAnalyzeFFTArray,count_RR,x_,y_,pt 
 , sampleRate_ ,dtFreq) 
( 
 fftSize = FREQUENCY_getFftSize(FREQUENCY_ID); 
 fftAnalyzeFFTArray = FREQUENCY_getFftAnalizeLinePointArray(FREQUENCY_ID); 
 sampleRate_ = ( srate != 0)? srate: 44100; 
 dtFreq = ( sampleRate_ ) / ( fftSize); 
 count_RR = 0; 
 while(count_RR < fftSize/2 ) 
 ( 
 pt = ARRAY_getAt ( fftAnalyzeFFTArray,count_RR); 
 x_ = FREQUENCY_freqToX(FREQUENCY_ID,dtFreq * count_RR ) ; 
 y_ = RECTANGLE_getY(FREQUENCY_ID) +50; 
 POINT_setX( pt, x_); 
 POINT_setX( pt, y_); 
 count_RR +=1; 
 ); 
); 
function _FREQUENCY_pushSampleToFFTBuffer(FREQUENCY_ID,inSample ) 
 local ( cursolBuff_ ) 
( 
 cursolBuff_ = FREQUENCY_getFftSampleBuffer(FREQUENCY_ID); 
 CURSOLBUFFER_push(cursolBuff_,inSample); 
 TTCC = CURSOLBUFFER_getLastPushedValue(cursolBuff_); 
); 
function FREQUENCY_processFFT(FREQUENCY_ID,inSample ) 
 local ( windowArray 
 , fftSampleBuf 
 , fftWorkSpace 
 , count_DD 
 , count_EE 
 , fftsize 
 , tx 
 , ty 
 , dtFreq 
 , sampleRate_ 
 , pt 
 , fftAnalyzeFFTArray 
 , arrayNum 
 ) 
( 
 windowArray = FREQUENCY_getWindowArray(FREQUENCY_ID); 
 fftSampleBuf = FREQUENCY_getFftSampleBuffer(FREQUENCY_ID); 
 fftWorkSpace = FREQUENCY_getFftWorkSpaceArray(FREQUENCY_ID); 
 fftsize = FREQUENCY_getFftSize(FREQUENCY_ID); 
 fftAnalyzeFFTArray = FREQUENCY_getFftAnalizeLinePointArray(FREQUENCY_ID); 
 sampleRate_ = ( srate != 0)? srate: 44100; 
 arrayNum = CURSOLBUFFER_getMaxSize (fftSampleBuf); 
 count_DD = 0; 
 while (count_DD < fftsize ) 
 ( 
 ARRAY_push_back( fftWorkSpace 
 ,CURSOLBUFFER_getAt(fftSampleBuf,count_DD) 
 * ARRAY_getAt(windowArray,count_DD ) 
 ); 
 ARRAY_push_back(fftWorkSpace,-1 ); 
 count_DD +=1; 
 ); 
 fft ( ARRAY_getStartBufferPointerAbsolute(fftWorkSpace),fftsize-1); 
 fft_permute( ARRAY_getStartBufferPointerAbsolute(fftWorkSpace),fftsize-1); 
 count_DD = 0; 
 count_EE = 0; 
 dtFreq = ( sampleRate_ ) / ( fftSize); 
 while(count_DD < fftSize/2 ) 
 ( 
 pt = ARRAY_getAt ( fftAnalyzeFFTArray,count_DD); 
 tx = FREQUENCY_freqToX(FREQUENCY_ID,dtFreq * count_EE ) 
 + RECTANGLE_getX(FREQUENCY_ID); 
 sc= ( RECTANGLE_getHeight( FREQUENCY_ID))*20 
 / ( -(-96) * log(10)); 
 fftedValue = ARRAY_getAt(fftWorkSpace,count_EE); 
 fftedValue /= fftSize; 
 ty = log(max(sqr(fftedValue)+sqr(fftedValue),(10^(-500/20*2)))); 
 ty = ty*-0.6*sc 
 + RECTANGLE_getY( FREQUENCY_ID) 
 + RECTANGLE_getHeight( FREQUENCY_ID)/2; 
 POINT_setX( pt, tx); 
 POINT_setY( pt, ty); 
 count_DD +=1; 
 count_EE +=2; 
 ); 
 ARRAY_clear(fftWorkSpace); 
); 
function FREQUENCY_drawFftAnalyseLinePoints(FREQUENCY_ID) 
 local (x,y,w,h,pointArray,arraySize,count_DD,lastPoint ) 
( 
 pointArray = FREQUENCY_getFftAnalizeLinePointArray(FREQUENCY_ID); 
 arraySize = ARRAY_getBufferSize( pointArray); 
 count_DD = 0; 
 lastPoint= ARRAY_getAt( pointArray,count_DD);; 
 count_DD+=1; 
 while (count_DD < arraySize ) 
 ( 
 POINT_drawLineWithRect_2(lastPoint, ARRAY_getAt( pointArray,count_DD),FREQUENCY_ID); 
 lastPoint = ARRAY_getAt( pointArray,count_DD); 
 count_DD +=1; 
 ); 
); 
function FREQUENCY_drawLinePoints(FREQUENCY_ID) 
 local (x,y,w,h,pointArray,arraySize,count_DD,lastPoint ) 
( 
 pointArray = FREQUENCY_getLinePointArray(FREQUENCY_ID); 
 arraySize = ARRAY_getBufferSize( pointArray); 
 count_DD = 0; 
 lastPoint= ARRAY_getAt( pointArray,count_DD);; 
 count_DD+=1; 
 while (count_DD < arraySize ) 
 ( 
 POINT_drawLineWithRect_2(lastPoint, ARRAY_getAt( pointArray,count_DD),FREQUENCY_ID); 
 lastPoint = ARRAY_getAt( pointArray,count_DD); 
 count_DD +=1; 
 ); 
); 
function _FREQUENCY_resetEqLinePoint (FREQUENCY_ID) 
 local (x,y,w,h,pointArray,arraySize,count_DD,deltaW) 
( 
 pointArray = FREQUENCY_getLinePointArray(FREQUENCY_ID); 
 arraySize = ARRAY_getBufferSize( pointArray); 
 x = RECTANGLE_getX (FREQUENCY_ID); 
 y = RECTANGLE_getY (FREQUENCY_ID); 
 w = RECTANGLE_getWidth (FREQUENCY_ID); 
 h = RECTANGLE_getHeight(FREQUENCY_ID); 
 count_DD = 0; 
 deltaW = w/ arraySize; 
 while (count_DD <arraySize ) 
 ( 
 POINT_setX (ARRAY_getAt(pointArray,count_DD ), x + deltaW * count_DD ); 
 POINT_setY (ARRAY_getAt(pointArray,count_DD ), y +(h/2) ); 
 count_DD +=1; 
 ); 
); 
function FREQUENCY_buildEQPointCurve(FREQUENCY_ID) 
 local ( bzlGroup,countWW_,bzlArray,avalableNum 
 , rbjFilterNum 
 , rbjArray 
 , tempRbjFilter 
 , tempRbjFilter_freq 
 , tempRbjFilter_Q 
 , tempRbjFilter_Gain 
 , tempRbjFilter_Type 
 , rbj_Freq_X 
 , linePointArray 
 , linePointArraySize 
 , count_S 
 , tempPoint 
 , bandWidth_Freq 
 , tempRel_q 
 , tempDb_y 
 , maxRBJ_filterQ 
 , lastX 
 , lastY 
 , distanceDbYfromCY 
 , distanceDbYfromCY_Q 
 , bandWidth_Freq_2 
 ) 
( 
 _FREQUENCY_resetEqLinePoint (FREQUENCY_ID); 
 lastX = RECTANGLE_getX (FREQUENCY_ID); 
 lastY = RECTANGLE_getCenterY(FREQUENCY_ID); 
 rbjArray = FREQUENCY_getChildRbjFilterLineArray (FREQUENCY_ID); 
 rbjFilterNum = ARRAY_getBufferSize(rbjArray); 
 linePointArray = FREQUENCY_getLinePointArray(FREQUENCY_ID); 
 linePointArraySize = ARRAY_getBufferSize(linePointArray); 
 countWW_ = 0; 
 while (countWW_ < rbjFilterNum ) 
 ( 
 tempRbjFilter = ARRAY_getAt ( rbjArray,countWW_); 
 (RBJFILTER_isActive(tempRbjFilter) ==true)? 
 ( 
 tempRbjFilter_freq = RBJFILTER_getFreq (tempRbjFilter); 
 tempRbjFilter_Q = RBJFILTER_getQ (tempRbjFilter); 
 tempRbjFilter_Gain = RBJFILTER_getDBGain (tempRbjFilter); 
 tempRbjFilter_Type = RBJFILTER_getFilterType(tempRbjFilter); 
 maxRBJ_filterQ = RBJFILTER_getMaxFilterQ(tempRbjFilter); 
 distanceDbYfromCY = FREQUENCY_dBToY(FREQUENCY_ID,tempRbjFilter_Gain ) 
 - RECTANGLE_getCenterY(FREQUENCY_ID); 
 distanceDbYfromCY_Q = FREQUENCY_dBToY(FREQUENCY_ID,valueToDecivel(tempRbjFilter_Q)) 
 - RECTANGLE_getCenterY(FREQUENCY_ID); 
 rbj_Freq_X = FREQUENCY_freqToX(FREQUENCY_ID,RBJFILTER_getFreq(tempRbjFilter)) 
 + RECTANGLE_getX( FREQUENCY_ID); 
 ( tempRbjFilter_Type == RBJ_FILTER_TYPE_LPF)? 
 ( 
 bandWidth_Freq_2 = 700; 
 count_S =0; 
 while ( count_S < linePointArraySize ) 
 ( 
 tempPoint = ARRAY_getAt(linePointArray,count_S ); 
 ( POINT_getX(tempPoint) <= rbj_Freq_X-(bandWidth_Freq_2/4) )? 
 ( 
 POINT_setY ( tempPoint 
 , POINT_getY(tempPoint) 
 + distanceDbYfromCY /10 
 ); 
 ):(POINT_getX(tempPoint) < rbj_Freq_X + bandWidth_Freq_2/4*3)? 
 ( 
 tempRel_q = ( POINT_getX(tempPoint) - (rbj_Freq_X-bandWidth_Freq_2/4) ) 
 / bandWidth_Freq_2; 
 POINT_setY ( tempPoint 
 , POINT_getY(tempPoint) 
 + ( inOutCubic(tempRel_q)*RECTANGLE_getHeight(FREQUENCY_ID)) 
 + distanceDbYfromCY/10 
 ); 
 ):( 
 POINT_setY ( tempPoint 
 , POINT_getY(tempPoint)+RECTANGLE_getHeight(FREQUENCY_ID) 
 + distanceDbYfromCY/10 
 ); 
 ); 
 count_S+=1; 
 ); 
 ):( tempRbjFilter_Type == RBJ_FILTER_TYPE_HPF)? 
 ( 
 bandWidth_Freq_2 = 700; 
 count_S =0; 
 while ( count_S < linePointArraySize ) 
 ( 
 tempPoint = ARRAY_getAt(linePointArray,count_S ); 
 ( POINT_getX(tempPoint) >= rbj_Freq_X+(bandWidth_Freq_2/4) )? 
 ( 
 POINT_setY ( tempPoint 
 , POINT_getY(tempPoint) 
 + distanceDbYfromCY /10 
 ); 
 ):(POINT_getX(tempPoint) > rbj_Freq_X - bandWidth_Freq_2/4*3)? 
 ( 
 tempRel_q = ( POINT_getX(tempPoint)- (rbj_Freq_X-bandWidth_Freq_2/4*3) ) 
 / bandWidth_Freq_2; 
 tempRel_q = 1-tempRel_q; 
 POINT_setY ( tempPoint 
 , POINT_getY(tempPoint) 
 + ( inOutCubic(tempRel_q)*RECTANGLE_getHeight(FREQUENCY_ID)) 
 + distanceDbYfromCY /10 
 ); 
 ):( 
 POINT_setY ( tempPoint 
 , POINT_getY(tempPoint) 
 + RECTANGLE_getHeight(FREQUENCY_ID) 
 + distanceDbYfromCY /10 
 ); 
 ); 
 count_S+=1; 
 ); 
 ):( tempRbjFilter_Type == RBJ_FILTER_TYPE_BPF)? 
 ( 
 bandWidth_Freq_2 = 200; 
 count_S =0; 
 while ( count_S < linePointArraySize ) 
 ( 
 tempPoint = ARRAY_getAt(linePointArray,count_S ); 
 ( POINT_getX(tempPoint) <= rbj_Freq_X-(bandWidth_Freq_2) )? 
 ( 
 POINT_setY ( tempPoint 
 , POINT_getY(tempPoint)+RECTANGLE_getHeight(FREQUENCY_ID)/2); 
 ):( POINT_getX(tempPoint) > rbj_Freq_X - bandWidth_Freq_2 
 && POINT_getX(tempPoint) < rbj_Freq_X )? 
 ( 
 tempRel_q = ( POINT_getX(tempPoint)- (rbj_Freq_X-bandWidth_Freq_2) ) 
 / bandWidth_Freq_2; 
 tempRel_q = 1-tempRel_q; 
 POINT_setY ( tempPoint 
 , POINT_getY(tempPoint)+ ( inOutCubic(tempRel_q)*RECTANGLE_getHeight(FREQUENCY_ID))/2 ); 
 ):( POINT_getX(tempPoint) < rbj_Freq_X +bandWidth_Freq_2)? 
 ( 
 tempRel_q = ( POINT_getX(tempPoint)- (rbj_Freq_X) ) 
 / bandWidth_Freq_2; 
 POINT_setY ( tempPoint 
 , POINT_getY(tempPoint)+ ( inOutCubic(tempRel_q)*RECTANGLE_getHeight(FREQUENCY_ID))/2 ); 
 ):( 
 POINT_setY ( tempPoint 
 , POINT_getY(tempPoint)+RECTANGLE_getHeight(FREQUENCY_ID)/2); 
 ); 
 count_S+=1; 
 ); 
 ):( tempRbjFilter_Type == RBJ_FILTER_TYPE_NOTCH)? 
 ( 
 bandWidth_Freq_2 = 60; 
 count_S =0; 
 while ( count_S < linePointArraySize ) 
 ( 
 tempPoint = ARRAY_getAt(linePointArray,count_S ); 
 ( POINT_getX(tempPoint) <= rbj_Freq_X-(bandWidth_Freq_2) )? 
 ( 
 0; 
 ):( POINT_getX(tempPoint) > rbj_Freq_X - bandWidth_Freq_2 
 && POINT_getX(tempPoint) < rbj_Freq_X )? 
 ( 
 tempRel_q = ( POINT_getX(tempPoint)- (rbj_Freq_X-bandWidth_Freq_2) ) 
 / bandWidth_Freq_2; 
 tempRel_q = 1-tempRel_q; 
 POINT_setY ( tempPoint 
 , POINT_getY(tempPoint) 
 - ( inOutCubic(tempRel_q)*RECTANGLE_getHeight(FREQUENCY_ID))/2 
 + RECTANGLE_getHeight(FREQUENCY_ID)/2 
 ); 
 ):( POINT_getX(tempPoint) < rbj_Freq_X +bandWidth_Freq_2)? 
 ( 
 tempRel_q = ( POINT_getX(tempPoint)- (rbj_Freq_X) ) 
 / bandWidth_Freq_2; 
 POINT_setY ( tempPoint 
 , POINT_getY(tempPoint) 
 - ( inOutCubic(tempRel_q)*RECTANGLE_getHeight(FREQUENCY_ID))/2 
 + RECTANGLE_getHeight(FREQUENCY_ID)/2 
 ); 
 ):( 
 0; 
 ); 
 count_S+=1; 
 ); 
 ):( tempRbjFilter_Type == RBJ_FILTER_TYPE_APF)? 
 ( 
 0; 
 ):( tempRbjFilter_Type == RBJ_FILTER_TYPE_PEAK)? 
 ( 
 bandWidth_Freq_2 = 5+ 30 * (maxRBJ_filterQ-tempRbjFilter_Q ); 
 tempDb_y = FREQUENCY_dBToY(FREQUENCY_ID,tempRbjFilter_Gain ) 
 - RECTANGLE_getCenterY(FREQUENCY_ID);; 
 tempDb_y *=-1; 
 count_S =0; 
 while ( count_S < linePointArraySize ) 
 ( 
 tempPoint = ARRAY_getAt(linePointArray,count_S ); 
 ( POINT_getX(tempPoint) <= rbj_Freq_X-(bandWidth_Freq_2) )? 
 ( 
 0; 
 ):( POINT_getX(tempPoint) > rbj_Freq_X - bandWidth_Freq_2 
 && POINT_getX(tempPoint) < rbj_Freq_X )? 
 ( 
 tempRel_q = ( POINT_getX(tempPoint)- (rbj_Freq_X-bandWidth_Freq_2) ) 
 / bandWidth_Freq_2; 
 tempRel_q = 1-tempRel_q; 
 POINT_setY ( tempPoint 
 , POINT_getY(tempPoint) -tempDb_y 
 + inOutCubic(tempRel_q)*tempDb_y 
 ); 
 ):( POINT_getX(tempPoint) < rbj_Freq_X +bandWidth_Freq_2)? 
 ( 
 tempRel_q = ( POINT_getX(tempPoint)- (rbj_Freq_X) ) 
 / bandWidth_Freq_2; 
 POINT_setY ( tempPoint 
 , POINT_getY(tempPoint)- tempDb_y 
 + inOutCubic(tempRel_q)*tempDb_y 
 ); 
 ):( 
 0; 
 ); 
 count_S+=1; 
 ); 
 ):( tempRbjFilter_Type == RBJ_FILTER_TYPE_LSF)? 
 ( 
 bandWidth_Freq_2 = 50+ 200 * (maxRBJ_filterQ-tempRbjFilter_Q ); 
 count_S =0; 
 while ( count_S < linePointArraySize ) 
 ( 
 tempPoint = ARRAY_getAt(linePointArray,count_S ); 
 ( POINT_getX(tempPoint) >= rbj_Freq_X+(bandWidth_Freq_2/2) )? 
 ( 
 0; 
 ):(POINT_getX(tempPoint) > rbj_Freq_X - bandWidth_Freq_2/2)? 
 ( 
 tempRel_q = ( POINT_getX(tempPoint)- (rbj_Freq_X-bandWidth_Freq_2/2) ) 
 / bandWidth_Freq_2; 
 tempRel_q = 1-tempRel_q; 
 POINT_setY ( tempPoint 
 , POINT_getY(tempPoint) 
 + inOutCubic(tempRel_q) *distanceDbYfromCY 
 ); 
 ):( 
 POINT_setY ( tempPoint 
 , POINT_getY(tempPoint) 
 + distanceDbYfromCY); 
 ); 
 count_S+=1; 
 ); 
 ):( tempRbjFilter_Type == RBJ_FILTER_TYPE_HSF)? 
 ( 
 bandWidth_Freq_2 = 50+ 200 * (maxRBJ_filterQ-tempRbjFilter_Q ); 
 count_S =0; 
 while ( count_S < linePointArraySize ) 
 ( 
 tempPoint = ARRAY_getAt(linePointArray,count_S ); 
 ( POINT_getX(tempPoint) <= rbj_Freq_X-(bandWidth_Freq_2/4) )? 
 ( 
 0; 
 ):(POINT_getX(tempPoint) < rbj_Freq_X + bandWidth_Freq_2/4*3)? 
 ( 
 tempRel_q = ( POINT_getX(tempPoint) - (rbj_Freq_X-bandWidth_Freq_2/4) ) 
 / bandWidth_Freq_2; 
 POINT_setY ( tempPoint 
 , POINT_getY(tempPoint) 
 + inOutCubic(tempRel_q)*distanceDbYfromCY 
 ); 
 ):( 
 POINT_setY ( tempPoint 
 , POINT_getY(tempPoint) 
 + distanceDbYfromCY); 
 ); 
 count_S+=1; 
 ); 
 ); 
 ); 
 countWW_+=1; 
 ); 
); 
function FREQUENCY_processFilter(FREQUENCY_ID,inSample) 
 local(rbjArray,out.rbjNum,count_CC,rbjFilter) 
( 
 rbjArray = FREQUENCY_getChildRbjFilterLineArray (FREQUENCY_ID); 
 rbjNum = ARRAY_getBufferSize(rbjArray ); 
 count_CC = 0; 
 out = inSample; 
 while (count_CC < rbjNum ) 
 ( 
 rbjFilter = ARRAY_getAt(rbjArray,count_CC); 
 ( RBJFILTER_isActive(rbjFilter) ==true)? 
 ( 
 out = RBJFILTER_process (rbjFilter,out ); 
 ); 
 count_CC+=1; 
 ); 
 out; 
); 
function FREQUENCY_changeRbjFilter(FREQUENCY_ID,index,sampleRate,freq,Q,Gain,type,isActive) local(rbjArray) 
( 
 rbjArray = FREQUENCY_getChildRbjFilterLineArray (FREQUENCY_ID); 
 RBJFILTER_setFreq (ARRAY_getAt(rbjArray,index),freq); 
 RBJFILTER_setQ (ARRAY_getAt(rbjArray,index),Q); 
 RBJFILTER_setDBGain (ARRAY_getAt(rbjArray,index),Gain); 
 RBJFILTER_setFilterType (ARRAY_getAt(rbjArray,index),type); 
 RBJFILTER_setSampleRate (ARRAY_getAt(rbjArray,index),sampleRate); 
 RBJFILTER_setActive (ARRAY_getAt(rbjArray,index),isActive); 
 FREQUENCY_buildEQPointCurve(FREQUENCY_ID); 
); 
function FREQUENCY_changeRbjFilter_Freq(FREQUENCY_ID,index,freq) local(rbjArray) 
( 
 rbjArray = FREQUENCY_getChildRbjFilterLineArray (FREQUENCY_ID); 
 RBJFILTER_setFreq (ARRAY_getAt(rbjArray,index),freq); 
 FREQUENCY_buildEQPointCurve(FREQUENCY_ID); 
); 
function FREQUENCY_changeRbjFilter_Q(FREQUENCY_ID,index,Q) local(rbjArray) 
( 
 rbjArray = FREQUENCY_getChildRbjFilterLineArray (FREQUENCY_ID); 
 RBJFILTER_setQ (ARRAY_getAt(rbjArray,index),Q); 
 FREQUENCY_buildEQPointCurve(FREQUENCY_ID); 
); 
function FREQUENCY_changeRbjFilter_dBGain(FREQUENCY_ID,index,Gain) local(rbjArray) 
( 
 rbjArray = FREQUENCY_getChildRbjFilterLineArray (FREQUENCY_ID); 
 RBJFILTER_setDBGain (ARRAY_getAt(rbjArray,index),Gain); 
 FREQUENCY_buildEQPointCurve(FREQUENCY_ID); 
); 
function FREQUENCY_changeRbjFilter_FilterType(FREQUENCY_ID,index,type) local(rbjArray) 
( 
 rbjArray = FREQUENCY_getChildRbjFilterLineArray (FREQUENCY_ID); 
 RBJFILTER_setFilterType (ARRAY_getAt(rbjArray,index),type); 
 FREQUENCY_buildEQPointCurve(FREQUENCY_ID); 
); 
function FREQUENCY_changeRbjFilter_SampleRate(FREQUENCY_ID,index,sampleRate) local(rbjArray) 
( 
 rbjArray = FREQUENCY_getChildRbjFilterLineArray (FREQUENCY_ID); 
 RBJFILTER_setSampleRate (ARRAY_getAt(rbjArray,index),sampleRate); 
 FREQUENCY_buildEQPointCurve(FREQUENCY_ID); 
); 
function FREQUENCY_changeRbjFilter_activeState(FREQUENCY_ID,index,isActive) local(rbjArray) 
( 
 rbjArray = FREQUENCY_getChildRbjFilterLineArray (FREQUENCY_ID); 
 RBJFILTER_setActive (ARRAY_getAt(rbjArray,index),isActive); 
 FREQUENCY_buildEQPointCurve(FREQUENCY_ID); 
); 
function FREQUENCY_drawRBJFilterCircle( FREQUENCY_ID) 
 local (rbjArray, arraySize, count_r,x_,y_,rbjFilter,radius) 
( 
 rbjArray = FREQUENCY_getChildRbjFilterLineArray (FREQUENCY_ID); 
 arraySize = ARRAY_getBufferSize(rbjArray); 
 count_r = 0; 
 radius = 5; 
 while ( count_r < arraySize) 
 ( 
 rbjFilter = ARRAY_getAt(rbjArray, count_r) ; 
 (RBJFILTER_isActive(rbjFilter) ==true)? 
 ( 
 x_ = FREQUENCY_freqToX(FREQUENCY_ID,RBJFILTER_getFreq(rbjFilter)) 
 +RECTANGLE_getX( FREQUENCY_ID); 
 ( RBJFILTER_getFilterType( rbjFilter) == RBJ_FILTER_TYPE_PEAK 
 || RBJFILTER_getFilterType( rbjFilter) == RBJ_FILTER_TYPE_LSF 
 || RBJFILTER_getFilterType( rbjFilter) == RBJ_FILTER_TYPE_HSF 
 || RBJFILTER_getFilterType( rbjFilter) == RBJ_FILTER_TYPE_LPF 
 || RBJFILTER_getFilterType( rbjFilter) == RBJ_FILTER_TYPE_HPF 
 )? 
 ( 
 y_ = FREQUENCY_dBToY(FREQUENCY_ID,RBJFILTER_getDBGain(rbjFilter) ); 
 ):( 
 y_ = RECTANGLE_getCentery(FREQUENCY_ID); 
 ); 
 ( RECTANGLE_isContainPoint(FREQUENCY_ID,x_,y_ ) ==true) ? 
 ( 
 COMPONENT_changeColorGfx( FREQUENCY_ID,"white"); 
 gfx_circle( x_ 
 , y_ 
 ,radius +3 
 ,true 
 ); 
 COMPONENT_changeColorGfx( FREQUENCY_ID,"black"); 
 gfx_circle( x_ 
 , y_ 
 ,radius +3 
 ,false 
 ); 
 COMPONENT_changeColorGfx( FREQUENCY_ID,"red"); 
 gfx_circle( x_ 
 , y_ 
 ,radius 
 ,true 
 ); 
 COMPONENT_changeColorGfx( FREQUENCY_ID,"black"); 
 gfx_circle( x_ 
 , y_ 
 ,radius 
 ,false 
 ); 
 ); 
 ); 
 count_r += 1; 
 ); 
); 
function _FREQUENCY_prepareRBJFilterArray(targetArray,maxSize) 
local (count_xx,temp,xDelta,sampleRate_) 
( 
 count_xx =0; 
 sampleRate_ = (srate != 0) ? srate:44100; 
 while( count_xx < maxSize) 
 ( 
 temp = RBJFILTER_create(sampleRate_); 
 ARRAY_push_back( targetArray,temp ); 
 RBJFILTER_setActive (temp,false); 
 RBJFILTER_setFreq (temp,300); 
 RBJFILTER_setQ (temp,1); 
 RBJFILTER_setDBGain (temp,rand()*12-6); 
 count_xx += 1; 
 ); 
); 
function _FREQUENCY_prepareLinePointArray(targetArray,maxSize) 
local (count_xx,temp) 
( 
 count_xx =0; 
 while( count_xx < maxSize) 
 ( 
 temp = POINT_create(0,0); 
 ARRAY_push_back( targetArray,temp ); 
 count_xx += 1; 
 ); 
); 
function FREQUENCY_create(name) 
 local ( FREQUENCY_ID 
 , baseClassElementNum 
 , childRbjFilterArray 
 , linePointArray 
 , maxRbjFilterNum 
 , maxLinePointNum 
 , maxFFTSIze 
 , FFT_sampleBUF 
 , windowArray 
 , fft_WorkSpaceBuff 
 , fftAnalizeLinePoint 
 ) 
( 
 maxRbjFilterNum = 32; 
 maxLinePointNum = 1024; 
 maxFFTSIze = 1024*2; 
 childRbjFilterArray = ARRAY_create(maxRbjFilterNum); 
 linePointArray = ARRAY_create(maxLinePointNum); 
 FFT_sampleBUF = CURSOLBUFFER_create(maxFFTSIze); 
 windowArray = ARRAY_create(maxFFTSIze); 
 fft_WorkSpaceBuff = ARRAY_create(maxFFTSIze*4); 
 fftAnalizeLinePoint = ARRAY_create(maxFFTSIze); 
 _FREQUENCY_prepareRBJFilterArray(childRbjFilterArray,maxRbjFilterNum); 
 _FREQUENCY_prepareLinePointArray(linePointArray,maxLinePointNum); 
 FREQUENCY_ID = COMPONENT_create(name); 
 STATIC_MASTER_BUFF[FREQUENCY_ID ] = "FREQUENCY"; 
 baseClassElementNum =_COMPONENT_getElementNum(FREQUENCY_ID); 
 STATIC_MASTER_BUFF[FREQUENCY_ID + 1] = baseClassElementNum +9; 
 STATIC_MASTER_BUFF[FREQUENCY_ID + baseClassElementNum + 1] = STATIC_MASTER_BUFF[FREQUENCY_ID + 1]; 
 STATIC_MASTER_BUFF[FREQUENCY_ID + baseClassElementNum + 2] = childRbjFilterArray; 
 STATIC_MASTER_BUFF[FREQUENCY_ID + baseClassElementNum + 3] = linePointArray ; 
 STATIC_MASTER_BUFF[FREQUENCY_ID + baseClassElementNum + 4] = maxFFTSIze ; 
 STATIC_MASTER_BUFF[FREQUENCY_ID + baseClassElementNum + 5] = 0; 
 STATIC_MASTER_BUFF[FREQUENCY_ID + baseClassElementNum + 6] = FFT_sampleBUf ; 
 STATIC_MASTER_BUFF[FREQUENCY_ID + baseClassElementNum + 7] = windowArray ; 
 STATIC_MASTER_BUFF[FREQUENCY_ID + baseClassElementNum + 8] = fft_WorkSpaceBuff; 
 STATIC_MASTER_BUFF[FREQUENCY_ID + baseClassElementNum + 9] = fftAnalizeLinePoint; 
 STATIC_MASTER_BUFF_ID += STRUCT_getElementNum (FREQUENCY_ID)+1; 
 _FREQUENCY_resetEqLinePoint (FREQUENCY_ID); 
 _FREQUENCY_prepareFFTAnalizeLinePoint( FREQUENCY_ID) ; 
 _FREQUENCY_buildWindowArray(FREQUENCY_ID ); 
 _FREQUENCY_buildFftAnalyzeLinePoint(FREQUENCY_ID ) ; 
 FREQUENCY_ID; 
); 
function FREQUENCY_update(FREQUENCY_ID) 
( 
 COMPONENT_update( FREQUENCY_ID); 
); 
function FREQUENCY_resized(FREQUENCY_ID,parrentRECT ) 
( 
 FREQUENCY_buildEQPointCurve(FREQUENCY_ID); 
 _FREQUENCY_buildFftAnalyzeLinePoint(FREQUENCY_ID ) ; 
); 
function FREQUENCY_draw(FREQUENCY_ID) 
 local ( tempText 
 , freq 
 , maxFreq 
 , textEndX 
 , textLableHz 
 , textlabelW 
 , textlabelH 
 , tx 
 , last_a,last_r,last_g,last_b 
 , db 
 , db_Y 
 , db_Text 
 , sampleRate_ 
 , mouseHZ_Text 
 , mouseHZ 
 ) 
( 
 last_a=gfx_a;last_r=gfx_r;last_g=gfx_g;last_b=gfx_b; 
 COMPONENT_changeColorGfx( FREQUENCY_ID,"white"); 
 RECTANGLE_drawFill( FREQUENCY_ID,true); 
 freq =20; 
 sampleRate_ = (srate != 0) ? srate:44100; 
 maxFreq = sampleRate_ /2; 
 COMPONENT_changeColorGfx( FREQUENCY_ID,"red"); 
 FREQUENCY_drawFftAnalyseLinePoints(FREQUENCY_ID); 
 COMPONENT_changeColorGfx( FREQUENCY_ID,"black"); 
 RECTANGLE_drawLine ( FREQUENCY_ID,true); 
 RECTANGLE_drawCenterLine ( FREQUENCY_ID); 
 textEndX = 0; 
 textLableHz = #; 
 textlabelW = 0; 
 textlabelH = 0; 
 tx = 0; 
 while ( freq < maxFreq ) 
 ( 
 COMPONENT_changeColorGfx( FREQUENCY_ID,"black"); 
 tx = FREQUENCY_freqToX(FREQUENCY_ID,freq ) +RECTANGLE_getX(FREQUENCY_ID); 
 gfx_line( tx 
 , RECTANGLE_getY(FREQUENCY_ID) 
 , tx 
 , RECTANGLE_getY2(FREQUENCY_ID)- gfx_texth-3 
 ); 
 ( tx > RECTANGLE_getX(FREQUENCY_ID) 
 && tx > textEndX 
 && freq !=40 
 && freq !=4000 
 && (freq <400 || freq >= 1000 || freq == 500) 
 && (freq <6000 || freq >= 10000) ) ? 
 ( 
 COMPONENT_changeColorGfx( FREQUENCY_ID,"black"); 
 gfx_x = tx ; 
 gfx_y = RECTANGLE_getY2(FREQUENCY_ID)-gfx_texth-1; 
 ( freq >=1000) ? sprintf(textLableHz,"%dkHz",freq*.001) : sprintf(textLableHz,"%dkHz",freq); 
 gfx_measurestr(textLableHz,textlabelW,textlabelH) ; 
 ( gfx_x +textlabelW < RECTANGLE_getX2(FREQUENCY_ID) )? 
 ( 
 COMPONENT_changeColorGfx( FREQUENCY_ID,"black"); 
 gfx_rect ( gfx_x,gfx_y-2 
 , textlabelW+2 
 , textlabelH+2 ); 
 COMPONENT_changeColorGfx( FREQUENCY_ID,"white"); 
 gfx_x += 1 ; 
 gfx_printf(textLableHz); 
 ); 
 textEndX = gfx_x; 
 ); 
 freq += (freq<100?10:freq<1000?100:freq<10000?1000:5000); 
 ); 
 COMPONENT_changeColorGfx( FREQUENCY_ID,"black"); 
 db = -9; 
 while ( db < 12) 
 ( 
 db_Y = FREQUENCY_dBToY(FREQUENCY_ID,db ); 
 gfx_line(RECTANGLE_getX(FREQUENCY_ID),db_Y,RECTANGLE_getX2(FREQUENCY_ID)-1,db_Y,true); 
 db_Text = #; 
 gfx_x=RECTANGLE_getX(FREQUENCY_ID)+3; 
 gfx_y=db_Y+3; 
 gfx_printf( "%+ddB",db); 
 db +=3; 
 ); 
 COMPONENT_changeColorGfx( FREQUENCY_ID,"blue"); 
 FREQUENCY_drawLinePoints(FREQUENCY_ID); 
 FREQUENCY_drawRBJFilterCIrcle( FREQUENCY_ID); 
 COMPONENT_changeColorGfx( FREQUENCY_ID,"black"); 
 mouseHZ_Text = #; 
 ( RECTANGLE_isContainMouse( FREQUENCY_ID) ==true)? 
 ( 
 mouseHZ = FREQUENCY_XtoFreq(FREQUENCY_ID,mouse_x ); 
 ( mouseHZ >=1000) ? sprintf(mouseHZ_Text,"%dkHz",mouseHZ*.001) : sprintf(mouseHZ_Text,"%dkHz",mouseHZ); 
 gfx_x=RECTANGLE_getX(FREQUENCY_ID)+3; 
 gfx_y=RECTANGLE_getY(FREQUENCY_ID)+3; 
 sprintf(mouseHZ_Text, "cursol %dHz %+2.2fdB" 
 , FREQUENCY_XtoFreq(FREQUENCY_ID,mouse_x ) 
 , FREQUENCY_YtoDB (FREQUENCY_ID,mouse_y )); 
 gfx_measurestr(mouseHZ_Text,textlabelW,textlabelH) ; 
 gfx_rect ( RECTANGLE_getX(FREQUENCY_ID) 
 , RECTANGLE_getY(FREQUENCY_ID) 
 , textlabelW +6 
 , textlabelH +6 
 ); 
 COMPONENT_changeColorGfx( FREQUENCY_ID,"white"); 
 gfx_printf(mouseHZ_Text); 
 COMPONENT_changeColorGfx( FREQUENCY_ID,"black"); 
 gfx_rect ( mouse_x+12 
 , mouse_y-6 
 , textlabelW +6 
 , textlabelH +6 
 ); 
 gfx_x = mouse_x+12+3; 
 gfx_y = mouse_y-6+3; 
 COMPONENT_changeColorGfx( FREQUENCY_ID,"white"); 
 gfx_printf(mouseHZ_Text); 
 ):( 
 COMPONENT_changeColorGfx( FREQUENCY_ID,"black"); 
 gfx_measurestr(mouseHZ_Text,textlabelW,textlabelH) ; 
 gfx_rect ( RECTANGLE_getX(FREQUENCY_ID) 
 , RECTANGLE_getY(FREQUENCY_ID) 
 , textlabelW +6 
 , textlabelH +6 
 ); 
 sprintf(mouseHZ_Text, "cursol ---Hz ---dB"); 
 gfx_x=RECTANGLE_getX(FREQUENCY_ID)+3; 
 gfx_y=RECTANGLE_getY(FREQUENCY_ID)+3; 
 COMPONENT_changeColorGfx( FREQUENCY_ID,"white"); 
 gfx_printf(mouseHZ_Text); 
 ); 
 gfx_a=last_a;gfx_r=last_r;gfx_g=last_g;gfx_b=last_b; 
); 
function FREQUENCY_mouseMoved(FREQUENCY_ID,MOUSEINFO_ID) 
( 
 ( RECTANGLE_isContainMouse(FREQUENCY_ID) ==true) ? 
 ( 
 DBG(" Mouse Moved on Frequency Component"); 
 ); 
); 
function FREQUENCY_mouseButtonPressd(FREQUENCY_ID,MOUSEINFO_ID )local(circle_Area_ID) 
( 
 ( RECTANGLE_isContainMouse(FREQUENCY_ID) ==true) ? 
 ( 
 SetLastMousePressdComponent(FREQUENCY_ID); 
 DBG(" Mouse Button Press on Frequency Component"); 
 COMPONENT_setIsMousePressStartedInThisComp(FREQUENCY_ID,true); 
 ):( 
 COMPONENT_setIsMousePressStartedInThisComp(FREQUENCY_ID,false); 
 ); 
); 
function FREQUENCY_mouseButtonReleased( FREQUENCY_ID,MOUSEINFO_ID )local (tempstr) 
( 
 ( RECTANGLE_isContainMouse(FREQUENCY_ID) ==true) ? 
 ( 
 DBG(" Mouse Button Released on Frequency Component"); 
 SetLastMouseReleasedComponent(FREQUENCY_ID); 
 ); 
); 
function FREQUENCY_mouseWheeled(FREQUENCY_ID,MOUSEINFO_ID ) 
( 
 ( RECTANGLE_isContainMouse(FREQUENCY_ID) ==true) ? 
 ( 
 DBG(" Mouse Wheeld on Frequency Component"); 
 SetLastMouseWheeledComponent(FREQUENCY_ID); 
 ); 
); 
function LAYER_create(name) 
 local (LAYER_ID,_childComponentBUFF,name_,_lastRectangle_ID,baseClassElementNum) 
( 
 _childComponentBUFF =ARRAY_create(1000); 
 _lastRectangle_ID = RECTANGLE_create(0,0,-100,-100); 
 LAYER_ID = RECTANGLE_create(-1000,-1000,gfx_w,gfx_h); 
 baseClassElementNum =_RECTANGLE_getElementNum(LAYER_ID); 
 STATIC_MASTER_BUFF[LAYER_ID ] = "LAYER"; 
 STATIC_MASTER_BUFF[LAYER_ID + 1] = baseClassElementNum + 8; 
 STATIC_MASTER_BUFF[LAYER_ID + baseClassElementNum + 1] = _childComponentBUFF; 
 STATIC_MASTER_BUFF[LAYER_ID + baseClassElementNum + 2] = name; 
 STATIC_MASTER_BUFF[LAYER_ID + baseClassElementNum + 3] = 0; 
 STATIC_MASTER_BUFF[LAYER_ID + baseClassElementNum + 4] = 0; 
 STATIC_MASTER_BUFF[LAYER_ID + baseClassElementNum + 5] = true; 
 STATIC_MASTER_BUFF[LAYER_ID + baseClassElementNum + 6] = false; 
 STATIC_MASTER_BUFF[LAYER_ID + baseClassElementNum + 7] = _lastRectangle_ID; 
 STATIC_MASTER_BUFF[LAYER_ID + baseClassElementNum + 8] = STATIC_MASTER_BUFF[LAYER_ID + 1]; 
 STATIC_MASTER_BUFF_ID += STRUCT_getElementNum (LAYER_ID)+1; 
 LAYER_ID; 
); 
function _LAYER_getElementNum(LAYER_ID) ( STATIC_MASTER_BUFF[LAYER_ID +_RECTANGLE_getElementNum(LAYER_ID) + 8];); 
function _LAYER_getLastLayerAreaRect(LAYER_ID)( STATIC_MASTER_BUFF[LAYER_ID +_RECTANGLE_getElementNum(LAYER_ID) + 7];); 
function LAYER_getParrentApp ( LAYER_ID) ( STATIC_MASTER_BUFF[LAYER_ID +_RECTANGLE_getElementNum(LAYER_ID) + 3];); 
function LAYER_setParrentApp ( LAYER_ID,p) ( STATIC_MASTER_BUFF[LAYER_ID +_RECTANGLE_getElementNum(LAYER_ID) + 3]=p;); 
function LAYER_getIsResized ( LAYER_ID) ( STATIC_MASTER_BUFF[LAYER_ID +_RECTANGLE_getElementNum(LAYER_ID) + 6];); 
function LAYER_setIsResized ( LAYER_ID,b) ( STATIC_MASTER_BUFF[LAYER_ID +_RECTANGLE_getElementNum(LAYER_ID) + 6]=b;); 
function LAYER_isResized ( LAYER_ID) ( LAYER_getIsResized(LAYER_ID);); 
function LAYER_isAreaResized ( LAYER_ID) ( LAYER_isResized(LAYER_ID);); 
function LAYER_isActive(LAYER_ID) ( STATIC_MASTER_BUFF[LAYER_ID+_RECTANGLE_getElementNum(LAYER_ID)+5];); 
function LAYER_getIsActive(LAYER_ID) ( LAYER_isActive(LAYER_ID);); 
function LAYER_setIsActive(LAYER_ID,v) 
( 
 STATIC_MASTER_BUFF[LAYER_ID + _RECTANGLE_getElementNum(LAYER_ID) + 5]=v; 
 LAYER_setIsResized(LAYER_ID,v); 
 DBG("ACTIVE_CAHNGE"); 
); 
function LAYER_setActive(LAYER_ID,v)( LAYER_setIsActive(LAYER_ID,v););; 
function LAYER_toggleIsActive( LAYER_ID) 
( 
 LAYER_setIsActive( LAYER_ID 
 ,(LAYER_getIsActive(LAYER_ID) == false) 
 ); 
); 
function LAYER_getName(LAYER_ID) ( STATIC_MASTER_BUFF[LAYER_ID +_RECTANGLE_getElementNum(LAYER_ID) + 2];); 
function LAYER_getChildComponentArray(LAYER_ID)( STATIC_MASTER_BUFF[LAYER_ID +_RECTANGLE_getElementNum(LAYER_ID) + 1];); 
function LAYER_getChildCount(LAYER_ID) local ( childCompoArray_ID,childNUM) 
( 
 childCompoArray_ID = LAYER_getChildComponentArray(LAYER_ID); 
 childNUM = ARRAY_getBufferSize(childCompoArray_ID); 
 childNUM; 
); 
function LAYER_addChildComponent(LAYER_ID,childLAYER_ID) 
 local ( childCompoArray_ID,count_,childNUM,temp_A,check) 
( 
 childCompoArray_ID = LAYER_getChildComponentArray(LAYER_ID); 
 childNUM = ARRAY_getBufferSize(childCompoArray_ID); 
 count_ =1; 
 check = false; 
 while ( count_ <= childNUM) 
 ( 
 temp_A = ARRAY_getAt(childCompoArray_ID,count_) ; 
 ( childLAYER_ID == temp_A)? 
 ( 
 check =true; 
 count_ = childNUM+100; 
 ); 
 count_ +=1; 
 ); 
 (check ==false)? 
 ( 
 ARRAY_push_back(childCompoArray_ID,childLAYER_ID); 
 COMPONENT_setParrentLAYRE(childLAYER_ID,LAYER_ID); 
 ); 
); 
function LAYER_removeChildComponent(LAYER_ID,childLAYER_ID) 
 local(childCompoArray_ID,count_,childNUM,temp_A) 
( 
 childCompoArray_ID = LAYER_getChildComponentArray(LAYER_ID); 
 childNUM = ARRAY_getBufferSize(childCompoArray_ID); 
 count_ = 0; 
 while ( count_ <= childNUM) 
 ( 
 temp_A = ARRAY_getAt(childCompoArray_ID,count_) ; 
 ( childLAYER_ID == temp_A)? 
 ( 
 DBGMESSAGE_add(DBG,"true" ); 
 DBGMESSAGE_addFloat(DBG, count_ ); 
 ARRAY_removeAt(childCompoArray_ID,count_); 
 COMPONENT_setParrentLAYRE(childLAYER_ID,-123456); 
 count_ = childNUM+100; 
 ); 
 count_ +=1; 
 ); 
); 
function _LAYER_update(LAYER_ID,targetCOMPONENT_ID ) 
 local (struct_Type) 
( 
 ( COMPONENT_isActive(targetCOMPONENT_ID) == true )? 
 ( 
 struct_Type = STRUCT_getStructType( targetCOMPONENT_ID ); 
 ( strcmp(struct_Type ,"COMPONENT")== 0 )? 
 ( 
 COMPONENT_update(targetCOMPONENT_ID); 
 ):(strcmp(struct_Type ,"SLIDER")== 0 )? 
 ( 
 SLIDER_update(targetCOMPONENT_ID); 
 ):(strcmp(struct_Type ,"SLIDERTYPE2")== 0 )? 
 ( 
 SLIDERTYPE2_update(targetCOMPONENT_ID); 
 ):(strcmp(struct_Type ,"XYSLIDER")== 0 )? 
 ( 
 XYSLIDER_update(targetCOMPONENT_ID); 
 ):(strcmp(struct_Type ,"BUTTON")== 0 )? 
 ( 
 BUTTON_update(targetCOMPONENT_ID); 
 ):(strcmp(struct_Type ,"TEXT")== 0 )? 
 ( 
 TEXT_update(targetCOMPONENT_ID); 
 ):( strcmp(struct_Type ,"KNOB")== 0 )? 
 ( 
 KNOB_update(targetCOMPONENT_ID); 
 ):( strcmp(struct_Type ,"BUTTONGROUP")== 0 )? 
 ( 
 BUTTONGROUP_update(targetCOMPONENT_ID); 
 ):( strcmp(struct_Type ,"FREQUENCY")== 0 )? 
 ( 
 FREQUENCY_update(targetCOMPONENT_ID); 
 ) 
 ; 
 ); 
); 
function _LAYER_resized(LAYER_ID,targetCOMPONENT_ID,parrentRECT ) 
 local (struct_Type) 
( 
 ( COMPONENT_isActive(targetCOMPONENT_ID) == true )? 
 ( 
 struct_Type = STRUCT_getStructType( targetCOMPONENT_ID ); 
 ( strcmp(struct_Type ,"COMPONENT")== 0 )? 
 ( 
 COMPONENT_resized(targetCOMPONENT_ID,LAYER_ID); 
 ):(strcmp(struct_Type ,"SLIDER")== 0 )? 
 ( 
 SLIDER_resized(targetCOMPONENT_ID,LAYER_ID); 
 ):(strcmp(struct_Type ,"SLIDERTYPE2")== 0 )? 
 ( 
 SLIDERTYPE2_resized(targetCOMPONENT_ID,LAYER_ID); 
 ):(strcmp(struct_Type ,"XYSLIDER")== 0 )? 
 ( 
 XYSLIDER_resized(targetCOMPONENT_ID,LAYER_ID); 
 ):(strcmp(struct_Type ,"BUTTON")== 0 )? 
 ( 
 BUTTON_resized(targetCOMPONENT_ID,LAYER_ID); 
 ):(strcmp(struct_Type ,"TEXT")== 0 )? 
 ( 
 TEXT_resized(targetCOMPONENT_ID,LAYER_ID); 
 ):( strcmp(struct_Type ,"KNOB")== 0 )? 
 ( 
 KNOB_resized(targetCOMPONENT_ID,LAYER_ID); 
 ):( strcmp(struct_Type ,"BUTTONGROUP")== 0 )? 
 ( 
 BUTTONGROUP_resized(targetCOMPONENT_ID,LAYER_ID); 
 ):( strcmp(struct_Type ,"FREQUENCY")== 0 )? 
 ( 
 FREQUENCY_resized(targetCOMPONENT_ID,LAYER_ID); 
 ) 
 ; 
 ); 
); 
function _LAYER_draw(LAYER_ID,targetCOMPONENT_ID)local (struct_Type) 
( 
 ( COMPONENT_isActive(targetCOMPONENT_ID) == true )? 
 ( 
 struct_Type = STRUCT_getStructType( targetCOMPONENT_ID ); 
 ( strcmp(struct_Type ,"COMPONENT")== 0 )? 
 ( 
 COMPONENT_draw(targetCOMPONENT_ID); 
 ):(strcmp(struct_Type ,"SLIDER")== 0 )? 
 ( 
 SLIDER_draw(targetCOMPONENT_ID); 
 ):(strcmp(struct_Type ,"SLIDERTYPE2")== 0 )? 
 ( 
 SLIDERTYPE2_draw(targetCOMPONENT_ID); 
 ):(strcmp(struct_Type ,"XYSLIDER")== 0 )? 
 ( 
 XYSLIDER_draw(targetCOMPONENT_ID); 
 ):(strcmp(struct_Type ,"BUTTON")== 0 )? 
 ( 
 BUTTON_draw(targetCOMPONENT_ID); 
 ):(strcmp(struct_Type ,"TEXT")== 0 )? 
 ( 
 TEXT_draw(targetCOMPONENT_ID); 
 ):(strcmp(struct_Type ,"KNOB")== 0 )? 
 ( 
 KNOB_draw(targetCOMPONENT_ID); 
 ):( strcmp(struct_Type ,"BUTTONGROUP")== 0 )? 
 ( 
 BUTTONGROUP_draw(targetCOMPONENT_ID); 
 ):( strcmp(struct_Type ,"FREQUENCY")== 0 )? 
 ( 
 FREQUENCY_draw(targetCOMPONENT_ID); 
 ) 
 ; 
 ); 
); 
function _LAYER_mouseMoved(LAYER_ID,targetCOMPONENT_ID,MOUSEINFO_ID) 
 local (struct_Type) 
( 
 ( COMPONENT_isActive(targetCOMPONENT_ID) == true )? 
 ( 
 struct_Type = STRUCT_getStructType( targetCOMPONENT_ID ); 
 ( strcmp(struct_Type ,"COMPONENT")== 0 )? 
 ( 
 COMPONENT_mouseMoved(targetCOMPONENT_ID,MOUSEINFO_ID); 
 ):(strcmp(struct_Type ,"SLIDER")== 0 )? 
 ( 
 SLIDER_mouseMoved(targetCOMPONENT_ID,MOUSEINFO_ID); 
 ):(strcmp(struct_Type ,"SLIDERTYPE2")== 0 )? 
 ( 
 SLIDERTYPE2_mouseMoved(targetCOMPONENT_ID,MOUSEINFO_ID); 
 ):(strcmp(struct_Type ,"XYSLIDER")== 0 )? 
 ( 
 XYSLIDER_mouseMoved(targetCOMPONENT_ID,MOUSEINFO_ID); 
 ):(strcmp(struct_Type ,"BUTTON")== 0 )? 
 ( 
 BUTTON_mouseMoved(targetCOMPONENT_ID,MOUSEINFO_ID); 
 ):(strcmp(struct_Type ,"TEXT")== 0 )? 
 ( 
 TEXT_mouseMoved(targetCOMPONENT_ID,MOUSEINFO_ID); 
 ):(strcmp(struct_Type ,"KNOB")== 0 )? 
 ( 
 KNOB_mouseMoved(targetCOMPONENT_ID,MOUSEINFO_ID); 
 ):( strcmp(struct_Type ,"BUTTONGROUP")== 0 )? 
 ( 
 BUTTONGROUP_mouseMoved(targetCOMPONENT_ID,MOUSEINFO_ID); 
 ):( strcmp(struct_Type ,"FREQUENCY")== 0 )? 
 ( 
 FREQUENCY_mouseMoved(targetCOMPONENT_ID,MOUSEINFO_ID); 
 ) 
 ; 
 ); 
); 
function _LAYER_mouseButtonPressd(LAYER_ID,targetCOMPONENT_ID,MOUSEINFO_ID ) 
 local (struct_Type) 
( 
 ( COMPONENT_isActive(targetCOMPONENT_ID) == true )? 
 ( 
 struct_Type = STRUCT_getStructType( targetCOMPONENT_ID ); 
 ( strcmp(struct_Type ,"COMPONENT")== 0 )? 
 ( 
 COMPONENT_mouseButtonPressd(targetCOMPONENT_ID,MOUSEINFO_ID); 
 ):(strcmp(struct_Type ,"SLIDER")== 0 )? 
 ( 
 SLIDER_mouseButtonPressd(targetCOMPONENT_ID,MOUSEINFO_ID); 
 ):(strcmp(struct_Type ,"SLIDERTYPE2")== 0 )? 
 ( 
 SLIDERTYPE2_mouseButtonPressd(targetCOMPONENT_ID,MOUSEINFO_ID); 
 ):(strcmp(struct_Type ,"XYSLIDER")== 0 )? 
 ( 
 XYSLIDER_mouseButtonPressd(targetCOMPONENT_ID,MOUSEINFO_ID); 
 ):(strcmp(struct_Type ,"BUTTON")== 0 )? 
 ( 
 BUTTON_mouseButtonPressd(targetCOMPONENT_ID,MOUSEINFO_ID); 
 ):(strcmp(struct_Type ,"TEXT")== 0 )? 
 ( 
 TEXT_mouseButtonPressd(targetCOMPONENT_ID,MOUSEINFO_ID); 
 ):(strcmp(struct_Type ,"KNOB")== 0 )? 
 ( 
 KNOB_mouseButtonPressd(targetCOMPONENT_ID,MOUSEINFO_ID); 
 ):( strcmp(struct_Type ,"BUTTONGROUP")== 0 )? 
 ( 
 BUTTONGROUP_mouseButtonPressd(targetCOMPONENT_ID,MOUSEINFO_ID); 
 ):( strcmp(struct_Type ,"FREQUENCY")== 0 )? 
 ( 
 FREQUENCY_mouseButtonPressd(targetCOMPONENT_ID,MOUSEINFO_ID); 
 ) 
 ; 
 ); 
); 
function _LAYER_mouseButtonReleased(LAYER_ID,targetCOMPONENT_ID,MOUSEINFO_ID ) 
 local (struct_Type) 
( 
 ( COMPONENT_isActive(targetCOMPONENT_ID) == true )? 
 ( 
 struct_Type = STRUCT_getStructType( targetCOMPONENT_ID ); 
 ( strcmp(struct_Type ,"COMPONENT")== 0 )? 
 ( 
 COMPONENT_mouseButtonReleased(targetCOMPONENT_ID,MOUSEINFO_ID); 
 ):(strcmp(struct_Type ,"SLIDER")== 0 )? 
 ( 
 SLIDER_mouseButtonReleased(targetCOMPONENT_ID,MOUSEINFO_ID); 
 ) :(strcmp(struct_Type ,"SLIDERTYPE2")== 0 )? 
 ( 
 SLIDERTYPE2_mouseButtonReleased(targetCOMPONENT_ID,MOUSEINFO_ID); 
 ):(strcmp(struct_Type ,"XYSLIDER")== 0 )? 
 ( 
 XYSLIDER_mouseButtonReleased(targetCOMPONENT_ID,MOUSEINFO_ID); 
 ):(strcmp(struct_Type ,"BUTTON")== 0 )? 
 ( 
 BUTTON_mouseButtonReleased(targetCOMPONENT_ID,MOUSEINFO_ID); 
 ):(strcmp(struct_Type ,"TEXT")== 0 )? 
 ( 
 TEXT_mouseButtonReleased(targetCOMPONENT_ID,MOUSEINFO_ID); 
 ):(strcmp(struct_Type ,"KNOB")== 0 )? 
 ( 
 KNOB_mouseButtonReleased(targetCOMPONENT_ID,MOUSEINFO_ID); 
 ):( strcmp(struct_Type ,"BUTTONGROUP")== 0 )? 
 ( 
 BUTTONGROUP_mouseButtonReleased(targetCOMPONENT_ID,MOUSEINFO_ID); 
 ):( strcmp(struct_Type ,"FREQUENCY")== 0 )? 
 ( 
 FREQUENCY_mouseButtonReleased(targetCOMPONENT_ID,MOUSEINFO_ID); 
 ) 
 ; 
 COMPONENT_setIsMousePressStartedInThisComp(targetCOMPONENT_ID,false); 
 ); 
); 
function _LAYER_mouseWheeled(LAYER_ID,targetCOMPONENT_ID,MOUSEINFO_ID) 
 local (struct_Type) 
( 
 ( COMPONENT_isActive(targetCOMPONENT_ID) == true )? 
 ( 
 struct_Type = STRUCT_getStructType( targetCOMPONENT_ID ); 
 ( strcmp(struct_Type ,"COMPONENT")== 0 )? 
 ( 
 COMPONENT_mouseWheeled(targetCOMPONENT_ID,MOUSEINFO_ID); 
 ):(strcmp(struct_Type ,"SLIDER")== 0 )? 
 ( 
 SLIDER_mouseWheeled(targetCOMPONENT_ID,MOUSEINFO_ID); 
 ):(strcmp(struct_Type ,"SLIDERTYPE2")== 0 )? 
 ( 
 SLIDERTYPE2_mouseWheeled(targetCOMPONENT_ID,MOUSEINFO_ID); 
 ):(strcmp(struct_Type ,"XYSLIDER")== 0 )? 
 ( 
 XYSLIDER_mouseWheeled(targetCOMPONENT_ID,MOUSEINFO_ID); 
 ):(strcmp(struct_Type ,"BUTTON")== 0 )? 
 ( 
 BUTTON_mouseWheeled(targetCOMPONENT_ID,MOUSEINFO_ID); 
 ):(strcmp(struct_Type ,"TEXT")== 0 )? 
 ( 
 TEXT_mouseWheeled(targetCOMPONENT_ID,MOUSEINFO_ID); 
 ):(strcmp(struct_Type ,"KNOB")== 0 )? 
 ( 
 KNOB_mouseWheeled(targetCOMPONENT_ID,MOUSEINFO_ID); 
 ):( strcmp(struct_Type ,"BUTTONGROUP")== 0 )? 
 ( 
 BUTTONGROUP_mouseWheeled(targetCOMPONENT_ID,MOUSEINFO_ID); 
 ):( strcmp(struct_Type ,"FREQUENCY")== 0 )? 
 ( 
 FREQUENCY_mouseWheeled(targetCOMPONENT_ID,MOUSEINFO_ID); 
 ) 
 ; 
 ); 
); 
function LAYER_update(LAYER_ID,parrentRectID,isCallFromSliderChanged) 
 local (childCompoArray_ID,count_,childNUM ) 
( 
 ( LAYER_isActive(LAYER_ID) ==true)? 
 ( 
 ( isCallFromSliderChanged == false)? 
 ( 
 LAYER_setIsResized( LAYER_ID 
 , ( RECTANGLE_compare( _LAYER_getLastLayerAreaRect(LAYER_ID) 
 , LAYER_ID) ==false ) ) ; 
 RECTANGLE_copyTo(_LAYER_getLastLayerAreaRect(LAYER_ID),LAYER_ID); 
 ); 
 childCompoArray_ID = LAYER_getChildComponentArray(LAYER_ID); 
 childNUM = ARRAY_getBufferSize(childCompoArray_ID); 
 count_ = 0; 
 while ( count_ < childNUM ) 
 ( 
 COMPONENT_setComponentInfoValue( ARRAY_getAt(childCompoArray_ID,count_) 
 , "parrentLayer_Resized" 
 , LAYER_isAreaResized ( LAYER_ID) 
 ) ; 
 _LAYER_update(LAYER_ID,ARRAY_getAt(childCompoArray_ID,count_) ) ; 
 count_ +=1; 
 ); 
 ); 
); 
function LAYER_resized(LAYER_ID,parrentRectID) 
 local (childCompoArray_ID,count_,childNUM ) 
( 
 ( LAYER_isActive(LAYER_ID) ==true)? 
 ( 
 DBG("RESIZED LAYER"); 
 childCompoArray_ID = LAYER_getChildComponentArray(LAYER_ID); 
 childNUM = ARRAY_getBufferSize(childCompoArray_ID); 
 count_ = 0; 
 while ( count_ < childNUM ) 
 ( 
 _LAYER_resized( LAYER_ID 
 , ARRAY_getAt(childCompoArray_ID,count_) 
 , LAYER_ID); 
 count_ +=1; 
 ); 
 ); 
); 
function LAYER_draw(LAYER_ID) 
 local (childCompoArray_ID,count_,childNUM ) 
( 
 ( LAYER_isActive(LAYER_ID) ==true)? 
 ( 
 childCompoArray_ID = LAYER_getChildComponentArray(LAYER_ID); 
 childNUM = ARRAY_getBufferSize(childCompoArray_ID); 
 count_ = 0; 
 while ( count_ < childNUM ) 
 ( 
 ( RECTANGLE_getWidth(ARRAY_getAt(childCompoArray_ID,count_ ) ) > 0 
 && RECTANGLE_getHeight(ARRAY_getAt(childCompoArray_ID,count_) ) > 0 
 ) ? 
 ( 
 _LAYER_draw(LAYER_ID,ARRAY_getAt(childCompoArray_ID,count_)); 
 ); 
 count_ +=1; 
 ); 
 ); 
); 
function LAYER_mouseMove(LAYER_ID,MOUSEINFO_ID) 
 local (childCompoArray_ID,count_,childNUM ) 
( 
 ( LAYER_isActive(LAYER_ID) ==true)? 
 ( 
 childCompoArray_ID = LAYER_getChildComponentArray(LAYER_ID); 
 childNUM = ARRAY_getBufferSize(childCompoArray_ID); 
 count_ = 0; 
 while ( count_ < childNUM ) 
 ( 
 _LAYER_mouseMoved( LAYER_ID 
 , ARRAY_getAt(childCompoArray_ID,count_) 
 , MOUSEINFO_ID); 
 count_ +=1; 
 ); 
 ); 
); 
function LAYER_mouseButtonPressd(LAYER_ID,MOUSEINFO_ID) 
 local (childCompoArray_ID,count_,childNUM ) 
( 
 ( LAYER_isActive(LAYER_ID) ==true)? 
 ( 
 childCompoArray_ID = LAYER_getChildComponentArray(LAYER_ID); 
 childNUM = ARRAY_getBufferSize(childCompoArray_ID); 
 count_ = 0; 
 while ( count_ < childNUM ) 
 ( 
 _LAYER_mouseButtonPressd( LAYER_ID 
 , ARRAY_getAt(childCompoArray_ID,count_) 
 , MOUSEINFO_ID); 
 count_ +=1; 
 ); 
 ); 
); 
function LAYER_mouseButtonReleased(LAYER_ID,MOUSEINFO_ID) 
 local (childCompoArray_ID,count_,childNUM ) 
( 
 ( LAYER_isActive(LAYER_ID) ==true)? 
 ( 
 childCompoArray_ID = LAYER_getChildComponentArray(LAYER_ID); 
 childNUM = ARRAY_getBufferSize(childCompoArray_ID); 
 count_ = 0; 
 while ( count_ < childNUM ) 
 ( 
 _LAYER_mouseButtonReleased( LAYER_ID 
 , ARRAY_getAt(childCompoArray_ID,count_) 
 , MOUSEINFO_ID); 
 count_ +=1; 
 ); 
 ); 
); 
function LAYER_mouseWheeled(LAYER_ID,MOUSEINFO_ID) 
 local (childCompoArray_ID,count_,childNUM ) 
( 
 ( LAYER_isActive(LAYER_ID) ==true)? 
 ( 
 childCompoArray_ID = LAYER_getChildComponentArray(LAYER_ID); 
 childNUM = ARRAY_getBufferSize(childCompoArray_ID); 
 count_ = 0; 
 while ( count_ < childNUM ) 
 ( 
 _LAYER_mouseWheeled( LAYER_ID 
 , ARRAY_getAt(childCompoArray_ID,count_) 
 , MOUSEINFO_ID); 
 count_ +=1; 
 ); 
 ); 
); 
function APP_create() 
local(APP_ID,_innerRectID,_deltaTime_ID,_childComponentBUFF,_mouseInfo_ID ,baseClassElementNum) 
( 
 _mouseInfo_ID = MOUSEINFO_create(); 
 _deltaTime_ID = DELTATIME_create(); 
 _childComponentBUFF = ARRAY_create(1000); 
 APP_ID = CANVAS_create(gfx_w,gfx_h); 
 baseClassElementNum = _CANVAS_getElementNum(APP_ID); 
 STATIC_MASTER_BUFF[APP_ID] = "APP"; 
 STATIC_MASTER_BUFF[APP_ID+1] = baseClassElementNum +16 ; 
 STATIC_MASTER_BUFF[APP_ID+ baseClassElementNum +1] = _mouseInfo_ID; 
 STATIC_MASTER_BUFF[APP_ID+ baseClassElementNum +2] = -123456; 
 STATIC_MASTER_BUFF[APP_ID+ baseClassElementNum +3] = -123456; 
 STATIC_MASTER_BUFF[APP_ID+ baseClassElementNum +4] = 0; 
 STATIC_MASTER_BUFF[APP_ID+ baseClassElementNum +5] = 0; 
 STATIC_MASTER_BUFF[APP_ID+ baseClassElementNum +6] = 0; 
 STATIC_MASTER_BUFF[APP_ID+ baseClassElementNum +7] = 0; 
 STATIC_MASTER_BUFF[APP_ID+ baseClassElementNum +8] = 0; 
 STATIC_MASTER_BUFF[APP_ID+ baseClassElementNum +9] = false; 
 STATIC_MASTER_BUFF[APP_ID+ baseClassElementNum +10] = false; 
 STATIC_MASTER_BUFF[APP_ID+ baseClassElementNum +11] = false; 
 STATIC_MASTER_BUFF[APP_ID+ baseClassElementNum +12] = false; 
 STATIC_MASTER_BUFF[APP_ID+ baseClassElementNum +13] = _deltaTime_ID; 
 STATIC_MASTER_BUFF[APP_ID+ baseClassElementNum +14] = _childComponentBUFF; 
 STATIC_MASTER_BUFF[APP_ID+ baseClassElementNum +15] = true; 
 STATIC_MASTER_BUFF[APP_ID+ baseClassElementNum +16] = STATIC_MASTER_BUFF[APP_ID+1]; 
 STATIC_MASTER_BUFF_ID +=STRUCT_getElementNum (APP_ID)+1; 
 APP_ID; 
); 
function _APP_getElementNum(APP_ID) ( STATIC_MASTER_BUFF[APP_ID+_CANVAS_getElementNum(APP_ID)+16];); 
function APP_isActive(APP_ID) ( STATIC_MASTER_BUFF[APP_ID+_CANVAS_getElementNum(APP_ID)+15];); 
function APP_getIsActive(APP_ID) ( STATIC_MASTER_BUFF[APP_ID+_CANVAS_getElementNum(APP_ID)+15];); 
function APP_setIsActive(APP_ID,v) ( STATIC_MASTER_BUFF[APP_ID+_CANVAS_getElementNum(APP_ID)+15]=v;); 
function APP_toggleIsActive( APP_ID) ( APP_setIsActive(APP_ID,(APP_getIsActive(APP_ID) == false));); 
function APP_getMouseINFO(APP_ID) ( STATIC_MASTER_BUFF[APP_ID+_CANVAS_getElementNum(APP_ID)+1];); 
function APP_getDELTATIME_ID(APP_ID) ( STATIC_MASTER_BUFF[APP_ID+_CANVAS_getElementNum(APP_ID)+13];); 
function APP_getChildArray(APP_ID) ( STATIC_MASTER_BUFF[APP_ID+_CANVAS_getElementNum(APP_ID)+14];); 
function APP_getChildCount(APP_ID) local ( childCompoArray_ID,childNUM) 
( 
 childCompoArray_ID = APP_getChildArray(APP_ID); 
 childNUM = ARRAY_getBufferSize(childCompoArray_ID); 
 childNUM; 
); 
function APP_addChildComponent(APP_ID,childLAYER_ID) 
 local ( childCompoArray_ID,count_,childNUM,temp_A,check) 
( 
 childCompoArray_ID = APP_getChildArray(APP_ID); 
 childNUM = ARRAY_getBufferSize(childCompoArray_ID); 
 count_ =1; 
 check = false; 
 while ( count_ <= childNUM) 
 ( 
 temp_A = ARRAY_getAt(childCompoArray_ID,count_) ; 
 ( childLAYER_ID == temp_A)? 
 ( 
 check =true; 
 count_ = childNUM+100; 
 ); 
 count_ +=1; 
 ); 
 (check ==false)? 
 ( 
 ARRAY_push_back(childCompoArray_ID,childLAYER_ID); 
 ); 
); 
function APP_removeChildComponent(APP_ID,childLAYER_ID) 
 local(childCompoArray_ID,count_,childNUM,temp_A) 
( 
 childCompoArray_ID = APP_getChildArray(APP_ID); 
 childNUM = ARRAY_getBufferSize(childCompoArray_ID); 
 count_ = 0; 
 while ( count_ <= childNUM) 
 ( 
 temp_A = ARRAY_getAt(childCompoArray_ID,count_) ; 
 ( childLAYER_ID == temp_A)? 
 ( 
 ARRAY_removeAt(childCompoArray_ID,count_); 
 count_ = childNUM+100; 
 ); 
 count_ +=1; 
 ); 
); 
function APP_getLastMouseX(APP_ID) ( MOUSEINFO_getLastMouseX ( APP_getMouseINFO(APP_ID) ) ;); 
function APP_getLastMouseY(APP_ID) ( MOUSEINFO_getLastMouseY ( APP_getMouseINFO(APP_ID) ) ;); 
function APP_getLastMouseCap(APP_ID) ( MOUSEINFO_getLastMouseCap ( APP_getMouseINFO(APP_ID) ) ;); 
function APP_getLastMouseWheelV(APP_ID) ( MOUSEINFO_getLastMouseWheelV ( APP_getMouseINFO(APP_ID) ) ;); 
function APP_getLastMouseWheelH(APP_ID) ( MOUSEINFO_getLastMouseWheelH ( APP_getMouseINFO(APP_ID) ) ;); 
function APP_setLastMouseX(APP_ID,e) ( MOUSEINFO_setLastMouseX ( APP_getMouseINFO(APP_ID),e );); 
function APP_setLastMouseY(APP_ID,e) ( MOUSEINFO_setLastMouseY ( APP_getMouseINFO(APP_ID),e );); 
function APP_setLastMouseCap(APP_ID,e) ( MOUSEINFO_setLastMouseCap ( APP_getMouseINFO(APP_ID),e );); 
function APP_setLastMouseWheelV(APP_ID,e) ( MOUSEINFO_setLastMouseWheelV ( APP_getMouseINFO(APP_ID),e );); 
function APP_setLastMouseWheelH(APP_ID,e) ( MOUSEINFO_setLastMouseWheelH ( APP_getMouseINFO(APP_ID),e );); 
function APP_getLastWindowWidth(APP_ID) ( STATIC_MASTER_BUFF[APP_ID+_CANVAS_getElementNum(APP_ID)+2];); 
function APP_getLastWindowHeight(APP_ID) ( STATIC_MASTER_BUFF[APP_ID+_CANVAS_getElementNum(APP_ID)+3];); 
function APP_getLasKeyState(APP_ID) ( STATIC_MASTER_BUFF[APP_ID+_CANVAS_getElementNum(APP_ID)+8];); 
function APP_setLastWindowWidth(APP_ID,e) ( STATIC_MASTER_BUFF[APP_ID+_CANVAS_getElementNum(APP_ID)+2]=e;); 
function APP_setLastWindowHeight(APP_ID,e)( STATIC_MASTER_BUFF[APP_ID+_CANVAS_getElementNum(APP_ID)+3]=e;); 
function APP_setLasKeyState(APP_ID,e) ( STATIC_MASTER_BUFF[APP_ID+_CANVAS_getElementNum(APP_ID)+8]=e;); 
function APP_getChar(APP_ID ) ( APP_getLasKeyState(APP_ID); ); 
function _APP_setIsMouseButtonPressed(APP_ID,e) ( STATIC_MASTER_BUFF[APP_ID+_CANVAS_getElementNum(APP_ID)+9] =e;); 
function _APP_setIsMouseButtonReleased(APP_ID,e) ( STATIC_MASTER_BUFF[APP_ID+_CANVAS_getElementNum(APP_ID)+10]=e;); 
function _APP_setIsMouseButtonHoldPress(APP_ID,e)( STATIC_MASTER_BUFF[APP_ID+_CANVAS_getElementNum(APP_ID)+11]=e;); 
function _APP_setIsWindowResized(APP_ID,e) ( STATIC_MASTER_BUFF[APP_ID+_CANVAS_getElementNum(APP_ID)+12]=e;); 
function _APP_getIsMouseButtonPressed(APP_ID) ( STATIC_MASTER_BUFF[APP_ID+_CANVAS_getElementNum(APP_ID)+9];); 
function _APP_getIsMouseButtonReleased(APP_ID) ( STATIC_MASTER_BUFF[APP_ID+_CANVAS_getElementNum(APP_ID)+10];); 
function _APP_getIsMouseButtonHoldPress(APP_ID) ( STATIC_MASTER_BUFF[APP_ID+_CANVAS_getElementNum(APP_ID)+11];); 
function _APP_getIsWindowResized(APP_ID) ( STATIC_MASTER_BUFF[APP_ID+_CANVAS_getElementNum(APP_ID)+12];); 
function APP_CopyRectangleTo(APP_ID,destRECTANGLE_ID)local (x,y,w,h) 
( 
 x = RECTANGLE_getX(APP_ID); 
 y = RECTANGLE_getY(APP_ID); 
 w = RECTANGLE_getWidth(APP_ID); 
 h = RECTANGLE_getHeight(APP_ID); 
 RECTANGLE_setX(destRECTANGLE_ID,x); 
 RECTANGLE_setY(destRECTANGLE_ID,y); 
 RECTANGLE_setWidth(destRECTANGLE_ID,w); 
 RECTANGLE_setHeight(destRECTANGLE_ID,h); 
); 
function APP_isGFX_Enable(APP_ID) 
( 
 ( RECTANGLE_getWidth(APP_ID) != 0 
 && RECTANGLE_getHeight(APP_ID)!= 0 
 ); 
); 
function _APP_updateRectangle(APP_ID) 
( 
 RECTANGLE_setWidth(APP_ID,gfx_w); 
 RECTANGLE_setHeight(APP_ID,gfx_h); 
); 
function _APP_isCheckWindowSize(APP_ID) local (out ,lastW,lastH) 
( 
 out = false; 
 lastW = APP_getLastWindowWidth(APP_ID); 
 lastH = APP_getLastWindowHeight(APP_ID); 
 ( lastW != gfx_w || lastH != gfx_h ) ? 
 ( 
 out = true; 
 _APP_setIsWindowResized(APP_ID,true) ; 
 _APP_updateRectangle(APP_ID); 
 ):( 
 _APP_setIsWindowResized(APP_ID,false); 
 ) 
 ; 
 out; 
); 
function _APP_isMouseButtonCapPressed(mousecap) 
( 
 ( 
 ( mousecap & 1 ) == 1 
 ||( mousecap & 2 ) == 2 
 ||( mousecap & 64 )== 64 
 ); 
); 
function _APP_checkMouseCapEvent(APP_ID) local(isChanged,lastMouseCap,newCap) 
( 
 isChanged=false; 
 lastMouseCap = APP_getLastMouseCap(APP_ID); 
 newCap = mouse_cap ; 
 ( lastMouseCap < newCap 
 && _APP_isMouseButtonCapPressed(newCap) == true 
 )?( 
 _APP_setIsMouseButtonPressed(APP_ID,true); 
 ):( 
 _APP_setIsMouseButtonPressed(APP_ID,false); 
 ); 
 ( newCap > 0 
 && _APP_isMouseButtonCapPressed(newCap) == true 
 )?( 
 _APP_setIsMouseButtonHoldPress(APP_ID,true); 
 ):( 
 _APP_setIsMouseButtonHoldPress(APP_ID,false); 
 ); 
 ( lastMouseCap > newCap && lastMouseCap > 0 
 )?( 
 _APP_setIsMouseButtonReleased(APP_ID,true); 
 ):( 
 _APP_setIsMouseButtonReleased(APP_ID,false); 
 ); 
 ( lastMouseCap != newCap)? (isChanged =true;); 
 isChanged; 
); 
function APP_isMouseWheelVMoved(APP_ID) ( MOUSEINFO_isMouseWheelVChanged( APP_getMouseINFO(APP_ID) );); 
function APP_isMouseWheelHMoved(APP_ID) ( MOUSEINFO_isMouseWheelHChanged( APP_getMouseINFO(APP_ID) );); 
function APP_isMouseMoved(APP_ID) ( MOUSEINFO_isMouseMoved( APP_getMouseINFO(APP_ID) );); 
function APP_isMouseButtonPressed(APP_ID) ( _APP_getIsMouseButtonPressed(APP_ID);); 
function APP_isMouseButtonHoldingPress(APP_ID)( _APP_getIsMouseButtonHoldPress(APP_ID);); 
function APP_isMouseButtonReleased(APP_ID) ( _APP_getIsMouseButtonReleased(APP_ID);); 
function APP_isWindowResized(APP_ID) ( _APP_getIsWindowResized(APP_ID);); 
function APP_isMouseButtonPressed_Left(APP_ID) 
 local (lastMouseCap,out) 
( 
 out = false; 
 lastMouseCap = APP_getLastMouseCap(APP_ID); 
 ( lastMouseCap & 1 != 1 
 && mouse_cap & 1 == 1 ) ? 
 ( 
 out =true; 
 ); 
 out; 
); 
function APP_isMouseButtonPressed_Right(APP_ID) 
 local (lastMouseCap,out) 
( 
 out = false; 
 lastMouseCap = APP_getLastMouseCap(APP_ID); 
 ( lastMouseCap & 2 != 2 
 && mouse_cap & 2 == 2)? 
 ( 
 out =true; 
 ); 
 out; 
); 
function APP_isMouseButtonPressed_Middle(APP_ID) 
 local (lastMouseCap,out) 
( 
 out = false; 
 lastMouseCap = APP_getLastMouseCap(APP_ID); 
 ( lastMouseCap & 64 != 64 
 && mouse_cap & 64 == 64)? 
 ( 
 out =true; 
 ); 
 out; 
); 
function APP_storeLastInfo(APP_ID) 
( 
 APP_setLastWindowWidth(APP_ID ,gfx_w); 
 APP_setLastWindowHeight(APP_ID,gfx_h); 
 APP_setLasKeyState(APP_ID, gfx_getchar()); 
 APP_ID; 
); 
function APP_SliderChanged(APP_ID) 
 local (childCompoArray_ID,childNUM,count_,mouseInfo_ID,dTimeCounter,canvasR,canvasS) 
( 
 ( APP_isActive(APP_ID) ==true) ? 
 ( 
 childCompoArray_ID = APP_getChildArray(APP_ID); 
 childNUM = ARRAY_getBufferSize(childCompoArray_ID); 
 count_ = 0; 
 while ( count_ < childNUM ) 
 ( 
 LAYER_update( ARRAY_getAt(childCompoArray_ID,count_) 
 , APP_ID 
 , true 
 ); 
 count_ +=1; 
 ); 
 ); 
); 
function APP_update(APP_ID) 
 local (childCompoArray_ID,childNUM,count_,mouseInfo_ID,dTimeCounter,canvasR,canvasS) 
( 
 ( APP_isActive(APP_ID) ==true) ? 
 ( 
 MOUSEINFO_update ( APP_getMouseINFO(APP_ID) ); 
 _APP_checkMouseCapEvent(APP_ID); 
 _APP_isCheckWindowSize(APP_ID); 
 mouseInfo_ID = APP_getMouseINFO(APP_ID); 
 childCompoArray_ID = APP_getChildArray(APP_ID); 
 childNUM = ARRAY_getBufferSize(childCompoArray_ID); 
 count_ = 0; 
 while ( count_ < childNUM ) 
 ( 
 LAYER_update( ARRAY_getAt(childCompoArray_ID,count_) 
 , APP_ID 
 , false 
 ); 
 count_ +=1; 
 ); 
 ( APP_isWindowResized(APP_ID) ==true)? 
 ( 
 DBG("APP RESIZED "); 
 childCompoArray_ID = APP_getChildArray(APP_ID); 
 childNUM = ARRAY_getBufferSize(childCompoArray_ID); 
 count_ = 0; 
 while ( count_ < childNUM ) 
 ( 
 LAYER_resized( ARRAY_getAt(childCompoArray_ID,count_) ,APP_ID); 
 count_ +=1; 
 ); 
 ); 
 ( APP_isMouseMoved(APP_ID) == true)? 
 ( 
 childCompoArray_ID = APP_getChildArray(APP_ID); 
 childNUM = ARRAY_getBufferSize(childCompoArray_ID); 
 count_ = 0; 
 while ( count_ < childNUM ) 
 ( 
 LAYER_mouseMove(ARRAY_getAt(childCompoArray_ID,count_),mouseInfo_ID); 
 count_ +=1; 
 ); 
 ); 
 ( APP_isMouseButtonPressed(APP_ID) == true)? 
 ( 
 DBG("APP Button Pressed "); 
 childCompoArray_ID = APP_getChildArray(APP_ID); 
 childNUM = ARRAY_getBufferSize(childCompoArray_ID); 
 count_ = 0; 
 while ( count_ < childNUM ) 
 ( 
 LAYER_mouseButtonPressd(ARRAY_getAt(childCompoArray_ID,count_), mouseInfo_ID); 
 count_ +=1; 
 ); 
 ); 
 ( APP_isMouseButtonHoldingPress(APP_ID) == true)? 
 ( 
 0; 
 ); 
 ( APP_isMouseButtonReleased(APP_ID) == true)? 
 ( 
 DBG("APP Button Released "); 
 childCompoArray_ID = APP_getChildArray(APP_ID); 
 childNUM = ARRAY_getBufferSize(childCompoArray_ID); 
 count_ = 0; 
 while ( count_ < childNUM ) 
 ( 
 LAYER_mouseButtonReleased(ARRAY_getAt(childCompoArray_ID,count_), mouseInfo_ID); 
 count_ +=1; 
 ); 
 ); 
 ( APP_isMouseWheelVMoved(APP_ID) == true 
 || APP_isMouseWheelHMoved(APP_ID) == true )? 
 ( 
 DBG("APP Mouse Wheeled "); 
 childCompoArray_ID = APP_getChildArray(APP_ID); 
 childNUM = ARRAY_getBufferSize(childCompoArray_ID); 
 count_ = 0; 
 while ( count_ < childNUM ) 
 ( 
 LAYER_mouseWheeled( ARRAY_getAt(childCompoArray_ID,count_),mouseInfo_ID); 
 count_ +=1; 
 ); 
 ); 
 ( APP_isGFX_Enable(APP_ID) ==true )? 
 ( 
 CANVAS_recreateCanvas(APP_ID); 
 gfx_dest = CANVAS_getCanvaseSlotID(APP_ID); 
 childCompoArray_ID = APP_getChildArray(APP_ID); 
 childNUM = ARRAY_getBufferSize(childCompoArray_ID); 
 count_ = 0; 
 while ( count_ < childNUM ) 
 ( 
 gfx_x =0;gfx_y =0;gfx_a =1;gfx_r =1;gfx_g =1;gfx_b =1; 
 LAYER_draw(ARRAY_getAt(childCompoArray_ID,count_)); 
 count_ +=1; 
 ); 
 ); 
 gfx_x =0;gfx_y =0;gfx_a =1;gfx_r =0;gfx_g =0;gfx_b =0; 
 dTimeCounter = DELTATIME_getDeltaTimeWithStepValue(APP_getDELTATIME_ID(APP_ID),0.01); 
 canvasR = 0; 
 canvasS = 1; 
 (mouse_cap & 8 == 8)? 
 ( 
 canvasR = $pi * 2 * dTimeCounter; 
 ); 
 (mouse_cap & 16 == 16)? 
 ( 
 canvasS = 0.5 + ( 1.5 *abs( sin($pi *2 * dTimeCounter*2) ) ); 
 ); 
 gfx_x = -(gfx_w/2) * canvasS +(gfx_w/2); 
 gfx_y = -(gfx_h/2) * canvasS +(gfx_h/2); 
 gfx_dest = -1; 
 gfx_blit(CANVAS_getCanvaseSlotID( APP_ID), canvasS, canvasR); 
 APP_storeLastInfo(APP_ID); 
 ); 
); 
_BPMDELAY_BAR_STR = "1."; 
_BPMDELAY_2th_STR = "2." ; 
_BPMDELAY_4th_STR = "4." ; 
_BPMDELAY_8th_STR = "8." ; 
_BPMDELAY_16th_STR = "16" ; 
_BPMDELAY_32th_STR = "32" ; 
_BPMDELAY_X1_STR = "x1" ; 
_BPMDELAY_X2_STR = "x2" ; 
_BPMDELAY_X3_STR = "x3" ; 
_BPMDELAY_X4_STR = "x4" ; 
_BPMDELAY_X5_STR = "x5" ; 
function _BPMDELAY_getElementNum (BPMDELAY_ID) ( STATIC_MASTER_BUFF[BPMDELAY_ID+_RECTANGLE_getElementNum(BPMDELAY_ID)+2];); 
function BPMDELAY_getBtGroupBPM (BPMDELAY_ID) ( STATIC_MASTER_BUFF[BPMDELAY_ID+_RECTANGLE_getElementNum(BPMDELAY_ID)+3];); 
function BPMDELAY_getBtGroupMUL (BPMDELAY_ID) ( STATIC_MASTER_BUFF[BPMDELAY_ID+_RECTANGLE_getElementNum(BPMDELAY_ID)+4];); 
function _BPMDELAY_getDelayGainKnob (BPMDELAY_ID) ( STATIC_MASTER_BUFF[BPMDELAY_ID+_RECTANGLE_getElementNum(BPMDELAY_ID)+5];); 
function _BPMDELAY_getFeedBackKnob (BPMDELAY_ID) ( STATIC_MASTER_BUFF[BPMDELAY_ID+_RECTANGLE_getElementNum(BPMDELAY_ID)+6];); 
function _BPMDELAY_getPanKnob (BPMDELAY_ID) ( STATIC_MASTER_BUFF[BPMDELAY_ID+_RECTANGLE_getElementNum(BPMDELAY_ID)+7];); 
function _BPMDELAY_getParrentLayer (BPMDELAY_ID) ( STATIC_MASTER_BUFF[BPMDELAY_ID+_RECTANGLE_getElementNum(BPMDELAY_ID)+8];); 
function _BPMDELAY_getDelaySample (BPMDELAY_ID) ( STATIC_MASTER_BUFF[BPMDELAY_ID+_RECTANGLE_getElementNum(BPMDELAY_ID)+9];); 
function _BPMDELAY_setDelaySample (BPMDELAY_ID,v) ( STATIC_MASTER_BUFF[BPMDELAY_ID+_RECTANGLE_getElementNum(BPMDELAY_ID)+9]= v;); 
function _BPMDELAY_getDelayArray (BPMDELAY_ID) ( STATIC_MASTER_BUFF[BPMDELAY_ID+_RECTANGLE_getElementNum(BPMDELAY_ID)+10];); 
function _BPMDELAY_getMaxDelaySize (BPMDELAY_ID) ( STATIC_MASTER_BUFF[BPMDELAY_ID+_RECTANGLE_getElementNum(BPMDELAY_ID)+11];); 
function _BPMDELAY_getWetvalue (BPMDELAY_ID) ( STATIC_MASTER_BUFF[BPMDELAY_ID+_RECTANGLE_getElementNum(BPMDELAY_ID)+12];); 
function _BPMDELAY_setWetvalue (BPMDELAY_ID,v) ( STATIC_MASTER_BUFF[BPMDELAY_ID+_RECTANGLE_getElementNum(BPMDELAY_ID)+12]= v;); 
function _BPMDELAY_getPannerClass (BPMDELAY_ID) ( STATIC_MASTER_BUFF[BPMDELAY_ID+_RECTANGLE_getElementNum(BPMDELAY_ID)+13];); 
function _BPMDELAY_getLastRectangle (BPMDELAY_ID) ( STATIC_MASTER_BUFF[BPMDELAY_ID+_RECTANGLE_getElementNum(BPMDELAY_ID)+14];); 
function _BPMDELAY_getWetDryKnob (BPMDELAY_ID) ( STATIC_MASTER_BUFF[BPMDELAY_ID+_RECTANGLE_getElementNum(BPMDELAY_ID)+15];); 
function _BPMDELAY_getDryValue (BPMDELAY_ID) ( STATIC_MASTER_BUFF[BPMDELAY_ID+_RECTANGLE_getElementNum(BPMDELAY_ID)+16];); 
function _BPMDELAY_setDryValue (BPMDELAY_ID,v) ( STATIC_MASTER_BUFF[BPMDELAY_ID+_RECTANGLE_getElementNum(BPMDELAY_ID)+16]= v;); 
function BPMDELAY_setSliderIndex_DelayGain(BPMDELAY_ID,v) 
( 
 COMPONENT_setSliderIndex( _BPMDELAY_getDelayGainKnob (BPMDELAY_ID) , v); 
); 
function BPMDELAY_setSliderIndex_FeedBack(BPMDELAY_ID,v) 
( 
 COMPONENT_setSliderIndex( _BPMDELAY_getFeedBackKnob (BPMDELAY_ID), v); 
); 
function BPMDELAY_setSliderIndex_Pan(BPMDELAY_ID,v) 
( 
 COMPONENT_setSliderIndex( _BPMDELAY_getPanKnob (BPMDELAY_ID) , v); 
); 
function BPMDELAY_setSliderIndex_WetDry(BPMDELAY_ID,v) 
( 
 COMPONENT_setSliderIndex( _BPMDELAY_getWetDryKnob (BPMDELAY_ID), v); 
); 
function BPMDELAY_setSliderIndex_BPM(BPMDELAY_ID,idx) 
( 
 COMPONENT_setSliderIndex( BPMDELAY_getBtGroupBPM (BPMDELAY_ID), idx); 
); 
function BPMDELAY_setSliderIndex_MUL(BPMDELAY_ID,idx) 
( 
 COMPONENT_setSliderIndex( BPMDELAY_getBtGroupMUL (BPMDELAY_ID), idx); 
); 
function BPMDELAY_getDelayGainValue (BPMDELAY_ID) ( COMPONENT_getParameteredValue(_BPMDELAY_getDelayGainKnob (BPMDELAY_ID));); 
function BPMDELAY_getFeedBackValue (BPMDELAY_ID) ( COMPONENT_getParameteredValue(_BPMDELAY_getFeedBackKnob (BPMDELAY_ID));); 
function BPMDELAY_getPanValue (BPMDELAY_ID) ( COMPONENT_getParameteredValue(_BPMDELAY_getPanKnob (BPMDELAY_ID));); 
function BPMDELAY_getWetDryValue (BPMDELAY_ID) ( COMPONENT_getParameteredValue(_BPMDELAY_getWetDryKnob (BPMDELAY_ID));); 
function BPMDELAY_setDelayGainValue (BPMDELAY_ID,v,isRepaerSend)( COMPONENT_setValue(_BPMDELAY_getDelayGainKnob(BPMDELAY_ID),v,isRepaerSend);); 
function BPMDELAY_setFeedBackValue (BPMDELAY_ID,v,isRepaerSend)( COMPONENT_setValue(_BPMDELAY_getFeedBackKnob (BPMDELAY_ID),v,isRepaerSend);); 
function BPMDELAY_setPanValue (BPMDELAY_ID,v,isRepaerSend)( COMPONENT_setValue(_BPMDELAY_getPanKnob (BPMDELAY_ID),v,isRepaerSend);); 
function BPMDELAY_setWetDryValue (BPMDELAY_ID,v,isRepaerSend)( COMPONENT_setValue(_BPMDELAY_getWetDryKnob (BPMDELAY_ID),v,isRepaerSend);); 
function BPMDELAY_setBtGroupBPM_CurrentIdx(BPMDELAY_ID,indexNum) 
( 
 BUTTONGROUP_setCurrentButtonComponentByIndex( BPMDELAY_getBtGroupBPM(BPMDELAY_ID) 
 , indexNum); 
); 
function BPMDELAY_setBtGroupMUL_CurrentIdx(BPMDELAY_ID,indexNum) 
( 
 BUTTONGROUP_setCurrentButtonComponentByIndex( BPMDELAY_getBtGroupMUL(BPMDELAY_ID) 
 , indexNum); 
); 
function _BPMDELAY_prepareBtGroup_BPM( targetBTGroup) 
 local (BT_1,BT_2,BT_4,BT_8,BT_16,BT_32) 
( 
 BT_1 = BUTTON_create (_BPMDELAY_BAR_STR); 
 BT_2 = BUTTON_create (_BPMDELAY_2th_STR); 
 BT_4 = BUTTON_create (_BPMDELAY_4th_STR); 
 BT_8 = BUTTON_create (_BPMDELAY_8th_STR); 
 BT_16 = BUTTON_create (_BPMDELAY_16th_STR); 
 BT_32 = BUTTON_create (_BPMDELAY_32th_STR); 
 BUTTON_setOnTextPostFix(BT_1, ""); BUTTON_setOffTextPostFix(BT_1, ""); 
 BUTTON_setOnTextPostFix(BT_2, ""); BUTTON_setOffTextPostFix(BT_2, ""); 
 BUTTON_setOnTextPostFix(BT_4, ""); BUTTON_setOffTextPostFix(BT_4, ""); 
 BUTTON_setOnTextPostFix(BT_8, ""); BUTTON_setOffTextPostFix(BT_8, ""); 
 BUTTON_setOnTextPostFix(BT_16,""); BUTTON_setOffTextPostFix(BT_16,""); 
 BUTTON_setOnTextPostFix(BT_32,""); BUTTON_setOffTextPostFix(BT_32,""); 
 BUTTONGROUP_addButton (targetBTGroup,BT_1); 
 BUTTONGROUP_addButton (targetBTGroup,BT_2); 
 BUTTONGROUP_addButton (targetBTGroup,BT_4); 
 BUTTONGROUP_addButton (targetBTGroup,BT_8); 
 BUTTONGROUP_addButton (targetBTGroup,BT_16); 
 BUTTONGROUP_addButton (targetBTGroup,BT_32); 
); 
function _BPMDELAY_prepareBtGroup_Mul(targetBTGroup) 
 local (BT_x1,BT_x2,BT_x3,BT_x4,BT_x5) 
( 
 BT_x1 = BUTTON_create (_BPMDELAY_X1_STR); 
 BT_x2 = BUTTON_create (_BPMDELAY_X2_STR); 
 BT_x3 = BUTTON_create (_BPMDELAY_X3_STR); 
 BT_x4 = BUTTON_create (_BPMDELAY_X4_STR); 
 BT_x5 = BUTTON_create (_BPMDELAY_X5_STR); 
 BUTTON_setOnTextPostFix(BT_x1,""); BUTTON_setOffTextPostFix(BT_x1,""); 
 BUTTON_setOnTextPostFix(BT_x2,""); BUTTON_setOffTextPostFix(BT_x2,""); 
 BUTTON_setOnTextPostFix(BT_x3,""); BUTTON_setOffTextPostFix(BT_x3,""); 
 BUTTON_setOnTextPostFix(BT_x4,""); BUTTON_setOffTextPostFix(BT_x4,""); 
 BUTTON_setOnTextPostFix(BT_x5,""); BUTTON_setOffTextPostFix(BT_x5,""); 
 BUTTONGROUP_addButton (targetBTGroup,BT_x1); 
 BUTTONGROUP_addButton (targetBTGroup,BT_x2); 
 BUTTONGROUP_addButton (targetBTGroup,BT_x3); 
 BUTTONGROUP_addButton (targetBTGroup,BT_x4); 
 BUTTONGROUP_addButton (targetBTGroup,BT_x5); 
); 
function _BPMDELAY_calclateDeleySample(BPMDELAY_ID) 
 local (newDelaySample,btGroup_BPM,btGroup_MUL 
 ,currentBPMBtName,currentMulBtName,delaySample) 
( 
 btGroup_BPM = BPMDELAY_getBtGroupBPM(BPMDELAY_ID); 
 btGroup_MUL = BPMDELAY_getBtGroupMUL(BPMDELAY_ID); 
 currentBPMBtName = BUTTONGROUP_getCurrentButtonName(btGroup_BPM); 
 ( currentBPMBtName == _BPMDELAY_BAR_STR )?(delaySample = get1thNote_Sample (tempo,srate); 
 ):( currentBPMBtName == _BPMDELAY_2th_STR )?(delaySample = get2thNote_Sample (tempo,srate); 
 ):( currentBPMBtName == _BPMDELAY_4th_STR )?(delaySample = get4thNote_Sample (tempo,srate); 
 ):( currentBPMBtName == _BPMDELAY_8th_STR )?(delaySample = get8thNote_Sample (tempo,srate); 
 ):( currentBPMBtName == _BPMDELAY_16th_STR)?(delaySample = get16thNote_Sample(tempo,srate); 
 ):( currentBPMBtName == _BPMDELAY_32th_STR)?(delaySample = get32thNote_Sample(tempo,srate); 
 ); 
 currentMulBtName = BUTTONGROUP_getCurrentButtonName(btGroup_MUL); 
 ( currentMulBtName == _BPMDELAY_X1_STR)?(delaySample *= 1; 
 ):( currentMulBtName == _BPMDELAY_X2_STR)?(delaySample *= 2; 
 ):( currentMulBtName == _BPMDELAY_X3_STR)?(delaySample *= 3; 
 ):( currentMulBtName == _BPMDELAY_X4_STR)?(delaySample *= 4; 
 ):( currentMulBtName == _BPMDELAY_X5_STR)?(delaySample *= 5; 
 ); 
 ( _BPMDELAY_getMaxDelaySIze(BPMDELAY_ID) <=delaySample )? 
 ( 
 delaySample = _BPMDELAY_getMaxDelaySize (BPMDELAY_ID) -1; 
 ); 
 _BPMDELAY_setDelaySample (BPMDELAY_ID,delaySample); 
); 
function BPMDELAY_resized(BPMDELAY_ID) 
 local ( btGroupBPM 
 , btGroupMUL 
 , delayGainKnob 
 , feedBackKnob 
 , panKnob 
 , wetDryKnob 
 ) 
( 
 btGroupBPM = BPMDELAY_getBtGroupBPM(BPMDELAY_ID); 
 btGroupMUL = BPMDELAY_getBtGroupMUL(BPMDELAY_ID); 
 delayGainKnob = _BPMDELAY_getDelayGainKnob (BPMDELAY_ID); 
 feedBackKnob = _BPMDELAY_getFeedBackKnob (BPMDELAY_ID); 
 panKnob = _BPMDELAY_getPanKnob (BPMDELAY_ID); 
 wetDryKnob = _BPMDELAY_getWetDryKnob (BPMDELAY_ID); 
 RECTANGLE_copyTo (btGroupBPM ,BPMDELAY_ID ); 
 RECTANGLE_cropFromTopP (btGroupBPM ,0.1); 
 RECTANGLE_copyTo (btGroupMUL ,BPMDELAY_ID ); 
 RECTANGLE_removeFromTopP(btGroupMUL ,0.1); 
 RECTANGLE_cropFromTopP (btGroupMUL ,0.1); 
 RECTANGLE_reduce (btGroupBPM,1,1); 
 RECTANGLE_reduce (btGroupMUL,1,1); 
 RECTANGLE_copyTo (delayGainKnob,BPMDELAY_ID ); 
 RECTANGLE_removeFromTopP(delayGainKnob,0.2); 
 RECTANGLE_cropFromTopP (delayGainKnob,0.25); 
 RECTANGLE_copyTo (feedBackKnob ,delayGainKnob ); 
 RECTANGLE_move (feedBackKnob ,0,RECTANGLE_getHeight(delayGainKnob)); 
 RECTANGLE_copyTo (panKnob ,feedBackKnob ); 
 RECTANGLE_move (panKnob ,0,RECTANGLE_getHeight(delayGainKnob)); 
 RECTANGLE_copyTo (wetDryKnob ,panKnob ); 
 RECTANGLE_move (wetDryKnob ,0,RECTANGLE_getHeight(delayGainKnob)); 
 RECTANGLE_reduce (delayGainKnob,3,3); 
 RECTANGLE_reduce (feedBackKnob,3,3); 
 RECTANGLE_reduce (panKnob,3,3); 
 RECTANGLE_reduce (wetDryKnob,3,3); 
); 
function BPMDELAY_updatePostion( BPMDELAY_ID)( BPMDELAY_resized(BPMDELAY_ID);); 
function BPMDELAY_process(BPMDELAY_ID,inSample) 
 local ( btGroup_BPM 
 , btGroup_MUL 
 , delaySample 
 , delayGainValue 
 , feedBackValue 
 , panValue 
 , delayArray 
 , effectedValue 
 , panner_class 
 , wetDryValue 
 ) 
( 
 btGroup_BPM = BPMDELAY_getBtGroupBPM(BPMDELAY_ID); 
 btGroup_MUL = BPMDELAY_getBtGroupMUL(BPMDELAY_ID); 
 ( BUTTONGROUP_isIndexChanged(btGroup_BPM) == true 
 || BUTTONGROUP_isIndexChanged(btGroup_MUL) == true 
 )? 
 ( 
 _BPMDELAY_calclateDeleySample(BPMDELAY_ID) ; 
 ); 
 delayGainValue = BPMDELAY_getDelayGainValue (BPMDELAY_ID); 
 feedBackValue = BPMDELAY_getFeedBackValue (BPMDELAY_ID); 
 panValue = BPMDELAY_getPanValue (BPMDELAY_ID); 
 wetDryValue = BPMDELAY_getWetDryValue (BPMDELAY_ID); 
 delayArray = _BPMDELAY_getDelayArray (BPMDELAY_ID); 
 delaySample = _BPMDELAY_getDelaySample (BPMDELAY_ID); 
 panner_class = _BPMDELAY_getPannerClass (BPMDELAY_ID); 
 _BPMDELAY_setDryValue(BPMDELAY_ID,inSample); 
 CURSOLBUFFER_push( delayArray 
 , inSample 
 + _BPMDELAY_getWetvalue(BPMDELAY_ID)*0.9*feedBackValue 
 ); 
 effectedValue = CURSOLBUFFER_getOffsettedValueWithInterp( delayArray 
 , delaySample ); 
 effectedValue *= delayGainValue; 
 _BPMDELAY_setWetvalue(BPMDELAY_ID,effectedValue); 
 RECTANGLE_copyTo( _BPMDELAY_getLastRectangle (BPMDELAY_ID),BPMDELAY_ID); 
); 
function BPMDELAY_getEffectedSample_L(BPMDELAY_ID) 
 local ( panner_class 
 , panValue 
 , out 
 ) 
( 
 panner_class = _BPMDELAY_getPannerClass (BPMDELAY_ID); 
 panValue = BPMDELAY_getPanValue (BPMDELAY_ID); 
 PANNER_setPanValue ( panner_class, panValue); 
 out = PANNER_getLeft( panner_class, _BPMDELAY_getWetvalue(BPMDELAY_ID)); 
 out; 
); 
function BPMDELAY_getEffectedSample_R(BPMDELAY_ID) 
 local ( panner_class 
 , panValue 
 , out 
 ) 
( 
 panner_class = _BPMDELAY_getPannerClass (BPMDELAY_ID); 
 panValue = BPMDELAY_getPanValue (BPMDELAY_ID); 
 PANNER_setPanValue ( panner_class, panValue); 
 out = PANNER_getRight( panner_class, _BPMDELAY_getWetvalue(BPMDELAY_ID)); 
 out; 
); 
function BPMDELAY_create(parrentLayer) 
 local ( BPMDELAY_ID 
 , btGroupBPM 
 , btGroupMUL 
 , delayGainKnob 
 , feedBackKnob 
 , panKnob 
 , maxDelaySize 
 , delayArray 
 , pannner_ 
 , lastRectangle 
 , wetDryKnob 
 , baseClassElementNum 
 ) 
( 
 lastRectangle = RECTANGLE_create(-1000,-1000,gfx_w,gfx_h); 
 btGroupBPM = BUTTONGROUP_create("BTGROUP_BPMDELAY_length"); 
 btGroupMUL = BUTTONGROUP_create("BTGROUP_BPMDELAY_MUL"); 
 delayGainKnob = SLIDERTYPE2_create( "Gain") ; 
 COMPONENT_setMinValue(delayGainKnob,0); 
 COMPONENT_setMaxValue(delayGainKnob,2); 
 COMPONENT_setValue(delayGainKnob,0.5,false); 
 SLIDERTYPE2_setParameterDrawType(delayGainKnob,SLIDERTYPE2_TEXT_TYPE_DB); 
 feedBackKnob = SLIDERTYPE2_create( "FeedBack") ; 
 SLIDERTYPE2_setParameterDrawType(feedBackKnob,SLIDERTYPE2_TEXT_TYPE_PER); 
 panKnob = SLIDERTYPE2_create( "Pan") ; 
 COMPONENT_setValue(panKnob,0.5,false); 
 SLIDERTYPE2_setParameterDrawType(panKnob,SLIDERTYPE2_TEXT_TYPE_PAN); 
 pannner_ = PANNNER_create(); 
 wetDryKnob = SLIDERTYPE2_create( "WetDry") ; 
 COMPONENT_setValue(wetDryKnob,0.5,false); 
 SLIDERTYPE2_setParameterDrawType(wetDryKnob,SLIDERTYPE2_TEXT_TYPE_PER); 
 maxDelaySize = srate*10; 
 delayArray = CURSOLBUFFER_create(maxDelaySize); 
 _BPMDELAY_prepareBtGroup_BPM(btGroupBPM); 
 _BPMDELAY_prepareBtGroup_Mul(btGroupMUL); 
 BPMDELAY_ID = RECTANGLE_create(-1000,-1000,gfx_w,gfx_h); 
 baseClassElementNum = _RECTANGLE_getElementNum(BPMDELAY_ID); 
 STATIC_MASTER_BUFF[BPMDELAY_ID] = "BPM DELAY"; 
 STATIC_MASTER_BUFF[BPMDELAY_ID+1] = baseClassElementNum +16; 
 STATIC_MASTER_BUFF[BPMDELAY_ID +baseClassElementNum+2] = STATIC_MASTER_BUFF[BPMDELAY_ID+1]; 
 STATIC_MASTER_BUFF[BPMDELAY_ID +baseClassElementNum+3] = btGroupBPM; 
 STATIC_MASTER_BUFF[BPMDELAY_ID +baseClassElementNum+4] = btGroupMUL; 
 STATIC_MASTER_BUFF[BPMDELAY_ID +baseClassElementNum+5] = delayGainKnob; 
 STATIC_MASTER_BUFF[BPMDELAY_ID +baseClassElementNum+6] = feedBackKnob; 
 STATIC_MASTER_BUFF[BPMDELAY_ID +baseClassElementNum+7] = panKnob; 
 STATIC_MASTER_BUFF[BPMDELAY_ID +baseClassElementNum+8] = parrentLayer; 
 STATIC_MASTER_BUFF[BPMDELAY_ID +baseClassElementNum+9] = 1; 
 STATIC_MASTER_BUFF[BPMDELAY_ID +baseClassElementNum+10] = delayArray; 
 STATIC_MASTER_BUFF[BPMDELAY_ID +baseClassElementNum+11] = maxDelaySize; 
 STATIC_MASTER_BUFF[BPMDELAY_ID +baseClassElementNum+12] = 0; 
 STATIC_MASTER_BUFF[BPMDELAY_ID +baseClassElementNum+13] = pannner_; 
 STATIC_MASTER_BUFF[BPMDELAY_ID +baseClassElementNum+14] = lastRectangle; 
 STATIC_MASTER_BUFF[BPMDELAY_ID +baseClassElementNum+15] = wetDryKnob; 
 STATIC_MASTER_BUFF[BPMDELAY_ID +baseClassElementNum+16] = 0; 
 STATIC_MASTER_BUFF_ID +=STRUCT_getElementNum(BPMDELAY_ID)+1; 
 LAYER_addChildComponent( parrentLayer , btGroupBPM); 
 LAYER_addChildComponent( parrentLayer , btGroupMUL); 
 LAYER_addChildComponent( parrentLayer , delayGainKnob); 
 LAYER_addChildComponent( parrentLayer , feedBackKnob); 
 LAYER_addChildComponent( parrentLayer , panKnob); 
 LAYER_addChildComponent( parrentLayer , wetDryKnob); 
 _BPMDELAY_calclateDeleySample(BPMDELAY_ID); 
 BPMDELAY_ID; 
); 
@init 
 app_ID = APP_create(); 
 layer_001 = LAYER_create("LAYER01"); 
 comp_Border1 = COMPONENT_create("TEST"); 
 comp_Border2 = COMPONENT_create("TEST2"); 
 comp_BUTTON_01 = BUTTON_create("REC"); 
 comp_BUTTON_02 = BUTTON_create("CIR"); 
 comp_BUTTON_03 = BUTTON_create("HEX"); 
 comp_BUTTON_04 = BUTTON_create("TRI"); 
 comp_BUTTON_05 = BUTTON_create("STA"); 
 COMPONENT_setSliderIndex(comp_BUTTON_01,1); 
 COMPONENT_setSliderIndex(comp_BUTTON_02,2); 
 COMPONENT_setSliderIndex(comp_BUTTON_03,3); 
 COMPONENT_setSliderIndex(comp_BUTTON_04,4); 
 COMPONENT_setSliderIndex(comp_BUTTON_05,5); 
 BUTTON_setOnTextPostFix (comp_BUTTON_01,""); 
 BUTTON_setOffTextPostFix(comp_BUTTON_01,""); 
 BUTTON_setOnTextPostFix (comp_BUTTON_02,""); 
 BUTTON_setOffTextPostFix(comp_BUTTON_02,""); 
 BUTTON_setOnTextPostFix (comp_BUTTON_03,""); 
 BUTTON_setOffTextPostFix(comp_BUTTON_03,""); 
 BUTTON_setOnTextPostFix (comp_BUTTON_04,""); 
 BUTTON_setOffTextPostFix(comp_BUTTON_04,""); 
 BUTTON_setOnTextPostFix (comp_BUTTON_05,""); 
 BUTTON_setOffTextPostFix(comp_BUTTON_05,""); 
 LAYER_addChildComponent(layer_001 , comp_BUTTON_01); 
 LAYER_addChildComponent(layer_001 , comp_BUTTON_02); 
 LAYER_addChildComponent(layer_001 , comp_BUTTON_03); 
 LAYER_addChildComponent(layer_001 , comp_BUTTON_04); 
 LAYER_addChildComponent(layer_001 , comp_BUTTON_05); 
 LAYER_addChildComponent(layer_001 , comp_Border1); 
 LAYER_addChildComponent(layer_001 , comp_Border2); 
 APP_addChildComponent(app_ID,layer_001 ); 
 LAYER_setActive(layer_001 ,true); 
 CANVS_WAVE_L = CANVAS_create(gfx_w,gfx_h); 
 CANVS_WAVE_R = CANVAS_create(gfx_w,gfx_h); 
 PARTICLE_controller = PARTICLE_CONTROLLER_create(); 
 particle_type = PARTICE_DRAW_TYPE_CIRCLE; 
@slider 
 COMPONENT_setValue(comp_BUTTON_01,slider1,false); 
 COMPONENT_setValue(comp_BUTTON_02,slider2,false); 
 COMPONENT_setValue(comp_BUTTON_03,slider3,false); 
 COMPONENT_setValue(comp_BUTTON_04,slider4,false); 
 COMPONENT_setValue(comp_BUTTON_05,slider5,false); 
 APP_SliderChanged(app_ID); 
@block 
 f_max_L = 0;f_min_L = 0; 
 f_max_R = 0;f_min_R = 0; 
@sample 
 f_max_L = max(f_max_L,spl0); 
 f_min_L = min(f_min_L,spl0); 
 f_max_R = max(f_max_R,spl1); 
 f_min_R = min(f_min_R,spl1); 
@gfx 200 400 
 drawBackGrond_color( 10, 120 , 12*4); 
 drawSinWaveCircle(100,0.8,1,0.0043); 
 drawSinWaveCircle(100,0.8,1,0.0043); 
 drawWaveBufferToCanvas(CANVS_WAVE_L 
 ,f_max_L 
 ,f_min_L 
 ,1 
 ,0.5 
 ,1 
 ,80); 
 drawWaveBufferToCanvas(CANVS_WAVE_R 
 ,f_max_R 
 ,f_min_R 
 ,1 
 ,0.6 
 ,1 
 ,0); 
 gfx_a =0.6; 
 CANVAS_blitImage4(CANVS_WAVE_R,1,0); 
 CANVAS_blitImage4(CANVS_WAVE_L,1,0); 
 gfx_a =1; 
 drawDotGrid(20,20,0.04); 
 DBGMESSAGE_drawAllMessage(DBG); 
 PARTICLE_CONTROLLER_update ( PARTICLE_controller ); 
 (true)? 
 ( 
 ( BUTTON_isON(comp_BUTTON_01) == true 
 || BUTTON_isON(comp_BUTTON_02) == true 
 || BUTTON_isON(comp_BUTTON_03) == true 
 || BUTTON_isON(comp_BUTTON_04) == true 
 || BUTTON_isON(comp_BUTTON_05) == true 
 ) ? 
 ( 
 PARTICLE_CONTROLLER_addParticleType4(PARTICLE_controller,particle_type); 
 ); 
 ); 
 ( COMPONENT_isValueChanged( comp_BUTTON_01 )==true)? 
 ( 
 particle_type = PARTICE_DRAW_TYPE_RECT; 
 BUTTON_OFF( comp_BUTTON_02,true); 
 BUTTON_OFF( comp_BUTTON_03,true); 
 BUTTON_OFF( comp_BUTTON_04,true); 
 BUTTON_OFF( comp_BUTTON_05,true); 
 ):( COMPONENT_isValueChanged( comp_BUTTON_02 )==true)? 
 ( 
 particle_type = PARTICE_DRAW_TYPE_CIRCLE; 
 BUTTON_OFF( comp_BUTTON_01,true); 
 BUTTON_OFF( comp_BUTTON_03,true); 
 BUTTON_OFF( comp_BUTTON_04,true); 
 BUTTON_OFF( comp_BUTTON_05,true); 
 ):( COMPONENT_isValueChanged( comp_BUTTON_03 )==true)? 
 ( 
 particle_type = PARTICE_DRAW_TYPE_HEX; 
 BUTTON_OFF( comp_BUTTON_01,true); 
 BUTTON_OFF( comp_BUTTON_02,true); 
 BUTTON_OFF( comp_BUTTON_04,true); 
 BUTTON_OFF( comp_BUTTON_05,true); 
 ):(COMPONENT_isValueChanged( comp_BUTTON_04 )==true)? 
 ( 
 particle_type = PARTICE_DRAW_TYPE_TRI; 
 BUTTON_OFF( comp_BUTTON_01,true); 
 BUTTON_OFF( comp_BUTTON_02,true); 
 BUTTON_OFF( comp_BUTTON_03,true); 
 BUTTON_OFF( comp_BUTTON_05,true); 
 ):( COMPONENT_isValueChanged( comp_BUTTON_05 )==true)? 
 ( 
 particle_type = PARTICE_DRAW_TYPE_STAR; 
 BUTTON_OFF( comp_BUTTON_01,true); 
 BUTTON_OFF( comp_BUTTON_02,true); 
 BUTTON_OFF( comp_BUTTON_03,true); 
 BUTTON_OFF( comp_BUTTON_04,true); 
 ); 
 (time_precise() -lastPTime_ > 0.25)? 
 ( 
 PARTICLE_CONTROLLER_addParticleType2_XY (PARTICLE_controller 
 ,gfx_w/2 
 ,gfx_h/2 
 ,true 
 ); 
 lastPTime_ = time_precise(); 
 ); 
 APP_update(app_ID); 
 ( mouse_cap & 64 ==64 && lastCAP != mouse_cap )? 
 ( 
 DBG_toggle(DBG); 
 ); 
 lastCAP = mouse_cap; 
 ( APP_isWindowResized(app_ID) ==true 
 && APP_isGFX_Enable(app_ID) ==true ) ? 
 ( 
 RECTANGLE_copyTo ( CANVS_WAVE_L,app_ID); 
 RECTANGLE_copyTo ( CANVS_WAVE_R,app_ID); 
 CANVAS_recreateCanvas ( CANVS_WAVE_L ); 
 CANVAS_recreateCanvas ( CANVS_WAVE_R ); 
 RECTANGLE_copyTo ( layer_001 ,app_ID); 
 RECTANGLE_copyTo ( LAYER_002,app_ID); 
 ); 
 ( LAYER_isAreaResized(layer_001 ) ==true) ? 
 ( 
 RECTANGLE_copyTo (comp_Border1,layer_001 ); 
 RECTANGLE_cropFromTopP (comp_Border1,0.025); 
 RECTANGLE_copyTo (comp_Border2,layer_001 ); 
 RECTANGLE_cropFromBottomP(comp_Border2,0.025); 
 RECTANGLE_copyTo ( comp_BUTTON_01,layer_001 ); 
 RECTANGLE_removeFromTop ( comp_BUTTON_01,RECTANGLE_getY2(comp_Border1)); 
 RECTANGLE_cropFromTopP ( comp_BUTTON_01,0.1); 
 RECTANGLE_cropFromLeftP ( comp_BUTTON_01,1/5); 
 RECTANGLE_copyTo ( comp_BUTTON_02,comp_BUTTON_01); 
 RECTANGLE_move ( comp_BUTTON_02,RECTANGLE_getWidth(comp_BUTTON_02),0); 
 RECTANGLE_copyTo ( comp_BUTTON_03,comp_BUTTON_02); 
 RECTANGLE_move ( comp_BUTTON_03,RECTANGLE_getWidth(comp_BUTTON_03),0); 
 RECTANGLE_copyTo ( comp_BUTTON_04,comp_BUTTON_03); 
 RECTANGLE_move ( comp_BUTTON_04,RECTANGLE_getWidth(comp_BUTTON_04),0); 
 RECTANGLE_copyTo ( comp_BUTTON_05,comp_BUTTON_04); 
 RECTANGLE_move ( comp_BUTTON_05,RECTANGLE_getWidth(comp_BUTTON_05),0); 
 RECTANGLE_reduce( comp_BUTTON_01,3,3); 
 RECTANGLE_reduce( comp_BUTTON_02,3,3); 
 RECTANGLE_reduce( comp_BUTTON_03,3,3); 
 RECTANGLE_reduce( comp_BUTTON_04,3,3); 
 RECTANGLE_reduce( comp_BUTTON_05,3,3); 
 ); 
 COMPONENT_setComponentAlpha(comp_Border1,abs(sin($pi*2*mod*2))); 
 mod += 0.01;(mod > 1 )?(mod=0;); 
 RECTANGLE_drawBottomRightText( app_ID,"kawa Particle TEST"); 
