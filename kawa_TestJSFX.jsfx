//====================================================================
desc:_kawa TestJSFX
//====================================================================

// imports
//====================================================================
import kawa_ALL.jsfx-inc
//====================================================================

//====================================================================
// sliders //( this app lib need Continuous number)
//--------------------------------------------------------------------
slider1:0.01<0.001,1,0.0001>FREQ
slider2:0.5<-1,1>GAIN
slider3:0.01<0.01,2>Q

slider10:0.25<0.001,1,0.0001>FREQ
slider11:0.25<-1,1>GAIN
slider12:1<0.1,2>Q


slider20:0<-1,1> OFFSET FREQ
//====================================================================
in_pin: left input
in_pin: right input
out_pin:left output
out_pin:right output
//====================================================================


@init
//====================================================================
    //create APP ID
    //================================================================
    app_ID = APP_create();
    //================================================================
    //create Layer ID
    //================================================================
    layer_001  = LAYER_create("LAYER01");
    layer_002 = LAYER_create("LAYER02");
    //================================================================

    //create Component and add to layer 1 .
    //================================================================
    comp_Border1  = COMPONENT_create("TEST");
    comp_Border2 = COMPONENT_create("TES2T");
    comp_SLIDER_2 = SLIDERTYPE2_create("TEST2");
    comp_KONB_ID  = KNOB_create( "knobTest") ;
    COMPONENT_setSliderIndex(comp_KONB_ID,20); 
    COMPONENT_setSliderIndex(comp_SLIDER_2,1); 
    //----------------------------------------------------------------
    comp_TEXT_DB_L = TEXT_create("text 1"); 
    comp_TEXT_DB_R = TEXT_create("text 2");
    TEXT_setIsDBValueMode(comp_TEXT_DB_L, true );
    TEXT_setIsDBValueMode(comp_TEXT_DB_R, true );
    TEXT_setDBValueModeTextPreFix(comp_TEXT_DB_L, "(L)");
    TEXT_setDBValueModeTextPreFix(comp_TEXT_DB_R, "(R)");
    //----------------------------------------------------------------
    LAYER_addChildComponent(layer_001  , comp_TEXT_DB_L);
    LAYER_addChildComponent(layer_001  , comp_TEXT_DB_R);
    //----------------------------------------------------------------
    canvasFreq = FREQUENCY_create("freq");
    
    //----------------------------------------------------------------
    LAYER_addChildComponent(layer_001  , comp_Border1);
    LAYER_addChildComponent(layer_001  , comp_Border2);
    LAYER_addChildComponent(layer_001  , comp_SLIDER_2);
    LAYER_addChildComponent(layer_001  , comp_KONB_ID);
    LAYER_addChildComponent(layer_001  , canvasFreq);
    //================================================================

    // layer 2
    //================================================================
    comp_BUTTON   = BUTTON_create("TEST3");
    comp_SLIDER_1 = SLIDER_create("TEST4");
    COMPONENT_setSliderIndex(comp_SLIDER_1,1); 
    //----------------------------------------------------------------
    LAYER_addChildComponent(layer_002 , comp_BUTTON);
    LAYER_addChildComponent(layer_002 , comp_SLIDER_1);
    //================================================================


    // layer add to app
    //================================================================
    APP_addChildComponent(app_ID,layer_001 );
    APP_addChildComponent(app_ID,layer_002);
    //================================================================
    LAYER_setActive(layer_001 ,true);
    LAYER_setActive(layer_002,false);
    //================================================================

    // canvase test
    //================================================================
    canvas_WAVE_L = CANVAS_create(gfx_w,gfx_h);
    canvas_WAVE_R = CANVAS_create(gfx_w,gfx_h);
    //================================================================
    
    PARTICLE_controller = PARTICLE_CONTROLLER_create();
    FREQUENCY_changeRbjFilter_activeState(canvasFreq,0,true);
    FREQUENCY_changeRbjFilter_activeState(canvasFreq,1,true);
    FREQUENCY_changeRbjFilter_FilterType(canvasFreq,0,RBJ_FILTER_TYPE_PEAK);
    FREQUENCY_changeRbjFilter_FilterType(canvasFreq,1,RBJ_FILTER_TYPE_LPF);
//    FREQUENCY_changeRbjFilter_activeState(canvasFreq,1,true);
    //================================================================
    
@slider
//====================================================================
    COMPONENT_setValue( comp_SLIDER_2,slider1,false );
    COMPONENT_setValue( comp_KONB_ID,slider20,false );
    COMPONENT_setValue( comp_SLIDER_1,slider1,false );
    
    FREQUENCY_changeRbjFilter_Freq(canvasFreq,0,20000*slider1  + 2000*slider20);
    FREQUENCY_changeRbjFilter_DbGain(canvasFreq,0,9 *slider2);
    FREQUENCY_changeRbjFilter_Q(canvasFreq,0, slider3);
    
    FREQUENCY_changeRbjFilter_Freq(canvasFreq,1,20000*slider10 + 2000*slider20);
    FREQUENCY_changeRbjFilter_DbGain(canvasFreq,1,9 *slider11);
    FREQUENCY_changeRbjFilter_Q(canvasFreq,1, slider12);
    //================================================================
    APP_SliderChanged(app_ID); // notify for update lastValue
    //================================================================
@block
//====================================================================
    COMPONENT_setValue( comp_TEXT_DB_L ,max(max_L,abs(minL)),false);
    COMPONENT_setValue( comp_TEXT_DB_R ,max(max_R,abs(minR)),false);

    //================================================================
    max_L = 0;min_L = 0;
    max_R = 0;min_R = 0;
    //================================================================

@sample
//====================================================================
    max_L = max(max_L,spl0);
    min_L = min(min_L,spl0);
    max_R = max(max_R,spl1);
    min_R = min(min_R,spl1);
    FFT_sampleValue =abs( spl0);
    
    //================================================================
    out_LL = FREQUENCY_processFilter( canvasFreq,spl0);
    spl0 = out_LL;
    spl1 = out_LL;
    
    _FREQUENCY_pushSampleToFFTBuffer(canvasFreq,out_LL );  

@gfx 200 400
//====================================================================

    // direct draw background to
    //================================================================
    drawBackGrond_color( 10, 120 , 12*4);
    drawSinWaveCircle(100,0.8,1,0.0043);
    drawSinWaveCircle(100,0.8,1,0.0043);
    //================================================================
    
    // canvase test
    //================================================================
    drawWaveBufferToCanvas(canvas_WAVE_L
                              ,max_L
                              ,min_L
                              ,40 * COMPONENT_getValue(comp_KONB_ID)
                              ,0.5
                              ,1
                              ,80);
    //================================================================    
    drawWaveBufferToCanvas(canvas_WAVE_R
                              ,max_R
                              ,min_R
                              ,40 * COMPONENT_getValue(comp_SLIDER_2)
                              ,0.6
                              ,1
                              ,0);
    //================================================================
    gfx_a =0.6;
    CANVAS_blitImage4(canvas_WAVE_R,1,0);
    CANVAS_blitImage4(canvas_WAVE_L,1,0);
    gfx_a =1;
    //================================================================
    // final background
    //================================================================
    drawDotGrid(20,20,0.04);
    //================================================================
    
    //================================================================
    FREQUENCY_processFFT(canvasFreq,FFT_sampleValue ) ;
    
    // for debug
    //================================================================
    DBGMESSAGE_drawAllMessage(DBG);
    //================================================================

    // for particle 
    PARTICLE_CONTROLLER_update ( PARTICLE_controller );
    //================================================================
    ( APP_isMouseButtonHoldingPress(app_ID)  ==true) ?      
    (
        PARTICLE_CONTROLLER_addParticleType1(PARTICLE_controller);
        0;
    );
    //================================================================
     (time_precise() -lastPTime_  > 0.25)?
    (
        PARTICLE_CONTROLLER_addParticleType2_XY (PARTICLE_controller
                                                ,gfx_w/2
                                                ,gfx_h/2
                                                ,false
                                               );
       lastPTime_ = time_precise();
    );
    //================================================================


    // App update. check and compare with last event state.(resize or mouse)
    //================================================================
    APP_update(app_ID);
  
  
    ( COMPONENT_isValueChanged ( KNOB_ID) ==true)?
    (
        FREQUENCY_changeRbjFilter_Freq(canvasFreq,0,20000*slider1  + 2000*slider20);
//        FREQUENCY_changeRbjFilter_DbGain(canvasFreq,0,9 *slider2);
//        FREQUENCY_changeRbjFilter_Q(canvasFreq,0, slider3);
        
        FREQUENCY_changeRbjFilter_Freq(canvasFreq,1,20000*slider10 + 2000*slider20);
//        FREQUENCY_changeRbjFilter_DbGain(canvasFreq,1,9 *slider11);
//        FREQUENCY_changeRbjFilter_Q(canvasFreq,1, slider12);
    );
    //================================================================
    ( mouse_cap & 2 ==2 && lastCAP != mouse_cap )?
    (
        (LAYER_isActive(layer_001 )==true )?
        (
            LAYER_setActive(layer_001 ,false );
            LAYER_setActive(layer_002,true );
        ):(
            LAYER_setActive(layer_001 ,true );
            LAYER_setActive(layer_002,false );
        );
        //============================================================
    );
    //================================================================
    ( mouse_cap & 64 ==64 && lastCAP != mouse_cap )?
    (
        DBG_toggle(DBG);
    );
    //================================================================
    lastCAP = mouse_cap;
    //================================================================
    
    // alignment position when resized.
    //================================================================
    ( APP_isWindowResized(app_ID) ==true) ?
    (
        //============================================================
        RECTANGLE_copyTo      ( canvas_WAVE_L,app_ID);
        RECTANGLE_copyTo      ( canvas_WAVE_R,app_ID);
        CANVAS_recreateCanvas ( canvas_WAVE_L ); 
        CANVAS_recreateCanvas ( canvas_WAVE_R );
        //============================================================
        RECTANGLE_copyTo      ( layer_001 ,app_ID);  // layer resize 
        RECTANGLE_copyTo      ( layer_002,app_ID);  // layer resize 
        //============================================================
    );
    //================================================================

    //================================================================
    ( LAYER_isAreaResized(layer_001 ) ==true)   ?
    (
        RECTANGLE_copyTo         (comp_Border1,layer_001 );
        RECTANGLE_cropFromTopP   (comp_Border1,0.025);
        //============================================================
        RECTANGLE_copyTo         (comp_Border2,layer_001 );
        RECTANGLE_cropFromBottomP(comp_Border2,0.025);
        //============================================================
        RECTANGLE_copyTo         (comp_SLIDER_2,layer_001 );
        RECTANGLE_cropFromTopP   (comp_SLIDER_2,0.07);
        RECTANGLE_cropFromRightP (comp_SLIDER_2,1-( 0.61803));
        RECTANGLE_reduce         (comp_SLIDER_2,5,5);
        //============================================================
        RECTANGLE_copyTo         (comp_TEXT_DB_L,layer_001 );
        RECTANGLE_cropFromTopP   (comp_TEXT_DB_L,0.392);
        RECTANGLE_reduceP        (comp_TEXT_DB_L,0.18,0.18);
        //============================================================
        RECTANGLE_copyTo         (comp_TEXT_DB_R,layer_001 );
        RECTANGLE_cropFromBottomP(comp_TEXT_DB_R,0.382);
        RECTANGLE_reduceP        (comp_TEXT_DB_R,0.18,0.18);
        //============================================================
        RECTANGLE_copyTo         (comp_KONB_ID,layer_001 );
        RECTANGLE_cropFromBottomP(comp_KONB_ID,0.3);
        RECTANGLE_reduce         (comp_KONB_ID,50,5);
        //============================================================
        RECTANGLE_copyTo         (canvasFreq,layer_001 );
        RECTANGLE_cropFromTopP   (canvasFreq,0.7);
        RECTANGLE_reduce         (canvasFreq,0,5);
        RECTANGLE_reduceP        (canvasFreq,0.025,0.1);
        //============================================================
    );
    //================================================================

    //================================================================
    ( LAYER_isAreaResized(layer_002) == true) ?
    (
        RECTANGLE_copyTo        (comp_BUTTON,layer_002);
        //============================================================
        RECTANGLE_cropFromLeftP (comp_BUTTON,0.5);
        RECTANGLE_reduceP       (comp_BUTTON,0.1,0.1);
        //============================================================
        RECTANGLE_copyTo        (comp_SLIDER_1,layer_002);
        RECTANGLE_cropFromRightP(comp_SLIDER_1,0.5);
        RECTANGLE_reduceP       (comp_SLIDER_1,0.1,0.1);
        //============================================================
    );
    //================================================================

    // if animation
    //================================================================
    COMPONENT_setComponentAlpha(comp_Border1,abs(sin($pi*2*mod*2)));
    mod += 0.01;(mod > 1 )?(mod=0;);
    //================================================================

    // plugin Title Str
    //================================================================
      RECTANGLE_drawBottomRightText( app_ID,"kawa Test");
    //================================================================
    
    
    __lastTouchedCOmponent_ID = GetLastTouchedComponent();
    #className = #;
    sprintf(className,STRUCT_getStructType( __lastTouchedCOmponent_ID ) );
    
//====================================================================
// 続
