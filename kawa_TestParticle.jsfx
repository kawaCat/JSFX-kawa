//====================================================================
desc:kawa TestParticle
//====================================================================

// imports
//====================================================================
import kawa_ALL.jsfx-inc
//=================================================================


//====================================================================
// sliders
//--------------------------------------------------------------------
//slider1:0.25<0.0,1>parameter1
//====================================================================


@init
//====================================================================
    //create APP ID
    //================================================================
    APP_ID = APP_create();
    //================================================================

    //create Layer ID
    //================================================================
    LAYER_001 = LAYER_create("LAYER01");
    //================================================================

    //create Component and add to layer 1 .
    //================================================================
    TEST_comp  = COMPONENT_create("TEST");
    TEST_comp2 = COMPONENT_create("TEST2");
    //----------------------------------------------------------------
    BUTTON_01 = BUTTON_create("BT:01");
    BUTTON_02 = BUTTON_create("BT:02");
    BUTTON_03 = BUTTON_create("BT:03");
    BUTTON_04 = BUTTON_create("BT:04");
    BUTTON_05 = BUTTON_create("BT:05");
    //----------------------------------------------------------------
    LAYER_addChildComponent(LAYER_001 , BUTTON_01);
    LAYER_addChildComponent(LAYER_001 , BUTTON_02);
    LAYER_addChildComponent(LAYER_001 , BUTTON_03);
    LAYER_addChildComponent(LAYER_001 , BUTTON_04);
    LAYER_addChildComponent(LAYER_001 , BUTTON_05);
    //----------------------------------------------------------------
    LAYER_addChildComponent(LAYER_001 , TEST_comp);
    LAYER_addChildComponent(LAYER_001 , TEST_comp2);
    //================================================================

    // layer add to app
    //================================================================
    APP_addChildComponent(APP_ID,LAYER_001);
    //================================================================
    LAYER_setActive(LAYER_001,true);
    //================================================================

    // canvase test
    //================================================================
    CANVS_WAVE_L = CANVAS_create(400,0);
    CANVS_WAVE_R = CANVAS_create(400,0);
    //================================================================
    
    PARTICLE_controller = PARTICLE_CONTROLLER_create();
    //================================================================

@slider
//====================================================================
    

@block
//====================================================================
    max_L = 0;min_L = 0;
    max_R = 0;min_R = 0;
    //================================================================
   

@sample
//====================================================================
    max_L = max(max_L,spl0);
    min_L = min(min_L,spl0);
    max_R = max(max_R,spl1);
    min_R = min(min_R,spl1);

@gfx 200 400
//====================================================================

    // direct draw background to
    //================================================================
    drawBackGrond_color( 10, 120 , 12*4);
    drawSinWaveCircle(100,0.8,1,0.0043);
    drawSinWaveCircle(100,0.8,1,0.0043);
    //================================================================
    
    // canvase test
    //================================================================
    drawWaveBufferToCanvas(CANVS_WAVE_L
                              ,max_L
                              ,min_L
                              ,3
                              ,0.5
                              ,1
                              ,80);
    //================================================================    
    drawWaveBufferToCanvas(CANVS_WAVE_R
                              ,max_R
                              ,min_R
                              ,3
                              ,0.6
                              ,1
                              ,0);
    //================================================================
    gfx_a =0.6;
    CANVAS_blitImage4(CANVS_WAVE_R,1,0);
    CANVAS_blitImage4(CANVS_WAVE_L,1,0);
    gfx_a =1;
    //================================================================
    // final background
    //================================================================
    drawDotGrid(20,20,0.04);
    //================================================================


    // for debug
    //================================================================
    DBGMESSAGE_drawAllMessage(DBG);
    //================================================================

    // for particle 
    PARTICLE_CONTROLLER_update ( PARTICLE_controller );
    //================================================================
    //( APP_isMouseButtonHoldingPress(APP_ID)  ==true) ?      
    //( APP_isMouseButtonPressed(APP_ID)  ==true) ?
    (true)?
    (
        PARTICLE_CONTROLLER_addParticleType1(PARTICLE_controller);
        0;
    );
    //================================================================
    (time_precise() -lastPTime_  > 0.25)?
    (
        PARTICLE_CONTROLLER_addParticleType2_XY (PARTICLE_controller
                                                ,gfx_w/2
                                                ,gfx_h/2
                                                ,true
                                               );
       lastPTime_ = time_precise();
    );
    //================================================================


    // App update. check and compare with last event state.(resize or mouse)
    //================================================================
    APP_update(APP_ID);
  
    //================================================================
    ( mouse_cap & 64 ==64 && lastCAP != mouse_cap )?
    (
        DBG_toggle(DBG);
    );
    //================================================================
    lastCAP = mouse_cap;
    //================================================================
    
    // alignment position when resized.
    //================================================================
    (    APP_isWindowResized(APP_ID) ==true
      && APP_isGFX_Enable(APP_ID) ==true ) ?
    (
        //============================================================
        RECTANGLE_copyTo      ( CANVS_WAVE_L,APP_ID);
        RECTANGLE_copyTo      ( CANVS_WAVE_R,APP_ID);
        CANVAS_recreateCanvas ( CANVS_WAVE_L ); 
        CANVAS_recreateCanvas ( CANVS_WAVE_R );
        //============================================================
        RECTANGLE_copyTo      ( LAYER_001,APP_ID);  // layer resize 
        RECTANGLE_copyTo      ( LAYER_002,APP_ID);  // layer resize 
        //============================================================
    );
    //================================================================

    //================================================================
    ( LAYER_isAreaResized(LAYER_001) ==true)   ?
    (
        //============================================================
        RECTANGLE_copyTo         (TEST_comp,LAYER_001);
        RECTANGLE_cropFromTopP   (TEST_comp,0.025);
        //============================================================
        RECTANGLE_copyTo         (TEST_comp2,LAYER_001);
        RECTANGLE_cropFromBottomP(TEST_comp2,0.025);
        //============================================================
        RECTANGLE_copyTo         ( BUTTON_01,LAYER_001);
        RECTANGLE_reduceP        ( BUTTON_01,0,0.1);
        RECTANGLE_cropFromTopP   ( BUTTON_01,0.1);
        RECTANGLE_cropFromLeftP  ( BUTTON_01,1/5);
        //============================================================
        RECTANGLE_copyTo         ( BUTTON_02,BUTTON_01);
        RECTANGLE_move           ( BUTTON_02,RECTANGLE_getWidth(BUTTON_02),0);
        //============================================================
        RECTANGLE_copyTo         ( BUTTON_03,BUTTON_02);
        RECTANGLE_move           ( BUTTON_03,RECTANGLE_getWidth(BUTTON_03),0);
        //============================================================
        RECTANGLE_copyTo         ( BUTTON_04,BUTTON_03);
        RECTANGLE_move           ( BUTTON_04,RECTANGLE_getWidth(BUTTON_04),0);
        //============================================================
        RECTANGLE_copyTo         ( BUTTON_05,BUTTON_04);
        RECTANGLE_move           ( BUTTON_04,RECTANGLE_getWidth(BUTTON_05),0);
        //============================================================
        RECTANGLE_reduce( BUTTON_01,3,3);
        RECTANGLE_reduce( BUTTON_02,3,3);
        RECTANGLE_reduce( BUTTON_03,3,3);
        RECTANGLE_reduce( BUTTON_04,3,3);
        RECTANGLE_reduce( BUTTON_05,3,3);
        //============================================================
    );
    //================================================================


    //================================================================

    // if animation
    //================================================================
    COMPONENT_setComponentAlpha(TEST_comp,abs(sin($pi*2*mod*2)));
    mod += 0.01;(mod > 1 )?(mod=0;);
    //================================================================

    // plugin Title Str
    //================================================================
      RECTANGLE_drawBottomRightText( APP_ID,"kawa Particle TEST");
    //================================================================
    
    
//====================================================================
// ç¶š
