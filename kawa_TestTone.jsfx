//====================================================================
desc:_kawa TestTone
//====================================================================

// imports
//====================================================================
import kawa_ALL.jsfx-inc
//====================================================================

//====================================================================
// sliders //( this app lib need Continuous number)
//--------------------------------------------------------------------
slider1:0.25<0.0,1>RATE
slider2:0.25<0.0,1>-GAIN
slider3:0 <0,1,1>-SIN_ON
slider4:0 <0,1,1>-SAW_ON
slider5:0 <0,1,1>-TRI_ON
slider6:0 <0,1,1>-RECT_ON
slider7:0 <0,1,1>-BLIT_ON
slider8:0 <0,1,{Off,On}> KeyPitch Mode 
slider9:60<12,127,1> KeyPitch Num
slider10:60<12,127,1{C-1,C#-1,D-1,D#-1,E-1,F-1,F#-1,G-1,G#-1,A-1,A#-1,B-1,C0,C#0,D0,D#0,E0,F0,F#0,G0,G#0,A0,A#0,B0,C1,C#1,D1,D#1,E1,F1,F#1,G1,G#1,A1,A#1,B1,C2,C#2,D2,D#2,E2,F2,F#2,G2,G#2,A2,A#2,B2,C3,C#3,D3,D#3,E3,F3,F#3,G3,G#3,A3,A#3,B3,C4,C#4,D4,D#4,E4,F4,F#4,G4,G#4,A4,A#4,B4,C5,C#5,D5,D#5,E5,F5,F#5,G5,G#5,A5,A#5,B5,C6,C#6,D6,D#6,E6,F6,F#6,G6,G#6,A6,A#6,B6,C7,C#7,D7,D#7,E7,F7,F#7,G7,G#7,A7,A#7,B7,C8,C#8,D8,D#8,E8,F8,F#8,G8,G#8,A8,A#8,B8,C9,C#9,D9,D#9,E9,F9,F#9,G9}>Note (read only)
slider11:0,Frequency Read Only
//====================================================================
slider12:1.7 <1.7,300,0.1>Attack Time MS
slider13:100 <0,300,0.1>Decay Time MS
slider14:1 <0,1,0.1>Sustain Level 
slider15:5 <0,400,0.1>Release Time MS
//====================================================================
in_pin: in1
in_pin: in1
out_pin: in1
out_pin: in1
//====================================================================
options:gmem=kawaScript_Gmem


@init
//====================================================================
   
   
    //create APP ID
    //================================================================
    APP_ID = APP_create();
    //================================================================

    //create Layer ID
    //================================================================
    LAYER_001 = LAYER_create("LAYER01");
    //================================================================

    //create Component and add to layer 1 .
    //================================================================
    TEST_comp  = COMPONENT_create("TEST");
    TEST_comp2 = COMPONENT_create("TEST2");
    //----------------------------------------------------------------
    BUTTON_01 = BUTTON_create("BLIT ");
    BUTTON_02 = BUTTON_create(" SIN ");
    BUTTON_03 = BUTTON_create(" SAW ");
    BUTTON_04 = BUTTON_create("RECT ");
    BUTTON_05 = BUTTON_create(" TRI ");
    COMPONENT_setSliderIndex(BUTTON_01,7);
    COMPONENT_setSliderIndex(BUTTON_02,3);
    COMPONENT_setSliderIndex(BUTTON_03,4);
    COMPONENT_setSliderIndex(BUTTON_04,5);
    COMPONENT_setSliderIndex(BUTTON_05,6);
    //----------------------------------------------------------------
    KNOB_HZ_ID  = KNOB_create( "Hz") ;
    COMPONENT_setMinValue(KNOB_HZ_ID,40);
    COMPONENT_setMaxValue(KNOB_HZ_ID,4400);
    COMPONENT_setValue(KNOB_HZ_ID,(440-40)/(4400-40),false);
    COMPONENT_setSliderIndex(KNOB_HZ_ID,1);
    //----------------------------------------------------------------
    KNOB_GAIN_ID  = KNOB_create( "GAIN") ;
    COMPONENT_setMinValue(KNOB_GAIN_ID,0);
    COMPONENT_setMaxValue(KNOB_GAIN_ID,2);
    COMPONENT_setValue(KNOB_GAIN_ID,0.5,false);
    KNOB_setDBTextMode(KNOB_GAIN_ID,true);
    COMPONENT_setSliderIndex(KNOB_GAIN_ID,2);
    //----------------------------------------------------------------
    LAYER_addChildComponent(LAYER_001 , KNOB_HZ_ID);
    LAYER_addChildComponent(LAYER_001 , KNOB_GAIN_ID);
    LAYER_addChildComponent(LAYER_001 , BUTTON_01);
    LAYER_addChildComponent(LAYER_001 , BUTTON_02);
    LAYER_addChildComponent(LAYER_001 , BUTTON_03);
    LAYER_addChildComponent(LAYER_001 , BUTTON_04);
    LAYER_addChildComponent(LAYER_001 , BUTTON_05);
    //----------------------------------------------------------------
    LAYER_addChildComponent(LAYER_001 , TEST_comp);
    LAYER_addChildComponent(LAYER_001 , TEST_comp2);
    //================================================================

    // layer add to app
    //================================================================
    APP_addChildComponent(APP_ID,LAYER_001);
    //================================================================
    LAYER_setActive(LAYER_001,true);
    //================================================================

    // canvase test
    //================================================================
    CANVS_WAVE_L = CANVAS_create(gfx_w,gfx_h);
    CANVS_WAVE_R = CANVAS_create(gfx_w,gfx_h);
    //================================================================
    
    PARTICLE_controller = PARTICLE_CONTROLLER_create();
    //================================================================
    
    //DSP
    //================================================================
    WAVE_TABLE01 = WAVETABLE_create(srate);
    WAVETABLE_prepareForPlay(WAVE_TABLE01);
    WAVETABLE_setOscType (WAVE_TABLE01,WT_OSC_TYPE_SINE );
    //================================================================ 
    
    //================================================================
    //Envelope
    //================================================================
    testEnvlope_ID = MIDI_ADSR_create();
    
    
    
    
@slider
//====================================================================
    (slider8 == 0)?
    (
        COMPONENT_setValue(KNOB_HZ_ID,slider1,false);
        COMPONENT_setValue(KNOB_GAIN_ID,slider2,false);
        //============================================================
        COMPONENT_setComponentAlpha (KNOB_HZ_ID,1 );
        COMPONENT_setActive(KNOB_HZ_ID,true);
    ):
    (
        COMPONENT_setValue(KNOB_GAIN_ID,slider2,false);
        pitchFreq = pitchNumberToFreq(slider9,440);
        WAVETABLE_setFrequency(WAVE_TABLE01,pitchFreq);
        slider10 = slider9-12;
        slider11 = pitchFreq;
        //============================================================
        COMPONENT_setComponentAlpha (KNOB_HZ_ID,0.6 );
        COMPONENT_setActive(KNOB_HZ_ID,false);
    );
    //================================================================
    COMPONENT_setValue(BUTTON_01,slider7,false);
    COMPONENT_setValue(BUTTON_02,slider3,false);
    COMPONENT_setValue(BUTTON_03,slider4,false);
    COMPONENT_setValue(BUTTON_04,slider5,false);
    COMPONENT_setValue(BUTTON_05,slider6,false);
    //================================================================
    APP_SliderChanged(APP_ID); // notify for update lastValue
    //================================================================
    MIDI_ADSR_setAttackTime   (testEnvlope_ID,slider12);
    MIDI_ADSR_setDecayTime    (testEnvlope_ID,slider13);
    MIDI_ADSR_setSustaineLevel(testEnvlope_ID,slider14);
    MIDI_ADSR_setReleaseTime  (testEnvlope_ID,slider15);
    //================================================================
    
@block
//====================================================================
    max_L = 0;min_L = 0;
    max_R = 0;min_R = 0;
    //================================================================
    
   
@sample
//====================================================================
    max_L = max(max_L,spl0);
    min_L = min(min_L,spl0);
    max_R = max(max_R,spl1);
    min_R = min(min_R,spl1);
    //================================================================
    AA =  gmem[0];
    (BUTTON_isOn(BUTTON_01) ==true)?
    (
        WAVETABLE_setTableMode(WAVE_TABLE01,WT_TABLE_MODE_BANDLIMIT);
    ):
    (
        WAVETABLE_setTableMode(WAVE_TABLE01,WT_TABLE_MODE_NORAML);
    );
    //================================================================
    
    
    //================================================================
    
    WAVETABLE_tickReadIndex(WAVE_TABLE01);
    //================================================================
    (BUTTON_isOn(BUTTON_02) ==true)?
    (
        WAVETABLE_setOscType (WAVE_TABLE01,WT_OSC_TYPE_SINE );
        sine = WAVETABLE_doOscillate(WAVE_TABLE01,false);
        spl0 +=  sine * COMPONENT_getParameteredValue(KNOB_GAIN_ID);
        spl1 +=  sine * COMPONENT_getParameteredValue(KNOB_GAIN_ID);
        //============================================================
    );
    (BUTTON_isOn(BUTTON_03) ==true)?
    (
        WAVETABLE_setOscType (WAVE_TABLE01,WT_OSC_TYPE_SAW);
        sine = WAVETABLE_doOscillate(WAVE_TABLE01,false);
        spl0 +=  sine * COMPONENT_getParameteredValue(KNOB_GAIN_ID);
        spl1 +=  sine * COMPONENT_getParameteredValue(KNOB_GAIN_ID);
        //============================================================
    );
    (BUTTON_isOn(BUTTON_04) ==true)?
    (
        WAVETABLE_setOscType (WAVE_TABLE01,WT_OSC_TYPE_SQUARE);
        sine = WAVETABLE_doOscillate(WAVE_TABLE01,false);
        spl0 +=  sine * COMPONENT_getParameteredValue(KNOB_GAIN_ID);
        spl1 +=  sine * COMPONENT_getParameteredValue(KNOB_GAIN_ID);
        //============================================================
    );
    (BUTTON_isOn(BUTTON_05) ==true)?
    (
        WAVETABLE_setOscType (WAVE_TABLE01,WT_OSC_TYPE_TRI);
        sine = WAVETABLE_doOscillate(WAVE_TABLE01,false);
        spl0 +=  sine * COMPONENT_getParameteredValue(KNOB_GAIN_ID);
        spl1 +=  sine * COMPONENT_getParameteredValue(KNOB_GAIN_ID);
        //============================================================
    );
    //================================================================
    
    MIDI_NOTE_ON = false; //reset
    //================================================================
    while ( midirecv(offset,msg1,msg2,msg3)) 
    ( 
        //============================================================
        // MIDI_NOTE_ON = false; //reset
        //============================================================
        //note on , msg2 = note,msg3 = velocity
       (    msg1 == $x90 // note ON (DEC 144)
         && msg3 !=0  )? 
       (
            //========================================================
            // MIDI_NOTE_ON = true;
            NOTECOUNT +=1;
            _pitchFreq = pitchNumberToFreq(msg2,440);
            WAVETABLE_setFrequency(WAVE_TABLE01,_pitchFreq);
            //========================================================
       ):( msg1 == $x80 )?  // note OFF (DEC 128)
       (     
            //========================================================
            //MIDI_NOTE_ON = false;
            NOTECOUNT -= 1;
            //========================================================
       ) : (
            // Control or 
            //========================================================
            0;
            //========================================================
       );
        //============================================================
        // midi thuru all event
        midisend(offset,msg1,msg2,msg3);// passthrough other events
    );
    //================================================================
    (NOTECOUNT >0)?
    (
        MIDI_NOTE_ON =true;
    );
    //================================================================
    
    
    //  a One note Envelope
    //================================================================
    (   MIDI_NOTE_ON == true  ) ?
    (
        //============================================================
        MIDI_ADSR_toAttackState (testEnvlope_ID );
        //============================================================
        sine = WAVETABLE_doOscillate(WAVE_TABLE01,false);
        gain    = COMPONENT_getParameteredValue(KNOB_GAIN_ID);
        envGain =MIDI_ADSR_getEnvelopeValue( testEnvlope_ID);
        //============================================================
        spl0 += sine * envGain * gain;
        spl1 += sine * envGain * gain;
        //============================================================
    ):(
        ( MIDI_ADSE_isRunning(testEnvlope_ID ))?
        (
            //========================================================
            MIDI_ADSR_toReleaseState(testEnvlope_ID );
            //========================================================
            sine = WAVETABLE_doOscillate(WAVE_TABLE01,false);
            gain    = COMPONENT_getParameteredValue(KNOB_GAIN_ID);
            envGain =MIDI_ADSR_getEnvelopeValue( testEnvlope_ID);
            //========================================================
            spl0 += sine * envGain * gain;
            spl1 += sine * envGain * gain;
        ):(
            (slider8 == 0)?
            (
                WAVETABLE_setFrequency(WAVE_TABLE01,(4400)*COMPONENT_getValue(KNOB_HZ_ID));
            ):(
                pitchFreq = pitchNumberToFreq(slider9,440);
                WAVETABLE_setFrequency(WAVE_TABLE01,pitchFreq);
            );
            //========================================================
        )
        //============================================================
    );
    //================================================================
@gfx 200 400
//====================================================================

    // direct draw background to
    //================================================================
    drawBackGrond_black( 10);
    drawSinWaveCircle(50,1,0.8,0.0043);
    drawSinWaveCircle(50,1,0.8,0.0043);
    //================================================================
    
    // canvase test
    //================================================================
    drawWaveBufferToCanvas( CANVS_WAVE_L
                          , max_L
                          , min_L
                          , 3
                          , 0.5
                          , 1
                          , 80);
    //================================================================    
    drawWaveBufferToCanvas( CANVS_WAVE_R
                          , max_R
                          , min_R
                          , 3
                          , 0.6
                          , 1
                          , 0);
    //================================================================
    gfx_a =0.6;
    CANVAS_blitImage4(CANVS_WAVE_R,1,0);
    CANVAS_blitImage4(CANVS_WAVE_L,1,0);
    gfx_a =1;
    //================================================================
    // final background
    //================================================================
    drawDotGrid(10,10,0.04);
    //================================================================

    // for debug
    //================================================================
    DBGMESSAGE_drawAllMessage(DBG);
    //================================================================

    // for particle 
    PARTICLE_CONTROLLER_update ( PARTICLE_controller );
    //================================================================
    (time_precise() -lastPTime_  > 0.55)?
    (
        PARTICLE_CONTROLLER_addParticleType2_XY (PARTICLE_controller
                                                ,gfx_w/2
                                                ,gfx_h/2
                                                ,false
                                                );
        //============================================================
        lastPTime_ = time_precise();
    );
    //================================================================

    // App update. check and compare with last event state.(resize or mouse)
    //================================================================
    APP_update(APP_ID);
  
    //================================================================
    ( mouse_cap & 64 ==64 && lastCAP != mouse_cap )?
    (
        DBG_toggle(DBG);
    );
    //================================================================
    lastCAP = mouse_cap;
    //================================================================
    
    // alignment position when resized.
    //================================================================
    (    APP_isWindowResized(APP_ID) ==true
      && APP_isGFX_Enable(APP_ID) ==true ) ?
    (
        //============================================================
        RECTANGLE_copyTo      ( CANVS_WAVE_L,APP_ID);
        RECTANGLE_copyTo      ( CANVS_WAVE_R,APP_ID);
        CANVAS_recreateCanvas ( CANVS_WAVE_L ); 
        CANVAS_recreateCanvas ( CANVS_WAVE_R );
        //============================================================
        RECTANGLE_copyTo      ( LAYER_001,APP_ID);  // layer resize 
        RECTANGLE_copyTo      ( LAYER_002,APP_ID);  // layer resize 
        //============================================================
    );
    //================================================================

    //================================================================
    ( LAYER_isAreaResized(LAYER_001) ==true)   ?
    (
        //============================================================
        RECTANGLE_copyTo         (TEST_comp,LAYER_001);
        RECTANGLE_cropFromTopP   (TEST_comp,0.025);
        //============================================================
        RECTANGLE_copyTo         (TEST_comp2,LAYER_001);
        RECTANGLE_cropFromBottomP(TEST_comp2,0.025);
        //============================================================
        RECTANGLE_copyTo         ( BUTTON_01,LAYER_001);
        RECTANGLE_moveP          ( BUTTON_01,0,0.025);
        RECTANGLE_cropFromTopP   ( BUTTON_01,0.1);
        RECTANGLE_cropFromLeftP  ( BUTTON_01,1/5);
        //============================================================
        RECTANGLE_copyTo         ( BUTTON_02,BUTTON_01);
        RECTANGLE_move           ( BUTTON_02,RECTANGLE_getWidth(BUTTON_02),0);
        //============================================================
        RECTANGLE_copyTo         ( BUTTON_03,BUTTON_02);
        RECTANGLE_move           ( BUTTON_03,RECTANGLE_getWidth(BUTTON_03),0);
        //============================================================
        RECTANGLE_copyTo         ( BUTTON_04,BUTTON_03);
        RECTANGLE_move           ( BUTTON_04,RECTANGLE_getWidth(BUTTON_04),0);
        //============================================================
        RECTANGLE_copyTo         ( BUTTON_05,BUTTON_04);
        RECTANGLE_move           ( BUTTON_04,RECTANGLE_getWidth(BUTTON_05),0);
        //============================================================
        RECTANGLE_reduce( BUTTON_01,3,3);
        RECTANGLE_reduce( BUTTON_02,3,3);
        RECTANGLE_reduce( BUTTON_03,3,3);
        RECTANGLE_reduce( BUTTON_04,3,3);
        RECTANGLE_reduce( BUTTON_05,3,3);
        //============================================================
        
        //============================================================
        RECTANGLE_copyTo         (KNOB_HZ_ID,LAYER_001);
        RECTANGLE_removeFromTop  (KNOB_HZ_ID,RECTANGLE_getY2(BUTTON_05));
        RECTANGLE_cropFromLeftP  (KNOB_HZ_ID,0.5);
        RECTANGLE_reduce         (KNOB_HZ_ID,10,10);
        //============================================================
        RECTANGLE_copyTo         (KNOB_GAIN_ID,LAYER_001);
        RECTANGLE_removeFromTop  (KNOB_GAIN_ID,RECTANGLE_getY2(BUTTON_05));
        RECTANGLE_cropFromRightP (KNOB_GAIN_ID,0.5);
        RECTANGLE_reduce         (KNOB_GAIN_ID,10,10);
        //============================================================
    );
    //================================================================

    //================================================================
    // if animation
    //================================================================
    COMPONENT_setComponentAlpha(TEST_comp,abs(sin($pi*2*mod*2)));
    mod += 0.01;(mod > 1 )?(mod=0;);
    //================================================================

    // plugin Title Str
    //================================================================
    RECTANGLE_drawBottomRightText( APP_ID,"kawa Particle TEST");
    //================================================================
    drawHex(gfx_w/2,gfx_h/2,40,$pi*2*mod*2,false);
    //================================================================
    
//====================================================================
// 続
