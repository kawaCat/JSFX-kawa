//====================================================================
desc:kawa TestTone
//====================================================================

// imports
//====================================================================
import kawa_ALL.jsfx-inc
//====================================================================

//====================================================================
// sliders
//--------------------------------------------------------------------
slider1:0.25<0.0,1>-RATE
slider2:0.25<0.0,1>-GAIN
slider3:0 <0,1,1>-SIN_ON
slider4:0 <0,1,1>-SAW_ON
slider5:0 <0,1,1>-TRI_ON
slider6:0 <0,1,1>-RECT_ON
slider7:0 <0,1,1>-BLIT_ON
//====================================================================

@init
//====================================================================
    //create APP ID
    //================================================================
    APP_ID = APP_create();
    //================================================================

    //create Layer ID
    //================================================================
    LAYER_001 = LAYER_create("LAYER01");
    //================================================================

    //create Component and add to layer 1 .
    //================================================================
    TEST_comp  = COMPONENT_create("TEST");
    TEST_comp2 = COMPONENT_create("TEST2");
    //----------------------------------------------------------------
    BUTTON_01 = BUTTON_create("BLIT ");
    BUTTON_02 = BUTTON_create(" SIN ");
    BUTTON_03 = BUTTON_create(" SAW ");
    BUTTON_04 = BUTTON_create("RECT ");
    BUTTON_05 = BUTTON_create(" TRI ");
    COMPONENT_setSliderIndex(BUTTON_01,7);
    COMPONENT_setSliderIndex(BUTTON_02,3);
    COMPONENT_setSliderIndex(BUTTON_03,4);
    COMPONENT_setSliderIndex(BUTTON_04,5);
    COMPONENT_setSliderIndex(BUTTON_05,6);
    //----------------------------------------------------------------
    KNOB_HZ_ID  = KNOB_create( "Hz") ;
    COMPONENT_setMinValue(KNOB_HZ_ID,40);
    COMPONENT_setMaxValue(KNOB_HZ_ID,4400);
    COMPONENT_setValue(KNOB_HZ_ID,(440-40)/(4400-40),false);
    COMPONENT_setSliderIndex(KNOB_HZ_ID,1);
    //----------------------------------------------------------------
    KNOB_GAIN_ID  = KNOB_create( "GAIN") ;
    COMPONENT_setMinValue(KNOB_GAIN_ID,0);
    COMPONENT_setMaxValue(KNOB_GAIN_ID,2);
    COMPONENT_setValue(KNOB_GAIN_ID,0.5,false);
    KNOB_setDBTextMode(KNOB_GAIN_ID,true);
    COMPONENT_setSliderIndex(KNOB_GAIN_ID,2);
    //----------------------------------------------------------------
    LAYER_addChildComponent(LAYER_001 , KNOB_HZ_ID);
    LAYER_addChildComponent(LAYER_001 , KNOB_GAIN_ID);
    LAYER_addChildComponent(LAYER_001 , BUTTON_01);
    LAYER_addChildComponent(LAYER_001 , BUTTON_02);
    LAYER_addChildComponent(LAYER_001 , BUTTON_03);
    LAYER_addChildComponent(LAYER_001 , BUTTON_04);
    LAYER_addChildComponent(LAYER_001 , BUTTON_05);
    //----------------------------------------------------------------
    LAYER_addChildComponent(LAYER_001 , TEST_comp);
    LAYER_addChildComponent(LAYER_001 , TEST_comp2);
    //================================================================

    // layer add to app
    //================================================================
    APP_addChildComponent(APP_ID,LAYER_001);
    //================================================================
    LAYER_setActive(LAYER_001,true);
    //================================================================

    // canvase test
    //================================================================
    CANVS_WAVE_L = CANVAS_create(gfx_w,gfx_h);
    CANVS_WAVE_R = CANVAS_create(gfx_w,gfx_h);
    //================================================================
    
    PARTICLE_controller = PARTICLE_CONTROLLER_create();
    //================================================================
    
    //DSP
    //================================================================
    WAVE_TABLE01 = WAVETABLE_create(srate);
    WAVETABLE_prepareForPlay(WAVE_TABLE01);
    WAVETABLE_setOscType (WAVE_TABLE01,WT_OSC_TYPE_SINE );
    //================================================================ 
    
@slider
//====================================================================
    COMPONENT_setValue(KNOB_HZ_ID,slider1,false);
    COMPONENT_setValue(KNOB_GAIN_ID,slider2,false);
    COMPONENT_setValue(BUTTON_01,slider7,false);
    COMPONENT_setValue(BUTTON_02,slider3,false);
    COMPONENT_setValue(BUTTON_03,slider4,false);
    COMPONENT_setValue(BUTTON_04,slider5,false);
    COMPONENT_setValue(BUTTON_05,slider6,false);
    //================================================================
    
    
@block
//====================================================================
    max_L = 0;min_L = 0;
    max_R = 0;min_R = 0;
    //================================================================
    
    
    
@sample
//====================================================================
    max_L = max(max_L,spl0);
    min_L = min(min_L,spl0);
    max_R = max(max_R,spl1);
    min_R = min(min_R,spl1);
    //================================================================
    
    (BUTTON_isOn(BUTTON_01) ==true)?
    (
        WAVETABLE_setTableMode(WAVE_TABLE01,WT_TABLE_MODE_BANDLIMIT);
    ):
    (
        WAVETABLE_setTableMode(WAVE_TABLE01,WT_TABLE_MODE_NORAML);
    );
    //================================================================
    
    WAVETABLE_setFrequency(WAVE_TABLE01,(4400)*COMPONENT_getValue(KNOB_HZ_ID));
    WAVETABLE_tickReadIndex(WAVE_TABLE01);
    //================================================================
    (BUTTON_isOn(BUTTON_02) ==true)?
    (
        WAVETABLE_setOscType (WAVE_TABLE01,WT_OSC_TYPE_SINE );
        sine = WAVETABLE_doOscillate(WAVE_TABLE01,false);
        spl0 +=  sine * COMPONENT_getParameteredValue(KNOB_GAIN_ID);
        spl1 +=  sine * COMPONENT_getParameteredValue(KNOB_GAIN_ID);
        //============================================================
    );
    (BUTTON_isOn(BUTTON_03) ==true)?
    (
        WAVETABLE_setOscType (WAVE_TABLE01,WT_OSC_TYPE_SAW);
        sine = WAVETABLE_doOscillate(WAVE_TABLE01,false);
        spl0 +=  sine * COMPONENT_getParameteredValue(KNOB_GAIN_ID);
        spl1 +=  sine * COMPONENT_getParameteredValue(KNOB_GAIN_ID);
        //============================================================
    );
    (BUTTON_isOn(BUTTON_04) ==true)?
    (
        WAVETABLE_setOscType (WAVE_TABLE01,WT_OSC_TYPE_SQUARE);
        sine = WAVETABLE_doOscillate(WAVE_TABLE01,false);
        spl0 +=  sine * COMPONENT_getParameteredValue(KNOB_GAIN_ID);
        spl1 +=  sine * COMPONENT_getParameteredValue(KNOB_GAIN_ID);
        //============================================================
    );
    (BUTTON_isOn(BUTTON_05) ==true)?
    (
        WAVETABLE_setOscType (WAVE_TABLE01,WT_OSC_TYPE_TRI);
        sine = WAVETABLE_doOscillate(WAVE_TABLE01,false);
        spl0 +=  sine * COMPONENT_getParameteredValue(KNOB_GAIN_ID);
        spl1 +=  sine * COMPONENT_getParameteredValue(KNOB_GAIN_ID);
        //============================================================
    );
    //================================================================

@gfx 200 400
//====================================================================

    // direct draw background to
    //================================================================
    drawBackGrond_black( 10);
    drawSinWaveCircle(50,1,0.8,0.0043);
    drawSinWaveCircle(50,1,0.8,0.0043);
    //================================================================
    
    // canvase test
    //================================================================
    drawWaveBufferToCanvas( CANVS_WAVE_L
                          , max_L
                          , min_L
                          , 3
                          , 0.5
                          , 1
                          , 80);
    //================================================================    
    drawWaveBufferToCanvas( CANVS_WAVE_R
                          , max_R
                          , min_R
                          , 3
                          , 0.6
                          , 1
                          , 0);
    //================================================================
    gfx_a =0.6;
    CANVAS_blitImage4(CANVS_WAVE_R,1,0);
    CANVAS_blitImage4(CANVS_WAVE_L,1,0);
    gfx_a =1;
    //================================================================
    // final background
    //================================================================
    drawDotGrid(10,10,0.04);
    //================================================================

    // for debug
    //================================================================
    DBGMESSAGE_drawAllMessage(DBG);
    //================================================================

    // for particle 
    PARTICLE_CONTROLLER_update ( PARTICLE_controller );
    //================================================================
    (time_precise() -lastPTime_  > 0.55)?
    (
        PARTICLE_CONTROLLER_addParticleType2_XY (PARTICLE_controller
                                                ,gfx_w/2
                                                ,gfx_h/2
                                                ,false
                                                );
        //============================================================
        lastPTime_ = time_precise();
    );
    //================================================================


    // App update. check and compare with last event state.(resize or mouse)
    //================================================================
    APP_update(APP_ID);
  
    //================================================================
    ( mouse_cap & 64 ==64 && lastCAP != mouse_cap )?
    (
        DBG_toggle(DBG);
    );
    //================================================================
    lastCAP = mouse_cap;
    //================================================================
    
    // alignment position when resized.
    //================================================================
    (    APP_isWindowResized(APP_ID) ==true
      && APP_isGFX_Enable(APP_ID) ==true ) ?
    (
        //============================================================
        RECTANGLE_copyTo      ( CANVS_WAVE_L,APP_ID);
        RECTANGLE_copyTo      ( CANVS_WAVE_R,APP_ID);
        CANVAS_recreateCanvas ( CANVS_WAVE_L ); 
        CANVAS_recreateCanvas ( CANVS_WAVE_R );
        //============================================================
        RECTANGLE_copyTo      ( LAYER_001,APP_ID);  // layer resize 
        RECTANGLE_copyTo      ( LAYER_002,APP_ID);  // layer resize 
        //============================================================
    );
    //================================================================

    //================================================================
    ( LAYER_isAreaResized(LAYER_001) ==true)   ?
    (
        //============================================================
        RECTANGLE_copyTo         (TEST_comp,LAYER_001);
        RECTANGLE_cropFromTopP   (TEST_comp,0.025);
        //============================================================
        RECTANGLE_copyTo         (TEST_comp2,LAYER_001);
        RECTANGLE_cropFromBottomP(TEST_comp2,0.025);
        //============================================================
        RECTANGLE_copyTo         ( BUTTON_01,LAYER_001);
        RECTANGLE_moveP          ( BUTTON_01,0,0.025);
        RECTANGLE_cropFromTopP   ( BUTTON_01,0.1);
        RECTANGLE_cropFromLeftP  ( BUTTON_01,1/5);
        //============================================================
        RECTANGLE_copyTo         ( BUTTON_02,BUTTON_01);
        RECTANGLE_move           ( BUTTON_02,RECTANGLE_getWidth(BUTTON_02),0);
        //============================================================
        RECTANGLE_copyTo         ( BUTTON_03,BUTTON_02);
        RECTANGLE_move           ( BUTTON_03,RECTANGLE_getWidth(BUTTON_03),0);
        //============================================================
        RECTANGLE_copyTo         ( BUTTON_04,BUTTON_03);
        RECTANGLE_move           ( BUTTON_04,RECTANGLE_getWidth(BUTTON_04),0);
        //============================================================
        RECTANGLE_copyTo         ( BUTTON_05,BUTTON_04);
        RECTANGLE_move           ( BUTTON_04,RECTANGLE_getWidth(BUTTON_05),0);
        //============================================================
        RECTANGLE_reduce( BUTTON_01,3,3);
        RECTANGLE_reduce( BUTTON_02,3,3);
        RECTANGLE_reduce( BUTTON_03,3,3);
        RECTANGLE_reduce( BUTTON_04,3,3);
        RECTANGLE_reduce( BUTTON_05,3,3);
        //============================================================
        
        //============================================================
        RECTANGLE_copyTo         (KNOB_HZ_ID,LAYER_001);
        RECTANGLE_removeFromTop  (KNOB_HZ_ID,RECTANGLE_getY2(BUTTON_05));
        RECTANGLE_cropFromLeftP  (KNOB_HZ_ID,0.5);
        RECTANGLE_reduce         (KNOB_HZ_ID,10,10);
        //============================================================
        RECTANGLE_copyTo         (KNOB_GAIN_ID,LAYER_001);
        RECTANGLE_removeFromTop  (KNOB_GAIN_ID,RECTANGLE_getY2(BUTTON_05));
        RECTANGLE_cropFromRightP (KNOB_GAIN_ID,0.5);
        RECTANGLE_reduce         (KNOB_GAIN_ID,10,10);
        //============================================================
    );
    //================================================================

    //================================================================
    // if animation
    //================================================================
    COMPONENT_setComponentAlpha(TEST_comp,abs(sin($pi*2*mod*2)));
    mod += 0.01;(mod > 1 )?(mod=0;);
    //================================================================

    // plugin Title Str
    //================================================================
    RECTANGLE_drawBottomRightText( APP_ID,"kawa Particle TEST");
    //================================================================
    drawHex(gfx_w/2,gfx_h/2,40,$pi*2*mod*2,false);
    //================================================================
    
//====================================================================
// 続
