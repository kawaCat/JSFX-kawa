//====================================================================
desc:kawa TestChorus
//====================================================================

// imports
//====================================================================
import kawa_ALL.jsfx-inc
//====================================================================

// sliders
//--------------------------------------------------------------------
slider1:0.25<0.0,1.0>RATE 
slider2:0.25<0.0,0.9>WIDTH
//====================================================================

@init
//====================================================================

    // create APP ID
    //================================================================
    APP_ID = APP_create();
    //================================================================

    //create Layer ID
    //================================================================
    LAYER_001 = LAYER_create("LAYER01");
    //================================================================

    //create Component and add to layer 1 .
    //================================================================
    TEST_comp  = COMPONENT_create("TEST");
    XYSlider_1 = XYSLIDER_create("XYSlider_1");
    XYSLIDER_setSliderIndexX(XYSlider_1,1);
    XYSLIDER_setSliderIndexY(XYSlider_1,2);
    //----------------------------------------------------------------
    LAYER_addChildComponent(LAYER_001 , TEST_comp);
    LAYER_addChildComponent(LAYER_001 , XYSlider_1);
    //================================================================

    // layer add to app
    //================================================================
    APP_addChildComponent(APP_ID,LAYER_001);
    //================================================================
    LAYER_setActive(LAYER_001,true);
    //================================================================

    // canvase test
    //================================================================
    CANVS_WAVE_L = CANVAS_create(100,100);
    CANVS_WAVE_R = CANVAS_create(100,100);
    //================================================================
    
    delaySize = srate;
    DELAY_ARRAY_L = CURSOLBUFFER_create(delaySize);
    DELAY_ARRAY_R = CURSOLBUFFER_create(delaySize);
    //================================================================
    DBG_toggle(DBG); // visible off
    //================================================================


@slider
//====================================================================
    XYSLIDER_setXValue(XYSlider_1,slider1);
    XYSLIDER_setYValue(XYSlider_1,slider2);
    
@block
//====================================================================
    max_L = 0;min_L = 0;
    max_R = 0;min_R = 0;
    //================================================================
    
@sample
//====================================================================
    max_L = max(max_L,spl0);
    min_L = min(min_L,spl0);
    max_R = max(max_R,spl1);
    min_R = min(min_R,spl1);
    //================================================================
 
    //================================================================
    CURSOLBUFFER_push( DELAY_ARRAY_L
                     ,spl0 );    
    CURSOLBUFFER_push( DELAY_ARRAY_R
                     ,spl1 );  
    
    speed += 0.0002 * XYSLIDER_getXValue(XYSlider_1);
    (speed > 1)? (speed = 0;);
    
    chorusWidth = srate* ( 0.001 * XYSLIDER_getYValue(XYSlider_1) );
    //================================================================
    delay_L = CURSOLBUFFER_getOffsettedValue( DELAY_ARRAY_L
                                            , -chorusWidth * sin($pi * speed) );
    delay_R = CURSOLBUFFER_getOffsettedValue( DELAY_ARRAY_R
                                            , -chorusWidth * sin($pi * speed) );
    //================================================================
    spl0 = spl0 + delay_L;
    spl1 = spl1 + delay_R;
    //================================================================

@gfx 200 400
//====================================================================
    // direct draw background to
    //================================================================
    drawBackGrond_color(5,0,60);
    drawSinWaveCircle(100,0.8,1,0.0043);
    //================================================================

    // canvase test
    //================================================================
    drawWaveBufferToCanvas(CANVS_WAVE_L
                          ,max_L
                          ,min_L
                          ,40 * XYSLIDER_getXValue(XYSlider_1)
                          ,0.3
                          ,1
                          ,80);

    drawWaveBufferToCanvas(CANVS_WAVE_R
                          ,max_R
                          ,min_R
                          ,40 * XYSLIDER_getYValue(XYSlider_1)
                          ,0.4
                          ,1
                          ,0);
    //================================================================
    gfx_a =0.6;
    CANVAS_blitImage4(CANVS_WAVE_R,1,0);
    CANVAS_blitImage4(CANVS_WAVE_L,1,0);
    gfx_a =1;
    //================================================================
    // final background
    //================================================================
    drawDotGrid(16,16,0.6);
    //================================================================
   
    // for debug
    //================================================================
    DBGMESSAGE_drawAllMessage(DBG);
    //================================================================

    // App update. check and compare with last event state.(resize or mouse)
    //================================================================
    APP_update(APP_ID);
    //================================================================
  
    //================================================================
    ( mouse_cap & 64 ==64 && lastCAP != mouse_cap )?
    (
        DBG_toggle(DBG);
    );
    lastCAP = mouse_cap;
    //================================================================
    ( APP_isMouseButtonPressed(APP_ID)  ==true) ?
    ( 0;);
    
    ( APP_isMouseButtonReleased(APP_ID) ==true) ?
    ( 0;);
    //================================================================
    
    
    // alignment position when resized.
    //================================================================
    ( APP_isWindowResized(APP_ID) ==true) ?
    (
        RECTANGLE_copyTo      ( CANVS_WAVE_L,APP_ID);
        RECTANGLE_copyTo      ( CANVS_WAVE_R,APP_ID);
        CANVAS_recreateCanvas ( CANVS_WAVE_L ); 
        CANVAS_recreateCanvas ( CANVS_WAVE_R );
        //============================================================
        RECTANGLE_copyTo      ( LAYER_001,APP_ID);  // layer resize 
        //============================================================
    );
    //================================================================

    //================================================================
    ( LAYER_isAreaResized(LAYER_001) ==true)   ?
    (
        RECTANGLE_copyTo         (TEST_comp,LAYER_001);
        RECTANGLE_cropFromTopP   (TEST_comp,0.025);
        //============================================================
        RECTANGLE_copyTo         (XYSlider_1,LAYER_001);
        RECTANGLE_reduceP        (XYSlider_1,0.1,0.1);
    );
    //================================================================
    // if animation
    //================================================================
    COMPONENT_setComponentAlpha(TEST_comp,abs(sin($pi*2*mod*2)));
    mod += 0.01;(mod > 1 )?(mod=0;);
    //================================================================
    
    // plugin Title Str
    //================================================================
    pluginTitleStrMarginX = 10;
    pluginTitleStrMarginY = 4;
    pluginTitleStr = #;
    sprintf ( pluginTitleStr,"kawa Test Chorus");
    //================================================================
    gfx_measurestr(pluginTitleStr,pluginTitleStr_w,pluginTitleStr_h);
    //================================================================
    gfx_x = gfx_w - pluginTitleStr_w -pluginTitleStrMarginX;
    gfx_y = gfx_h - pluginTitleStr_h -pluginTitleStrMarginY;
    //================================================================
    gfx_r =0;gfx_g=0;gfx_b=0;gfx_a=1;
    gfx_rect( gfx_x -pluginTitleStrMarginX
            , gfx_y -pluginTitleStrMarginY
            , pluginTitleStr_w+pluginTitleStrMarginX*3
            , pluginTitleStr_h+pluginTitleStrMarginY*3
            );
    //================================================================
    gfx_r =1;gfx_g=1;gfx_b=1;gfx_a=1;
    gfx_drawstr( pluginTitleStr);
    //================================================================
    

//====================================================================
// 続
// 未完
