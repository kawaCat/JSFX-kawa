//====================================================================
desc:_kawa_XY_BitCrusher
//====================================================================

// imports
//====================================================================
import kawa_ALL.jsfx-inc
//====================================================================

// sliders //( this app lib need Continuous number)
//--------------------------------------------------------------------
slider1:0.25 <0.0,1.0.0001>BIT 
slider2:0.25 <0.0,0.9>FREQ
slider3:0.0  <0,1,{Wave,Off}>VIEW
slider4:0.0  <0,5, {COLORFULL,SLATE GREY,ORANGE RED,SEA GREEN,DODGER BLUE,GRAPHICS OFF}>STYLE
//====================================================================
in_pin: left input
in_pin: right input
out_pin:left output
out_pin:right output
//====================================================================

@init
//====================================================================
    // create APP ID
    //================================================================
    app_ID = APP_create();
    //================================================================

    //create Layer ID
    //================================================================
    layer_001  = LAYER_create("LAYER01");
    //================================================================

    //create Component and add to layer 1 .
    //================================================================
    comp_Border  = COMPONENT_create("TEST");
    comp_XYSlider_1 = XYSLIDER_create("comp_XYSlider_1");
    //================================================================
    XYSLIDER_setSliderIndexX(comp_XYSlider_1,2);
    XYSLIDER_setSliderIndexY(comp_XYSlider_1,1);
    XYSLIDER_setIsNeedCrossCursolLine(comp_XYSlider_1,true);
    //----------------------------------------------------------------
    LAYER_addChildComponent(layer_001  , comp_Border);
    LAYER_addChildComponent(layer_001  , comp_XYSlider_1);
    //================================================================

    // layer add to app
    //================================================================
    APP_addChildComponent(app_ID,layer_001 );
    //================================================================
    LAYER_setActive(layer_001 ,true);
    //================================================================

    // canvase test
    //================================================================
    canvas_WAVE_L = CANVAS_create(gfx_w,gfx_h);
    canvas_WAVE_R = CANVAS_create(gfx_w,gfx_h);
    //================================================================
    
    //================================================================
    DBG_toggle(DBG); // visible off
    //================================================================
    
    // for particle 
    PARTICLE_controller = PARTICLE_CONTROLLER_create();
    //================================================================
    DEFINE_MAX_BIT = 16;
    
    //bitCrusher params
    //================================================================
    fBits = 1;
    fFreq = 1;
    //================================================================
    f_fStep   =0;;
    f_fTemp   =0;;
    f_fPhase -=1.0/srate;
    f_fLastValueL =0;
    f_fLastValueR =0;
    //================================================================
    backGround_colorSingleStr = "slategrey"

@slider
//====================================================================
    XYSLIDER_setYValue(comp_XYSlider_1,slider1,false);
    XYSLIDER_setXValue(comp_XYSlider_1,slider2,false);
    //================================================================
    APP_SliderChanged(app_ID); // notify for update lastValue
    //================================================================
    
    //================================================================
    ( slider4 == 0)?
    (
        COMPONENT_setActive(comp_Border,true);
        //============================================================
    ):( slider4 == 1)?
    (
        COMPONENT_setActive(comp_Border,false);
        backGround_colorSingleStr = "slategrey";
        COMPONENT_setComponentAlpha(comp_Border,1);
        RECTANGLE_setX( layer_001 ,0);
        gfx_clear = -1;
        //============================================================
        ):( slider4 == 2)?
    (
        COMPONENT_setActive(comp_Border,false);
        backGround_colorSingleStr = "orangered";
        COMPONENT_setComponentAlpha(comp_Border,1);
        RECTANGLE_setX( layer_001 ,0);
        gfx_clear = -1;
        //============================================================
    ):( slider4 == 3)?
    (
        COMPONENT_setActive(comp_Border,false);
        backGround_colorSingleStr = "seagreen";
        COMPONENT_setComponentAlpha(comp_Border,1);
        RECTANGLE_setX( layer_001 ,0);
        gfx_clear = -1;
        //============================================================
    ):( slider4 == 4)?
    (
        COMPONENT_setActive(comp_Border,false); 
        backGround_colorSingleStr = "dodgerblue";
        COMPONENT_setComponentAlpha(comp_Border,1);
        RECTANGLE_setX( layer_001 ,0);
        gfx_clear = -1;
        //============================================================
    ):( slider4 == 5)?
    (
        gfx_clear = 0; //brack
    )
    ;
    //================================================================
    
@block
//====================================================================
    f_max_L = 0;f_min_L = 0;
    f_max_R = 0;f_min_R = 0;
    //================================================================
    
@sample
//====================================================================
    f_max_L = max(f_max_L,spl0);
    f_min_L = min(f_min_L,spl0);
    f_max_R = max(f_max_R,spl1);
    f_min_R = min(f_min_R,spl1);
    //================================================================
    fBits = XYSLIDER_getYValue(comp_XYSlider_1);;
    //fFreq =1- XYSLIDER_getYValue(comp_XYSlider_1);;
    fFreq = XYSLIDER_getXValue(comp_XYSlider_1);;
    
    //================================================================
    f_fPhase -=1.0/srate;
    //================================================================
    (    fFreq == 1.0 
      || f_fPhase < 0.) ?
    (
        f_fPhase += 1.0/(fFreq*srate);
        //============================================================
        ( fBits  < 1.0)?
        (
            //JS eefect on  "witti's bitcrusher jsfx Effect"
            f_fStep = pow(1/2,(fBits*DEFINE_MAX_BIT)) ;
            //========================================================
            f_fLastValueL = f_fStep * floor( spl0/f_fStep +0.5 );
            f_fLastValueR = f_fStep * floor( spl1/f_fStep +0.5 );
            //========================================================
        ):(
            f_fLastValueL = spl0;
            f_fLastValueR = spl1;
        );
    );
    //================================================================
    spl0 = f_fLastValueL;
    spl1 = f_fLastValueR;
    //gmem[0]=12345164; test
    
@gfx 200 400
//====================================================================
( slider4 != 5 )?
(
    //================================================================
    // if animation on?
    //================================================================
    ( slider4 == 0)?
    (
        // direct draw background to
        //============================================================
        drawBackGrond_color( 20
                           , 120 + 120 *  ( XYSLIDER_getXValue(comp_XYSlider_1) )
                           , 12*20 *  ( XYSLIDER_getYValue(comp_XYSlider_1) ));
        //============================================================
        drawSinWaveCircle(100,0.8,1,0.0043);
        //============================================================
            
        //============================================================
        // final background
        //============================================================
        drawDotGrid(16,16,0.6);
        //============================================================
        // for particle 
        PARTICLE_CONTROLLER_update ( PARTICLE_controller );
        //============================================================
        ( APP_isMouseButtonHoldingPress(app_ID)  ==true) ?      
        (
            PARTICLE_CONTROLLER_addParticleType1(PARTICLE_controller);
        );
        //============================================================
        (time_precise() -lastPTime_  > 0.25)?
        (
            PARTICLE_CONTROLLER_addParticleType2_XY (PARTICLE_controller
                                                    ,gfx_w/2
                                                    ,gfx_h/2
                                                    ,false
                                                   );
            lastPTime_ = time_precise();
        );
        //============================================================
        // if animation
        //============================================================
        COMPONENT_setComponentAlpha(comp_Border,abs(sin($pi*2*mod*2)));
        mod += 0.01;(mod > 1 )?(mod=0;);
        //============================================================
        RECTANGLE_setX( layer_001 ,40*sin($pi*2*mod));
        //============================================================
    ):(
        //============================================================
        changeGfxColorByPreset(backGround_colorSingleStr );  
        gfx_a=1;
        //============================================================
        gfx_rect(0,0,gfx_w,gfx_h,true);
        //============================================================
    );
    //================================================================
    
    //================================================================
    // graph View
    //================================================================
    (slider3 ==0)?
    (
        //============================================================
        drawWaveBufferToCanvas(canvas_WAVE_L
                              ,f_max_L
                              ,f_min_L
                              ,40 * ( 1- XYSLIDER_getXValue(comp_XYSlider_1) )
                              ,0.3
                              ,1
                              ,80);
        //============================================================
        drawWaveBufferToCanvas(canvas_WAVE_R
                              ,f_max_R
                              ,f_min_R
                              ,40 * ( XYSLIDER_getYValue(comp_XYSlider_1) )
                              ,0.4
                              ,1
                              ,0);
        //============================================================
        gfx_a =0.6;
        CANVAS_blitImage4(canvas_WAVE_R,1,0);
        CANVAS_blitImage4(canvas_WAVE_L,1,0);
        gfx_a =1;
    );
    //================================================================
    
    // App update. check and compare with last event state.(resize or mouse)
    //================================================================
    APP_update(app_ID);
    //================================================================
    
    // alignment position when resized.
    //================================================================
    ( APP_isWindowResized(app_ID) ==true) ?
    (
        RECTANGLE_copyTo      ( canvas_WAVE_L,app_ID);
        RECTANGLE_copyTo      ( canvas_WAVE_R,app_ID);
        CANVAS_recreateCanvas ( canvas_WAVE_L ); 
        CANVAS_recreateCanvas ( canvas_WAVE_R );
        //============================================================
        RECTANGLE_copyTo      ( layer_001 ,app_ID);  // layer resize 
        //============================================================
    );
    //================================================================
    ( LAYER_isAreaResized(layer_001 ) ==true)   ?
    (
        RECTANGLE_copyTo         (comp_Border,layer_001 );
        RECTANGLE_cropFromTopP   (comp_Border,0.025);
        //============================================================
        RECTANGLE_copyTo         (comp_XYSlider_1,layer_001 );
        RECTANGLE_reduceP        (comp_XYSlider_1,0.1,0.1);
        //============================================================
    );
    //================================================================
    
    // plugin Title Str
    //================================================================
    RECTANGLE_drawBottomRightText( app_ID,"XY Bit Crusher");
    //================================================================

    drawText = #;
    //================================================================
    gfx_r = 0;gfx_g =0;gfx_b =0;gfx_a = 1;
    //================================================================
    sprintf (drawText,"S Rate : %1.2f khz",fFreq*srate/1000 );
    //================================================================
    gfx_r = 0;gfx_g =0;gfx_b =0;gfx_a = 1;
    gfx_x = 5;
    gfx_y = gfx_h-(gfx_texth)*1.05*2-1;
    gfx_drawstr(drawText);
    //================================================================
    sprintf (drawText,"Bit.   : %1.2f bit", fBits*DEFINE_MAX_BIT);
    //================================================================
    gfx_x = 5;
    gfx_y = gfx_h-gfx_texth-2;
    gfx_drawstr(drawText);
    //================================================================
):(
    gfx_a=1;
    //================================================================
    gfx_rect(0,0,gfx_w,gfx_h,true);
);
//====================================================================
// 続

